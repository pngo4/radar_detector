
radar_detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007498  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08007668  08007668  00008668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b8  080078b8  00009064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080078b8  080078b8  000088b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078c0  080078c0  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078c0  080078c0  000088c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078c4  080078c4  000088c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080078c8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000064  0800792c  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  0800792c  0000933c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010af5  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254c  00000000  00000000  00019b89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001c0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd7  00000000  00000000  0001cff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d0f  00000000  00000000  0001dbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012406  00000000  00000000  000408de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3b36  00000000  00000000  00052ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012681a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048d0  00000000  00000000  00126860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012b130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007650 	.word	0x08007650

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08007650 	.word	0x08007650

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b988 	b.w	8000f84 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9d08      	ldr	r5, [sp, #32]
 8000c92:	468e      	mov	lr, r1
 8000c94:	4604      	mov	r4, r0
 8000c96:	4688      	mov	r8, r1
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d14a      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d962      	bls.n	8000d68 <__udivmoddi4+0xdc>
 8000ca2:	fab2 f682 	clz	r6, r2
 8000ca6:	b14e      	cbz	r6, 8000cbc <__udivmoddi4+0x30>
 8000ca8:	f1c6 0320 	rsb	r3, r6, #32
 8000cac:	fa01 f806 	lsl.w	r8, r1, r6
 8000cb0:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb4:	40b7      	lsls	r7, r6
 8000cb6:	ea43 0808 	orr.w	r8, r3, r8
 8000cba:	40b4      	lsls	r4, r6
 8000cbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc0:	fa1f fc87 	uxth.w	ip, r7
 8000cc4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd2:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d909      	bls.n	8000cee <__udivmoddi4+0x62>
 8000cda:	18fb      	adds	r3, r7, r3
 8000cdc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ce0:	f080 80ea 	bcs.w	8000eb8 <__udivmoddi4+0x22c>
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	f240 80e7 	bls.w	8000eb8 <__udivmoddi4+0x22c>
 8000cea:	3902      	subs	r1, #2
 8000cec:	443b      	add	r3, r7
 8000cee:	1a9a      	subs	r2, r3, r2
 8000cf0:	b2a3      	uxth	r3, r4
 8000cf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d02:	459c      	cmp	ip, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x8e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0c:	f080 80d6 	bcs.w	8000ebc <__udivmoddi4+0x230>
 8000d10:	459c      	cmp	ip, r3
 8000d12:	f240 80d3 	bls.w	8000ebc <__udivmoddi4+0x230>
 8000d16:	443b      	add	r3, r7
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1e:	eba3 030c 	sub.w	r3, r3, ip
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa2>
 8000d26:	40f3      	lsrs	r3, r6
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xb6>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb0>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x14c>
 8000d4a:	4573      	cmp	r3, lr
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xc8>
 8000d4e:	4282      	cmp	r2, r0
 8000d50:	f200 8105 	bhi.w	8000f5e <__udivmoddi4+0x2d2>
 8000d54:	1a84      	subs	r4, r0, r2
 8000d56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	4690      	mov	r8, r2
 8000d5e:	2d00      	cmp	r5, #0
 8000d60:	d0e5      	beq.n	8000d2e <__udivmoddi4+0xa2>
 8000d62:	e9c5 4800 	strd	r4, r8, [r5]
 8000d66:	e7e2      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f000 8090 	beq.w	8000e8e <__udivmoddi4+0x202>
 8000d6e:	fab2 f682 	clz	r6, r2
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f040 80a4 	bne.w	8000ec0 <__udivmoddi4+0x234>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	0c03      	lsrs	r3, r0, #16
 8000d7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d80:	b280      	uxth	r0, r0
 8000d82:	b2bc      	uxth	r4, r7
 8000d84:	2101      	movs	r1, #1
 8000d86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d92:	fb04 f20c 	mul.w	r2, r4, ip
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x11e>
 8000d9a:	18fb      	adds	r3, r7, r3
 8000d9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000da0:	d202      	bcs.n	8000da8 <__udivmoddi4+0x11c>
 8000da2:	429a      	cmp	r2, r3
 8000da4:	f200 80e0 	bhi.w	8000f68 <__udivmoddi4+0x2dc>
 8000da8:	46c4      	mov	ip, r8
 8000daa:	1a9b      	subs	r3, r3, r2
 8000dac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000db0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db8:	fb02 f404 	mul.w	r4, r2, r4
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	d907      	bls.n	8000dd0 <__udivmoddi4+0x144>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x142>
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	f200 80ca 	bhi.w	8000f62 <__udivmoddi4+0x2d6>
 8000dce:	4602      	mov	r2, r0
 8000dd0:	1b1b      	subs	r3, r3, r4
 8000dd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x98>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa0e f401 	lsl.w	r4, lr, r1
 8000de8:	fa20 f306 	lsr.w	r3, r0, r6
 8000dec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000df0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df4:	4323      	orrs	r3, r4
 8000df6:	fa00 f801 	lsl.w	r8, r0, r1
 8000dfa:	fa1f fc87 	uxth.w	ip, r7
 8000dfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000e02:	0c1c      	lsrs	r4, r3, #16
 8000e04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d909      	bls.n	8000e2c <__udivmoddi4+0x1a0>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1e:	f080 809c 	bcs.w	8000f5a <__udivmoddi4+0x2ce>
 8000e22:	45a6      	cmp	lr, r4
 8000e24:	f240 8099 	bls.w	8000f5a <__udivmoddi4+0x2ce>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	443c      	add	r4, r7
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	fa1f fe83 	uxth.w	lr, r3
 8000e34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e38:	fb09 4413 	mls	r4, r9, r3, r4
 8000e3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e44:	45a4      	cmp	ip, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1ce>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4e:	f080 8082 	bcs.w	8000f56 <__udivmoddi4+0x2ca>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d97f      	bls.n	8000f56 <__udivmoddi4+0x2ca>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5e:	eba4 040c 	sub.w	r4, r4, ip
 8000e62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e66:	4564      	cmp	r4, ip
 8000e68:	4673      	mov	r3, lr
 8000e6a:	46e1      	mov	r9, ip
 8000e6c:	d362      	bcc.n	8000f34 <__udivmoddi4+0x2a8>
 8000e6e:	d05f      	beq.n	8000f30 <__udivmoddi4+0x2a4>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x1fe>
 8000e72:	ebb8 0203 	subs.w	r2, r8, r3
 8000e76:	eb64 0409 	sbc.w	r4, r4, r9
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000e82:	431e      	orrs	r6, r3
 8000e84:	40cc      	lsrs	r4, r1
 8000e86:	e9c5 6400 	strd	r6, r4, [r5]
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	e74f      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000e8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e92:	0c01      	lsrs	r1, r0, #16
 8000e94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e98:	b280      	uxth	r0, r0
 8000e9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	463c      	mov	r4, r7
 8000ea4:	46b8      	mov	r8, r7
 8000ea6:	46be      	mov	lr, r7
 8000ea8:	2620      	movs	r6, #32
 8000eaa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eae:	eba2 0208 	sub.w	r2, r2, r8
 8000eb2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb6:	e766      	b.n	8000d86 <__udivmoddi4+0xfa>
 8000eb8:	4601      	mov	r1, r0
 8000eba:	e718      	b.n	8000cee <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e72c      	b.n	8000d1a <__udivmoddi4+0x8e>
 8000ec0:	f1c6 0220 	rsb	r2, r6, #32
 8000ec4:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec8:	40b7      	lsls	r7, r6
 8000eca:	40b1      	lsls	r1, r6
 8000ecc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000eda:	b2bc      	uxth	r4, r7
 8000edc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ee0:	0c11      	lsrs	r1, r2, #16
 8000ee2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee6:	fb08 f904 	mul.w	r9, r8, r4
 8000eea:	40b0      	lsls	r0, r6
 8000eec:	4589      	cmp	r9, r1
 8000eee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ef2:	b280      	uxth	r0, r0
 8000ef4:	d93e      	bls.n	8000f74 <__udivmoddi4+0x2e8>
 8000ef6:	1879      	adds	r1, r7, r1
 8000ef8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000efc:	d201      	bcs.n	8000f02 <__udivmoddi4+0x276>
 8000efe:	4589      	cmp	r9, r1
 8000f00:	d81f      	bhi.n	8000f42 <__udivmoddi4+0x2b6>
 8000f02:	eba1 0109 	sub.w	r1, r1, r9
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f12:	b292      	uxth	r2, r2
 8000f14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f18:	4542      	cmp	r2, r8
 8000f1a:	d229      	bcs.n	8000f70 <__udivmoddi4+0x2e4>
 8000f1c:	18ba      	adds	r2, r7, r2
 8000f1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f22:	d2c4      	bcs.n	8000eae <__udivmoddi4+0x222>
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d2c2      	bcs.n	8000eae <__udivmoddi4+0x222>
 8000f28:	f1a9 0102 	sub.w	r1, r9, #2
 8000f2c:	443a      	add	r2, r7
 8000f2e:	e7be      	b.n	8000eae <__udivmoddi4+0x222>
 8000f30:	45f0      	cmp	r8, lr
 8000f32:	d29d      	bcs.n	8000e70 <__udivmoddi4+0x1e4>
 8000f34:	ebbe 0302 	subs.w	r3, lr, r2
 8000f38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	46e1      	mov	r9, ip
 8000f40:	e796      	b.n	8000e70 <__udivmoddi4+0x1e4>
 8000f42:	eba7 0909 	sub.w	r9, r7, r9
 8000f46:	4449      	add	r1, r9
 8000f48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f50:	fb09 f804 	mul.w	r8, r9, r4
 8000f54:	e7db      	b.n	8000f0e <__udivmoddi4+0x282>
 8000f56:	4673      	mov	r3, lr
 8000f58:	e77f      	b.n	8000e5a <__udivmoddi4+0x1ce>
 8000f5a:	4650      	mov	r0, sl
 8000f5c:	e766      	b.n	8000e2c <__udivmoddi4+0x1a0>
 8000f5e:	4608      	mov	r0, r1
 8000f60:	e6fd      	b.n	8000d5e <__udivmoddi4+0xd2>
 8000f62:	443b      	add	r3, r7
 8000f64:	3a02      	subs	r2, #2
 8000f66:	e733      	b.n	8000dd0 <__udivmoddi4+0x144>
 8000f68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f6c:	443b      	add	r3, r7
 8000f6e:	e71c      	b.n	8000daa <__udivmoddi4+0x11e>
 8000f70:	4649      	mov	r1, r9
 8000f72:	e79c      	b.n	8000eae <__udivmoddi4+0x222>
 8000f74:	eba1 0109 	sub.w	r1, r1, r9
 8000f78:	46c4      	mov	ip, r8
 8000f7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7e:	fb09 f804 	mul.w	r8, r9, r4
 8000f82:	e7c4      	b.n	8000f0e <__udivmoddi4+0x282>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <get_median>:
uint32_t store_millis;
uint32_t value1 = 0; //first measured value
uint32_t value2 = 0; //second measured value
uint16_t distance = 0; //in cm

static uint32_t get_median(uint32_t* values, uint8_t size) {
 8000f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f8c:	b089      	sub	sp, #36	@ 0x24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	70fb      	strb	r3, [r7, #3]
 8000f96:	466b      	mov	r3, sp
 8000f98:	461e      	mov	r6, r3
	uint32_t sorted[size];
 8000f9a:	78f9      	ldrb	r1, [r7, #3]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	b2cb      	uxtb	r3, r1
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	4691      	mov	r9, r2
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000fb6:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000fba:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000fbe:	b2cb      	uxtb	r3, r1
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	461c      	mov	r4, r3
 8000fc4:	4615      	mov	r5, r2
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	016b      	lsls	r3, r5, #5
 8000fd0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000fd4:	0162      	lsls	r2, r4, #5
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	3307      	adds	r3, #7
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	ebad 0d03 	sub.w	sp, sp, r3
 8000fe4:	466b      	mov	r3, sp
 8000fe6:	3303      	adds	r3, #3
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	613b      	str	r3, [r7, #16]
	memcpy(sorted, values, size * sizeof(uint32_t));
 8000fee:	78fb      	ldrb	r3, [r7, #3]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	6938      	ldr	r0, [r7, #16]
 8000ff8:	f004 fe66 	bl	8005cc8 <memcpy>

	//bubble sort

	for(int i = 0; i < size - 1; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	e029      	b.n	8001056 <get_median+0xce>
		for (int j = i + 1; j < size; j++) {
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3301      	adds	r3, #1
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	e01e      	b.n	8001048 <get_median+0xc0>
			if(sorted[i] > sorted[j]) {
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	69b9      	ldr	r1, [r7, #24]
 8001016:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800101a:	429a      	cmp	r2, r3
 800101c:	d911      	bls.n	8001042 <get_median+0xba>
				uint32_t tmp = sorted[i];
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001026:	60fb      	str	r3, [r7, #12]
				sorted[i] = sorted[j];
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				sorted[j] = tmp;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	68f9      	ldr	r1, [r7, #12]
 800103e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = i + 1; j < size; j++) {
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	3301      	adds	r3, #1
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	78fb      	ldrb	r3, [r7, #3]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbdc      	blt.n	800100a <get_median+0x82>
	for(int i = 0; i < size - 1; i++) {
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	3301      	adds	r3, #1
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	3b01      	subs	r3, #1
 800105a:	69fa      	ldr	r2, [r7, #28]
 800105c:	429a      	cmp	r2, r3
 800105e:	dbd0      	blt.n	8001002 <get_median+0x7a>
			}
		}
	}
	return sorted[size/2]; // median
 8001060:	78fb      	ldrb	r3, [r7, #3]
 8001062:	085b      	lsrs	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106e:	46b5      	mov	sp, r6
}
 8001070:	4618      	mov	r0, r3
 8001072:	3724      	adds	r7, #36	@ 0x24
 8001074:	46bd      	mov	sp, r7
 8001076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800107c <median_filter>:

uint32_t median_filter(uint32_t new_value) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

	//reject bad data, spec for HCSR04 is around 20 cm to 400 cm
	if(new_value < 5 || new_value > 400) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d903      	bls.n	8001092 <median_filter+0x16>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001090:	d90d      	bls.n	80010ae <median_filter+0x32>
		return get_median(dist_buffer, buffer_filled ? MEDIAN_FILTER_SIZE : dist_index);
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <median_filter+0x80>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <median_filter+0x24>
 800109a:	4b19      	ldr	r3, [pc, #100]	@ (8001100 <median_filter+0x84>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	e000      	b.n	80010a2 <median_filter+0x26>
 80010a0:	2307      	movs	r3, #7
 80010a2:	4619      	mov	r1, r3
 80010a4:	4817      	ldr	r0, [pc, #92]	@ (8001104 <median_filter+0x88>)
 80010a6:	f7ff ff6f 	bl	8000f88 <get_median>
 80010aa:	4603      	mov	r3, r0
 80010ac:	e021      	b.n	80010f2 <median_filter+0x76>
	}

	dist_buffer[dist_index++] = new_value;
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <median_filter+0x84>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	b2d1      	uxtb	r1, r2
 80010b6:	4a12      	ldr	r2, [pc, #72]	@ (8001100 <median_filter+0x84>)
 80010b8:	7011      	strb	r1, [r2, #0]
 80010ba:	4619      	mov	r1, r3
 80010bc:	4a11      	ldr	r2, [pc, #68]	@ (8001104 <median_filter+0x88>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(dist_index >= MEDIAN_FILTER_SIZE) {
 80010c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <median_filter+0x84>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b06      	cmp	r3, #6
 80010ca:	d905      	bls.n	80010d8 <median_filter+0x5c>
		dist_index = 0;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <median_filter+0x84>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	701a      	strb	r2, [r3, #0]
		buffer_filled = 1;
 80010d2:	4b0a      	ldr	r3, [pc, #40]	@ (80010fc <median_filter+0x80>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
	}

	return get_median(dist_buffer, buffer_filled ? MEDIAN_FILTER_SIZE : dist_index);
 80010d8:	4b08      	ldr	r3, [pc, #32]	@ (80010fc <median_filter+0x80>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <median_filter+0x6a>
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <median_filter+0x84>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	e000      	b.n	80010e8 <median_filter+0x6c>
 80010e6:	2307      	movs	r3, #7
 80010e8:	4619      	mov	r1, r3
 80010ea:	4806      	ldr	r0, [pc, #24]	@ (8001104 <median_filter+0x88>)
 80010ec:	f7ff ff4c 	bl	8000f88 <get_median>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000009d 	.word	0x2000009d
 8001100:	2000009c 	.word	0x2000009c
 8001104:	20000080 	.word	0x20000080

08001108 <HCR04_init>:

void HCR04_init(TIM_HandleTypeDef *tim) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(tim);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f002 ff7b 	bl	800400c <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800111c:	4803      	ldr	r0, [pc, #12]	@ (800112c <HCR04_init+0x24>)
 800111e:	f001 fe47 	bl	8002db0 <HAL_GPIO_WritePin>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40020000 	.word	0x40020000

08001130 <HCSR04_read>:


uint16_t HCSR04_read(TIM_HandleTypeDef *tim) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

	//set for 10 uS
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8001138:	2201      	movs	r2, #1
 800113a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800113e:	4831      	ldr	r0, [pc, #196]	@ (8001204 <HCSR04_read+0xd4>)
 8001140:	f001 fe36 	bl	8002db0 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(tim, 0);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(tim) < 10); //wait for 10 uS
 800114c:	bf00      	nop
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001154:	2b09      	cmp	r3, #9
 8001156:	d9fa      	bls.n	800114e <HCSR04_read+0x1e>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); //set back to low
 8001158:	2200      	movs	r2, #0
 800115a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800115e:	4829      	ldr	r0, [pc, #164]	@ (8001204 <HCSR04_read+0xd4>)
 8001160:	f001 fe26 	bl	8002db0 <HAL_GPIO_WritePin>

	//now reading starts
	store_millis = HAL_GetTick(); //use tick to avoid infinite while loop, stores current time
 8001164:	f001 fb36 	bl	80027d4 <HAL_GetTick>
 8001168:	4603      	mov	r3, r0
 800116a:	4a27      	ldr	r2, [pc, #156]	@ (8001208 <HCSR04_read+0xd8>)
 800116c:	6013      	str	r3, [r2, #0]
	//wait for echo pin to go HIGH
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET) {
 800116e:	e009      	b.n	8001184 <HCSR04_read+0x54>
		if((HAL_GetTick() - store_millis) > 100) return 0; //timeout
 8001170:	f001 fb30 	bl	80027d4 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <HCSR04_read+0xd8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b64      	cmp	r3, #100	@ 0x64
 800117e:	d901      	bls.n	8001184 <HCSR04_read+0x54>
 8001180:	2300      	movs	r3, #0
 8001182:	e03a      	b.n	80011fa <HCSR04_read+0xca>
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET) {
 8001184:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001188:	481e      	ldr	r0, [pc, #120]	@ (8001204 <HCSR04_read+0xd4>)
 800118a:	f001 fdf9 	bl	8002d80 <HAL_GPIO_ReadPin>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0ed      	beq.n	8001170 <HCSR04_read+0x40>
	}

	value1 = __HAL_TIM_GET_COUNTER(tim);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119a:	4a1c      	ldr	r2, [pc, #112]	@ (800120c <HCSR04_read+0xdc>)
 800119c:	6013      	str	r3, [r2, #0]

	store_millis = HAL_GetTick();//stores current time
 800119e:	f001 fb19 	bl	80027d4 <HAL_GetTick>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a18      	ldr	r2, [pc, #96]	@ (8001208 <HCSR04_read+0xd8>)
 80011a6:	6013      	str	r3, [r2, #0]
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) {
 80011a8:	e009      	b.n	80011be <HCSR04_read+0x8e>
		if((HAL_GetTick() - store_millis) > 80) return 0; // timeout
 80011aa:	f001 fb13 	bl	80027d4 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <HCSR04_read+0xd8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b50      	cmp	r3, #80	@ 0x50
 80011b8:	d901      	bls.n	80011be <HCSR04_read+0x8e>
 80011ba:	2300      	movs	r3, #0
 80011bc:	e01d      	b.n	80011fa <HCSR04_read+0xca>
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) {
 80011be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011c2:	4810      	ldr	r0, [pc, #64]	@ (8001204 <HCSR04_read+0xd4>)
 80011c4:	f001 fddc 	bl	8002d80 <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d0ed      	beq.n	80011aa <HCSR04_read+0x7a>
	}
	value2 = __HAL_TIM_GET_COUNTER(tim);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001210 <HCSR04_read+0xe0>)
 80011d6:	6013      	str	r3, [r2, #0]

	// distance = (value2 - value1) / 58;
	distance = (value2 - value1) / 58;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001210 <HCSR04_read+0xe0>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <HCSR04_read+0xdc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001214 <HCSR04_read+0xe4>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	095b      	lsrs	r3, r3, #5
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <HCSR04_read+0xe8>)
 80011ee:	801a      	strh	r2, [r3, #0]

	HAL_Delay(50);
 80011f0:	2032      	movs	r0, #50	@ 0x32
 80011f2:	f001 fafb 	bl	80027ec <HAL_Delay>

	return distance;
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <HCSR04_read+0xe8>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40020000 	.word	0x40020000
 8001208:	200000a0 	.word	0x200000a0
 800120c:	200000a4 	.word	0x200000a4
 8001210:	200000a8 	.word	0x200000a8
 8001214:	8d3dcb09 	.word	0x8d3dcb09
 8001218:	200000ac 	.word	0x200000ac

0800121c <ILI9341_SPI_Init>:

static SPI_HandleTypeDef *ili9341_spi;

/* Initialize SPI */
void ILI9341_SPI_Init(SPI_HandleTypeDef *spi_handle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

	ili9341_spi = spi_handle;
 8001224:	4a05      	ldr	r2, [pc, #20]	@ (800123c <ILI9341_SPI_Init+0x20>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800122a:	2200      	movs	r2, #0
 800122c:	2110      	movs	r1, #16
 800122e:	4804      	ldr	r0, [pc, #16]	@ (8001240 <ILI9341_SPI_Init+0x24>)
 8001230:	f001 fdbe 	bl	8002db0 <HAL_GPIO_WritePin>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200000b0 	.word	0x200000b0
 8001240:	40020000 	.word	0x40020000

08001244 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(ili9341_spi, &SPI_Data, 1, 1);
 800124e:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <ILI9341_SPI_Send+0x20>)
 8001250:	6818      	ldr	r0, [r3, #0]
 8001252:	1df9      	adds	r1, r7, #7
 8001254:	2301      	movs	r3, #1
 8001256:	2201      	movs	r2, #1
 8001258:	f002 fc67 	bl	8003b2a <HAL_SPI_Transmit>
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200000b0 	.word	0x200000b0

08001268 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2110      	movs	r1, #16
 8001276:	480b      	ldr	r0, [pc, #44]	@ (80012a4 <ILI9341_Write_Command+0x3c>)
 8001278:	f001 fd9a 	bl	8002db0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800127c:	2200      	movs	r2, #0
 800127e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001282:	4809      	ldr	r0, [pc, #36]	@ (80012a8 <ILI9341_Write_Command+0x40>)
 8001284:	f001 fd94 	bl	8002db0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ffda 	bl	8001244 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001290:	2201      	movs	r2, #1
 8001292:	2110      	movs	r1, #16
 8001294:	4803      	ldr	r0, [pc, #12]	@ (80012a4 <ILI9341_Write_Command+0x3c>)
 8001296:	f001 fd8b 	bl	8002db0 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40020000 	.word	0x40020000
 80012a8:	40020800 	.word	0x40020800

080012ac <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80012b6:	2201      	movs	r2, #1
 80012b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012bc:	480a      	ldr	r0, [pc, #40]	@ (80012e8 <ILI9341_Write_Data+0x3c>)
 80012be:	f001 fd77 	bl	8002db0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2110      	movs	r1, #16
 80012c6:	4809      	ldr	r0, [pc, #36]	@ (80012ec <ILI9341_Write_Data+0x40>)
 80012c8:	f001 fd72 	bl	8002db0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ffb8 	bl	8001244 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80012d4:	2201      	movs	r2, #1
 80012d6:	2110      	movs	r1, #16
 80012d8:	4804      	ldr	r0, [pc, #16]	@ (80012ec <ILI9341_Write_Data+0x40>)
 80012da:	f001 fd69 	bl	8002db0 <HAL_GPIO_WritePin>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40020800 	.word	0x40020800
 80012ec:	40020000 	.word	0x40020000

080012f0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80012f0:	b590      	push	{r4, r7, lr}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4604      	mov	r4, r0
 80012f8:	4608      	mov	r0, r1
 80012fa:	4611      	mov	r1, r2
 80012fc:	461a      	mov	r2, r3
 80012fe:	4623      	mov	r3, r4
 8001300:	80fb      	strh	r3, [r7, #6]
 8001302:	4603      	mov	r3, r0
 8001304:	80bb      	strh	r3, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	807b      	strh	r3, [r7, #2]
 800130a:	4613      	mov	r3, r2
 800130c:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800130e:	202a      	movs	r0, #42	@ 0x2a
 8001310:	f7ff ffaa 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	0a1b      	lsrs	r3, r3, #8
 8001318:	b29b      	uxth	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ffc5 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	b2db      	uxtb	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ffc0 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	b29b      	uxth	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ffb9 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ffb4 	bl	80012ac <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001344:	202b      	movs	r0, #43	@ 0x2b
 8001346:	f7ff ff8f 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	b29b      	uxth	r3, r3
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ffaa 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ffa5 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001362:	883b      	ldrh	r3, [r7, #0]
 8001364:	0a1b      	lsrs	r3, r3, #8
 8001366:	b29b      	uxth	r3, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ff9e 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001370:	883b      	ldrh	r3, [r7, #0]
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff99 	bl	80012ac <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800137a:	202c      	movs	r0, #44	@ 0x2c
 800137c:	f7ff ff74 	bl	8001268 <ILI9341_Write_Command>
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}

08001388 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800138c:	2200      	movs	r2, #0
 800138e:	2180      	movs	r1, #128	@ 0x80
 8001390:	480a      	ldr	r0, [pc, #40]	@ (80013bc <ILI9341_Reset+0x34>)
 8001392:	f001 fd0d 	bl	8002db0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8001396:	20c8      	movs	r0, #200	@ 0xc8
 8001398:	f001 fa28 	bl	80027ec <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800139c:	2200      	movs	r2, #0
 800139e:	2110      	movs	r1, #16
 80013a0:	4807      	ldr	r0, [pc, #28]	@ (80013c0 <ILI9341_Reset+0x38>)
 80013a2:	f001 fd05 	bl	8002db0 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80013a6:	20c8      	movs	r0, #200	@ 0xc8
 80013a8:	f001 fa20 	bl	80027ec <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80013ac:	2201      	movs	r2, #1
 80013ae:	2180      	movs	r1, #128	@ 0x80
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <ILI9341_Reset+0x34>)
 80013b2:	f001 fcfd 	bl	8002db0 <HAL_GPIO_WritePin>
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40020800 	.word	0x40020800
 80013c0:	40020000 	.word	0x40020000

080013c4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80013d2:	2036      	movs	r0, #54	@ 0x36
 80013d4:	f7ff ff48 	bl	8001268 <ILI9341_Write_Command>
HAL_Delay(1);
 80013d8:	2001      	movs	r0, #1
 80013da:	f001 fa07 	bl	80027ec <HAL_Delay>
	
switch(screen_rotation) 
 80013de:	7bfb      	ldrb	r3, [r7, #15]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d837      	bhi.n	8001454 <ILI9341_Set_Rotation+0x90>
 80013e4:	a201      	add	r2, pc, #4	@ (adr r2, 80013ec <ILI9341_Set_Rotation+0x28>)
 80013e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ea:	bf00      	nop
 80013ec:	080013fd 	.word	0x080013fd
 80013f0:	08001413 	.word	0x08001413
 80013f4:	08001429 	.word	0x08001429
 80013f8:	0800143f 	.word	0x0800143f
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80013fc:	2048      	movs	r0, #72	@ 0x48
 80013fe:	f7ff ff55 	bl	80012ac <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001402:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <ILI9341_Set_Rotation+0x9c>)
 8001404:	22f0      	movs	r2, #240	@ 0xf0
 8001406:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001408:	4b16      	ldr	r3, [pc, #88]	@ (8001464 <ILI9341_Set_Rotation+0xa0>)
 800140a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800140e:	801a      	strh	r2, [r3, #0]
			break;
 8001410:	e021      	b.n	8001456 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001412:	2028      	movs	r0, #40	@ 0x28
 8001414:	f7ff ff4a 	bl	80012ac <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001418:	4b11      	ldr	r3, [pc, #68]	@ (8001460 <ILI9341_Set_Rotation+0x9c>)
 800141a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800141e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001420:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <ILI9341_Set_Rotation+0xa0>)
 8001422:	22f0      	movs	r2, #240	@ 0xf0
 8001424:	801a      	strh	r2, [r3, #0]
			break;
 8001426:	e016      	b.n	8001456 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001428:	2088      	movs	r0, #136	@ 0x88
 800142a:	f7ff ff3f 	bl	80012ac <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 800142e:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <ILI9341_Set_Rotation+0x9c>)
 8001430:	22f0      	movs	r2, #240	@ 0xf0
 8001432:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <ILI9341_Set_Rotation+0xa0>)
 8001436:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800143a:	801a      	strh	r2, [r3, #0]
			break;
 800143c:	e00b      	b.n	8001456 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 800143e:	20e8      	movs	r0, #232	@ 0xe8
 8001440:	f7ff ff34 	bl	80012ac <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <ILI9341_Set_Rotation+0x9c>)
 8001446:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800144a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <ILI9341_Set_Rotation+0xa0>)
 800144e:	22f0      	movs	r2, #240	@ 0xf0
 8001450:	801a      	strh	r2, [r3, #0]
			break;
 8001452:	e000      	b.n	8001456 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001454:	bf00      	nop
	}
}
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000002 	.word	0x20000002
 8001464:	20000000 	.word	0x20000000

08001468 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800146c:	2201      	movs	r2, #1
 800146e:	2180      	movs	r1, #128	@ 0x80
 8001470:	4802      	ldr	r0, [pc, #8]	@ (800147c <ILI9341_Enable+0x14>)
 8001472:	f001 fc9d 	bl	8002db0 <HAL_GPIO_WritePin>
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40020800 	.word	0x40020800

08001480 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(SPI_HandleTypeDef *spi_handle)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

ILI9341_Enable();
 8001488:	f7ff ffee 	bl	8001468 <ILI9341_Enable>
ILI9341_SPI_Init(spi_handle);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff fec5 	bl	800121c <ILI9341_SPI_Init>
ILI9341_Reset();
 8001492:	f7ff ff79 	bl	8001388 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff fee6 	bl	8001268 <ILI9341_Write_Command>
HAL_Delay(1000);
 800149c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80014a0:	f001 f9a4 	bl	80027ec <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80014a4:	20cb      	movs	r0, #203	@ 0xcb
 80014a6:	f7ff fedf 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80014aa:	2039      	movs	r0, #57	@ 0x39
 80014ac:	f7ff fefe 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 80014b0:	202c      	movs	r0, #44	@ 0x2c
 80014b2:	f7ff fefb 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fef8 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 80014bc:	2034      	movs	r0, #52	@ 0x34
 80014be:	f7ff fef5 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80014c2:	2002      	movs	r0, #2
 80014c4:	f7ff fef2 	bl	80012ac <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80014c8:	20cf      	movs	r0, #207	@ 0xcf
 80014ca:	f7ff fecd 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff feec 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80014d4:	20c1      	movs	r0, #193	@ 0xc1
 80014d6:	f7ff fee9 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80014da:	2030      	movs	r0, #48	@ 0x30
 80014dc:	f7ff fee6 	bl	80012ac <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80014e0:	20e8      	movs	r0, #232	@ 0xe8
 80014e2:	f7ff fec1 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80014e6:	2085      	movs	r0, #133	@ 0x85
 80014e8:	f7ff fee0 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f7ff fedd 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80014f2:	2078      	movs	r0, #120	@ 0x78
 80014f4:	f7ff feda 	bl	80012ac <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80014f8:	20ea      	movs	r0, #234	@ 0xea
 80014fa:	f7ff feb5 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80014fe:	2000      	movs	r0, #0
 8001500:	f7ff fed4 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fed1 	bl	80012ac <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800150a:	20ed      	movs	r0, #237	@ 0xed
 800150c:	f7ff feac 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8001510:	2064      	movs	r0, #100	@ 0x64
 8001512:	f7ff fecb 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8001516:	2003      	movs	r0, #3
 8001518:	f7ff fec8 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800151c:	2012      	movs	r0, #18
 800151e:	f7ff fec5 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8001522:	2081      	movs	r0, #129	@ 0x81
 8001524:	f7ff fec2 	bl	80012ac <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8001528:	20f7      	movs	r0, #247	@ 0xf7
 800152a:	f7ff fe9d 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 800152e:	2020      	movs	r0, #32
 8001530:	f7ff febc 	bl	80012ac <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8001534:	20c0      	movs	r0, #192	@ 0xc0
 8001536:	f7ff fe97 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800153a:	2023      	movs	r0, #35	@ 0x23
 800153c:	f7ff feb6 	bl	80012ac <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8001540:	20c1      	movs	r0, #193	@ 0xc1
 8001542:	f7ff fe91 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8001546:	2010      	movs	r0, #16
 8001548:	f7ff feb0 	bl	80012ac <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800154c:	20c5      	movs	r0, #197	@ 0xc5
 800154e:	f7ff fe8b 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8001552:	203e      	movs	r0, #62	@ 0x3e
 8001554:	f7ff feaa 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8001558:	2028      	movs	r0, #40	@ 0x28
 800155a:	f7ff fea7 	bl	80012ac <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 800155e:	20c7      	movs	r0, #199	@ 0xc7
 8001560:	f7ff fe82 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8001564:	2086      	movs	r0, #134	@ 0x86
 8001566:	f7ff fea1 	bl	80012ac <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800156a:	2036      	movs	r0, #54	@ 0x36
 800156c:	f7ff fe7c 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8001570:	2048      	movs	r0, #72	@ 0x48
 8001572:	f7ff fe9b 	bl	80012ac <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8001576:	203a      	movs	r0, #58	@ 0x3a
 8001578:	f7ff fe76 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800157c:	2055      	movs	r0, #85	@ 0x55
 800157e:	f7ff fe95 	bl	80012ac <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8001582:	20b1      	movs	r0, #177	@ 0xb1
 8001584:	f7ff fe70 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8001588:	2000      	movs	r0, #0
 800158a:	f7ff fe8f 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 800158e:	2018      	movs	r0, #24
 8001590:	f7ff fe8c 	bl	80012ac <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8001594:	20b6      	movs	r0, #182	@ 0xb6
 8001596:	f7ff fe67 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800159a:	2008      	movs	r0, #8
 800159c:	f7ff fe86 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80015a0:	2082      	movs	r0, #130	@ 0x82
 80015a2:	f7ff fe83 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80015a6:	2027      	movs	r0, #39	@ 0x27
 80015a8:	f7ff fe80 	bl	80012ac <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80015ac:	20f2      	movs	r0, #242	@ 0xf2
 80015ae:	f7ff fe5b 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80015b2:	2000      	movs	r0, #0
 80015b4:	f7ff fe7a 	bl	80012ac <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 80015b8:	2026      	movs	r0, #38	@ 0x26
 80015ba:	f7ff fe55 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff fe74 	bl	80012ac <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80015c4:	20e0      	movs	r0, #224	@ 0xe0
 80015c6:	f7ff fe4f 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80015ca:	200f      	movs	r0, #15
 80015cc:	f7ff fe6e 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80015d0:	2031      	movs	r0, #49	@ 0x31
 80015d2:	f7ff fe6b 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80015d6:	202b      	movs	r0, #43	@ 0x2b
 80015d8:	f7ff fe68 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80015dc:	200c      	movs	r0, #12
 80015de:	f7ff fe65 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80015e2:	200e      	movs	r0, #14
 80015e4:	f7ff fe62 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80015e8:	2008      	movs	r0, #8
 80015ea:	f7ff fe5f 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80015ee:	204e      	movs	r0, #78	@ 0x4e
 80015f0:	f7ff fe5c 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80015f4:	20f1      	movs	r0, #241	@ 0xf1
 80015f6:	f7ff fe59 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80015fa:	2037      	movs	r0, #55	@ 0x37
 80015fc:	f7ff fe56 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001600:	2007      	movs	r0, #7
 8001602:	f7ff fe53 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8001606:	2010      	movs	r0, #16
 8001608:	f7ff fe50 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800160c:	2003      	movs	r0, #3
 800160e:	f7ff fe4d 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001612:	200e      	movs	r0, #14
 8001614:	f7ff fe4a 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8001618:	2009      	movs	r0, #9
 800161a:	f7ff fe47 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fe44 	bl	80012ac <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8001624:	20e1      	movs	r0, #225	@ 0xe1
 8001626:	f7ff fe1f 	bl	8001268 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fe3e 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8001630:	200e      	movs	r0, #14
 8001632:	f7ff fe3b 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8001636:	2014      	movs	r0, #20
 8001638:	f7ff fe38 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800163c:	2003      	movs	r0, #3
 800163e:	f7ff fe35 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8001642:	2011      	movs	r0, #17
 8001644:	f7ff fe32 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8001648:	2007      	movs	r0, #7
 800164a:	f7ff fe2f 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800164e:	2031      	movs	r0, #49	@ 0x31
 8001650:	f7ff fe2c 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8001654:	20c1      	movs	r0, #193	@ 0xc1
 8001656:	f7ff fe29 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800165a:	2048      	movs	r0, #72	@ 0x48
 800165c:	f7ff fe26 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8001660:	2008      	movs	r0, #8
 8001662:	f7ff fe23 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8001666:	200f      	movs	r0, #15
 8001668:	f7ff fe20 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800166c:	200c      	movs	r0, #12
 800166e:	f7ff fe1d 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8001672:	2031      	movs	r0, #49	@ 0x31
 8001674:	f7ff fe1a 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8001678:	2036      	movs	r0, #54	@ 0x36
 800167a:	f7ff fe17 	bl	80012ac <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 800167e:	200f      	movs	r0, #15
 8001680:	f7ff fe14 	bl	80012ac <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8001684:	2011      	movs	r0, #17
 8001686:	f7ff fdef 	bl	8001268 <ILI9341_Write_Command>
HAL_Delay(120);
 800168a:	2078      	movs	r0, #120	@ 0x78
 800168c:	f001 f8ae 	bl	80027ec <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8001690:	2029      	movs	r0, #41	@ 0x29
 8001692:	f7ff fde9 	bl	8001268 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8001696:	2003      	movs	r0, #3
 8001698:	f7ff fe94 	bl	80013c4 <ILI9341_Set_Rotation>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80016a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016a8:	b08d      	sub	sp, #52	@ 0x34
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	4603      	mov	r3, r0
 80016ae:	6039      	str	r1, [r7, #0]
 80016b0:	80fb      	strh	r3, [r7, #6]
 80016b2:	466b      	mov	r3, sp
 80016b4:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016c2:	d202      	bcs.n	80016ca <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016c8:	e002      	b.n	80016d0 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80016ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80016ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016d6:	4840      	ldr	r0, [pc, #256]	@ (80017d8 <ILI9341_Draw_Colour_Burst+0x134>)
 80016d8:	f001 fb6a 	bl	8002db0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	2110      	movs	r1, #16
 80016e0:	483e      	ldr	r0, [pc, #248]	@ (80017dc <ILI9341_Draw_Colour_Burst+0x138>)
 80016e2:	f001 fb65 	bl	8002db0 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 80016f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80016f2:	460b      	mov	r3, r1
 80016f4:	3b01      	subs	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
 80016f8:	2300      	movs	r3, #0
 80016fa:	4688      	mov	r8, r1
 80016fc:	4699      	mov	r9, r3
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800170a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800170e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001712:	2300      	movs	r3, #0
 8001714:	460c      	mov	r4, r1
 8001716:	461d      	mov	r5, r3
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	00eb      	lsls	r3, r5, #3
 8001722:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001726:	00e2      	lsls	r2, r4, #3
 8001728:	1dcb      	adds	r3, r1, #7
 800172a:	08db      	lsrs	r3, r3, #3
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	ebad 0d03 	sub.w	sp, sp, r3
 8001732:	466b      	mov	r3, sp
 8001734:	3300      	adds	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800173c:	e00e      	b.n	800175c <ILI9341_Draw_Colour_Burst+0xb8>
	{
		burst_buffer[j] = 	chifted;
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001742:	4413      	add	r3, r2
 8001744:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001748:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800174a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800174c:	3301      	adds	r3, #1
 800174e:	88fa      	ldrh	r2, [r7, #6]
 8001750:	b2d1      	uxtb	r1, r2
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001758:	3302      	adds	r3, #2
 800175a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800175c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800175e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001760:	429a      	cmp	r2, r3
 8001762:	d3ec      	bcc.n	800173e <ILI9341_Draw_Colour_Burst+0x9a>
	}

uint32_t Sending_Size = Size*2;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001772:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001778:	fbb3 f2f2 	udiv	r2, r3, r2
 800177c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800177e:	fb01 f202 	mul.w	r2, r1, r2
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d011      	beq.n	80017b0 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001790:	e00a      	b.n	80017a8 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(ili9341_spi, (unsigned char *)burst_buffer, Buffer_Size, 10);
 8001792:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <ILI9341_Draw_Colour_Burst+0x13c>)
 8001794:	6818      	ldr	r0, [r3, #0]
 8001796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001798:	b29a      	uxth	r2, r3
 800179a:	230a      	movs	r3, #10
 800179c:	69b9      	ldr	r1, [r7, #24]
 800179e:	f002 f9c4 	bl	8003b2a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	3301      	adds	r3, #1
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d3f0      	bcc.n	8001792 <ILI9341_Draw_Colour_Burst+0xee>
		}
}

//REMAINDER!
HAL_SPI_Transmit(ili9341_spi, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <ILI9341_Draw_Colour_Burst+0x13c>)
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	230a      	movs	r3, #10
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	f002 f9b5 	bl	8003b2a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80017c0:	2201      	movs	r2, #1
 80017c2:	2110      	movs	r1, #16
 80017c4:	4805      	ldr	r0, [pc, #20]	@ (80017dc <ILI9341_Draw_Colour_Burst+0x138>)
 80017c6:	f001 faf3 	bl	8002db0 <HAL_GPIO_WritePin>
 80017ca:	46b5      	mov	sp, r6
}
 80017cc:	bf00      	nop
 80017ce:	3734      	adds	r7, #52	@ 0x34
 80017d0:	46bd      	mov	sp, r7
 80017d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017d6:	bf00      	nop
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	200000b0 	.word	0x200000b0

080017e4 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80017ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <ILI9341_Fill_Screen+0x44>)
 80017f0:	881b      	ldrh	r3, [r3, #0]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b0d      	ldr	r3, [pc, #52]	@ (800182c <ILI9341_Fill_Screen+0x48>)
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	2100      	movs	r1, #0
 80017fc:	2000      	movs	r0, #0
 80017fe:	f7ff fd77 	bl	80012f0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <ILI9341_Fill_Screen+0x44>)
 8001804:	881b      	ldrh	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	4b08      	ldr	r3, [pc, #32]	@ (800182c <ILI9341_Fill_Screen+0x48>)
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	b29b      	uxth	r3, r3
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	461a      	mov	r2, r3
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff42 	bl	80016a4 <ILI9341_Draw_Colour_Burst>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000002 	.word	0x20000002
 800182c:	20000000 	.word	0x20000000

08001830 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b086      	sub	sp, #24
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	80fb      	strh	r3, [r7, #6]
 800183a:	460b      	mov	r3, r1
 800183c:	80bb      	strh	r3, [r7, #4]
 800183e:	4613      	mov	r3, r2
 8001840:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001842:	4b60      	ldr	r3, [pc, #384]	@ (80019c4 <ILI9341_Draw_Pixel+0x194>)
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	b29b      	uxth	r3, r3
 8001848:	88fa      	ldrh	r2, [r7, #6]
 800184a:	429a      	cmp	r2, r3
 800184c:	f080 80b5 	bcs.w	80019ba <ILI9341_Draw_Pixel+0x18a>
 8001850:	4b5d      	ldr	r3, [pc, #372]	@ (80019c8 <ILI9341_Draw_Pixel+0x198>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	88ba      	ldrh	r2, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	f080 80ae 	bcs.w	80019ba <ILI9341_Draw_Pixel+0x18a>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001864:	4859      	ldr	r0, [pc, #356]	@ (80019cc <ILI9341_Draw_Pixel+0x19c>)
 8001866:	f001 faa3 	bl	8002db0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2110      	movs	r1, #16
 800186e:	4858      	ldr	r0, [pc, #352]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 8001870:	f001 fa9e 	bl	8002db0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001874:	202a      	movs	r0, #42	@ 0x2a
 8001876:	f7ff fce5 	bl	8001244 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800187a:	2201      	movs	r2, #1
 800187c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001880:	4852      	ldr	r0, [pc, #328]	@ (80019cc <ILI9341_Draw_Pixel+0x19c>)
 8001882:	f001 fa95 	bl	8002db0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001886:	2201      	movs	r2, #1
 8001888:	2110      	movs	r1, #16
 800188a:	4851      	ldr	r0, [pc, #324]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 800188c:	f001 fa90 	bl	8002db0 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001890:	2200      	movs	r2, #0
 8001892:	2110      	movs	r1, #16
 8001894:	484e      	ldr	r0, [pc, #312]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 8001896:	f001 fa8b 	bl	8002db0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	753b      	strb	r3, [r7, #20]
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	757b      	strb	r3, [r7, #21]
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	3301      	adds	r3, #1
 80018ae:	121b      	asrs	r3, r3, #8
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	75bb      	strb	r3, [r7, #22]
 80018b4:	88fb      	ldrh	r3, [r7, #6]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	3301      	adds	r3, #1
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(ili9341_spi, Temp_Buffer, 4, 1);
 80018be:	4b45      	ldr	r3, [pc, #276]	@ (80019d4 <ILI9341_Draw_Pixel+0x1a4>)
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	f107 0114 	add.w	r1, r7, #20
 80018c6:	2301      	movs	r3, #1
 80018c8:	2204      	movs	r2, #4
 80018ca:	f002 f92e 	bl	8003b2a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80018ce:	2201      	movs	r2, #1
 80018d0:	2110      	movs	r1, #16
 80018d2:	483f      	ldr	r0, [pc, #252]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 80018d4:	f001 fa6c 	bl	8002db0 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80018d8:	2200      	movs	r2, #0
 80018da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018de:	483b      	ldr	r0, [pc, #236]	@ (80019cc <ILI9341_Draw_Pixel+0x19c>)
 80018e0:	f001 fa66 	bl	8002db0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80018e4:	2200      	movs	r2, #0
 80018e6:	2110      	movs	r1, #16
 80018e8:	4839      	ldr	r0, [pc, #228]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 80018ea:	f001 fa61 	bl	8002db0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80018ee:	202b      	movs	r0, #43	@ 0x2b
 80018f0:	f7ff fca8 	bl	8001244 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80018f4:	2201      	movs	r2, #1
 80018f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018fa:	4834      	ldr	r0, [pc, #208]	@ (80019cc <ILI9341_Draw_Pixel+0x19c>)
 80018fc:	f001 fa58 	bl	8002db0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8001900:	2201      	movs	r2, #1
 8001902:	2110      	movs	r1, #16
 8001904:	4832      	ldr	r0, [pc, #200]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 8001906:	f001 fa53 	bl	8002db0 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2110      	movs	r1, #16
 800190e:	4830      	ldr	r0, [pc, #192]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 8001910:	f001 fa4e 	bl	8002db0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	b29b      	uxth	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	743b      	strb	r3, [r7, #16]
 800191e:	88bb      	ldrh	r3, [r7, #4]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	747b      	strb	r3, [r7, #17]
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	3301      	adds	r3, #1
 8001928:	121b      	asrs	r3, r3, #8
 800192a:	b2db      	uxtb	r3, r3
 800192c:	74bb      	strb	r3, [r7, #18]
 800192e:	88bb      	ldrh	r3, [r7, #4]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	3301      	adds	r3, #1
 8001934:	b2db      	uxtb	r3, r3
 8001936:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(ili9341_spi, Temp_Buffer1, 4, 1);
 8001938:	4b26      	ldr	r3, [pc, #152]	@ (80019d4 <ILI9341_Draw_Pixel+0x1a4>)
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	f107 0110 	add.w	r1, r7, #16
 8001940:	2301      	movs	r3, #1
 8001942:	2204      	movs	r2, #4
 8001944:	f002 f8f1 	bl	8003b2a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001948:	2201      	movs	r2, #1
 800194a:	2110      	movs	r1, #16
 800194c:	4820      	ldr	r0, [pc, #128]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 800194e:	f001 fa2f 	bl	8002db0 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001958:	481c      	ldr	r0, [pc, #112]	@ (80019cc <ILI9341_Draw_Pixel+0x19c>)
 800195a:	f001 fa29 	bl	8002db0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800195e:	2200      	movs	r2, #0
 8001960:	2110      	movs	r1, #16
 8001962:	481b      	ldr	r0, [pc, #108]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 8001964:	f001 fa24 	bl	8002db0 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8001968:	202c      	movs	r0, #44	@ 0x2c
 800196a:	f7ff fc6b 	bl	8001244 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800196e:	2201      	movs	r2, #1
 8001970:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001974:	4815      	ldr	r0, [pc, #84]	@ (80019cc <ILI9341_Draw_Pixel+0x19c>)
 8001976:	f001 fa1b 	bl	8002db0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800197a:	2201      	movs	r2, #1
 800197c:	2110      	movs	r1, #16
 800197e:	4814      	ldr	r0, [pc, #80]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 8001980:	f001 fa16 	bl	8002db0 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001984:	2200      	movs	r2, #0
 8001986:	2110      	movs	r1, #16
 8001988:	4811      	ldr	r0, [pc, #68]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 800198a:	f001 fa11 	bl	8002db0 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	b29b      	uxth	r3, r3
 8001994:	b2db      	uxtb	r3, r3
 8001996:	733b      	strb	r3, [r7, #12]
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(ili9341_spi, Temp_Buffer2, 2, 1);
 800199e:	4b0d      	ldr	r3, [pc, #52]	@ (80019d4 <ILI9341_Draw_Pixel+0x1a4>)
 80019a0:	6818      	ldr	r0, [r3, #0]
 80019a2:	f107 010c 	add.w	r1, r7, #12
 80019a6:	2301      	movs	r3, #1
 80019a8:	2202      	movs	r2, #2
 80019aa:	f002 f8be 	bl	8003b2a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80019ae:	2201      	movs	r2, #1
 80019b0:	2110      	movs	r1, #16
 80019b2:	4807      	ldr	r0, [pc, #28]	@ (80019d0 <ILI9341_Draw_Pixel+0x1a0>)
 80019b4:	f001 f9fc 	bl	8002db0 <HAL_GPIO_WritePin>
 80019b8:	e000      	b.n	80019bc <ILI9341_Draw_Pixel+0x18c>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80019ba:	bf00      	nop
	
}
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000002 	.word	0x20000002
 80019c8:	20000000 	.word	0x20000000
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	200000b0 	.word	0x200000b0

080019d8 <draw_line_to_object>:
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
ILI9341_Draw_Colour_Burst(Colour, Height);
}

void draw_line_to_object(uint16_t angle_deg, uint16_t distance_cm) {
 80019d8:	b5b0      	push	{r4, r5, r7, lr}
 80019da:	b088      	sub	sp, #32
 80019dc:	af02      	add	r7, sp, #8
 80019de:	4603      	mov	r3, r0
 80019e0:	460a      	mov	r2, r1
 80019e2:	80fb      	strh	r3, [r7, #6]
 80019e4:	4613      	mov	r3, r2
 80019e6:	80bb      	strh	r3, [r7, #4]
	if(distance_cm > MAX_DIST_CM) {
 80019e8:	88bb      	ldrh	r3, [r7, #4]
 80019ea:	2b64      	cmp	r3, #100	@ 0x64
 80019ec:	d901      	bls.n	80019f2 <draw_line_to_object+0x1a>
		distance_cm = MAX_DIST_CM;
 80019ee:	2364      	movs	r3, #100	@ 0x64
 80019f0:	80bb      	strh	r3, [r7, #4]
	}

	//convert polar to cartesian
	float angle_rad = angle_deg * (M_PI / 180.0);
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdb5 	bl	8000564 <__aeabi_i2d>
 80019fa:	a33c      	add	r3, pc, #240	@ (adr r3, 8001aec <draw_line_to_object+0x114>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fe1a 	bl	8000638 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f8d6 	bl	8000bbc <__aeabi_d2f>
 8001a10:	4603      	mov	r3, r0
 8001a12:	617b      	str	r3, [r7, #20]
	float scaled_dist = (distance_cm / MAX_DIST_CM) * MAX_RADIUS_PX;
 8001a14:	88bb      	ldrh	r3, [r7, #4]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fda4 	bl	8000564 <__aeabi_i2d>
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b31      	ldr	r3, [pc, #196]	@ (8001ae8 <draw_line_to_object+0x110>)
 8001a22:	f7fe ff33 	bl	800088c <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <draw_line_to_object+0x110>)
 8001a34:	f7fe fe00 	bl	8000638 <__aeabi_dmul>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f7ff f8bc 	bl	8000bbc <__aeabi_d2f>
 8001a44:	4603      	mov	r3, r0
 8001a46:	613b      	str	r3, [r7, #16]

	//calculate the endpoint

	int16_t x = CENTER_X + (int16_t)(scaled_dist * cos(angle_rad));
 8001a48:	6938      	ldr	r0, [r7, #16]
 8001a4a:	f7fe fd9d 	bl	8000588 <__aeabi_f2d>
 8001a4e:	4604      	mov	r4, r0
 8001a50:	460d      	mov	r5, r1
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7fe fd98 	bl	8000588 <__aeabi_f2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	ec43 2b10 	vmov	d0, r2, r3
 8001a60:	f004 fd7e 	bl	8006560 <cos>
 8001a64:	ec53 2b10 	vmov	r2, r3, d0
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fde4 	bl	8000638 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7ff f878 	bl	8000b6c <__aeabi_d2iz>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b21b      	sxth	r3, r3
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	33a0      	adds	r3, #160	@ 0xa0
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	81fb      	strh	r3, [r7, #14]
	int16_t y = CENTER_Y - (int16_t)(scaled_dist * sin(angle_rad));
 8001a88:	6938      	ldr	r0, [r7, #16]
 8001a8a:	f7fe fd7d 	bl	8000588 <__aeabi_f2d>
 8001a8e:	4604      	mov	r4, r0
 8001a90:	460d      	mov	r5, r1
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f7fe fd78 	bl	8000588 <__aeabi_f2d>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	ec43 2b10 	vmov	d0, r2, r3
 8001aa0:	f004 fdb2 	bl	8006608 <sin>
 8001aa4:	ec53 2b10 	vmov	r2, r3, d0
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f7fe fdc4 	bl	8000638 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7ff f858 	bl	8000b6c <__aeabi_d2iz>
 8001abc:	4603      	mov	r3, r0
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	81bb      	strh	r3, [r7, #12]

	ILI9341_DrawLine(CENTER_X, CENTER_Y, x, y, GREEN);
 8001aca:	89fa      	ldrh	r2, [r7, #14]
 8001acc:	89bb      	ldrh	r3, [r7, #12]
 8001ace:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
 8001ad2:	9100      	str	r1, [sp, #0]
 8001ad4:	21ef      	movs	r1, #239	@ 0xef
 8001ad6:	20a0      	movs	r0, #160	@ 0xa0
 8001ad8:	f000 f80c 	bl	8001af4 <ILI9341_DrawLine>

}
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	40590000 	.word	0x40590000
 8001aec:	a2529d39 	.word	0xa2529d39
 8001af0:	3f91df46 	.word	0x3f91df46

08001af4 <ILI9341_DrawLine>:


void ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b087      	sub	sp, #28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4604      	mov	r4, r0
 8001afc:	4608      	mov	r0, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4623      	mov	r3, r4
 8001b04:	80fb      	strh	r3, [r7, #6]
 8001b06:	4603      	mov	r3, r0
 8001b08:	80bb      	strh	r3, [r7, #4]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	807b      	strh	r3, [r7, #2]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	803b      	strh	r3, [r7, #0]
    int16_t dx = abs(x1 - x0), sx = x0 < x1 ? 1 : -1;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bfb8      	it	lt
 8001b1c:	425b      	neglt	r3, r3
 8001b1e:	82bb      	strh	r3, [r7, #20]
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d201      	bcs.n	8001b2c <ILI9341_DrawLine+0x38>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e001      	b.n	8001b30 <ILI9341_DrawLine+0x3c>
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	827b      	strh	r3, [r7, #18]
    int16_t dy = -abs(y1 - y0), sy = y0 < y1 ? 1 : -1;
 8001b32:	883a      	ldrh	r2, [r7, #0]
 8001b34:	88bb      	ldrh	r3, [r7, #4]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bfb8      	it	lt
 8001b3c:	425b      	neglt	r3, r3
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	425b      	negs	r3, r3
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	823b      	strh	r3, [r7, #16]
 8001b46:	88ba      	ldrh	r2, [r7, #4]
 8001b48:	883b      	ldrh	r3, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d201      	bcs.n	8001b52 <ILI9341_DrawLine+0x5e>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e001      	b.n	8001b56 <ILI9341_DrawLine+0x62>
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	81fb      	strh	r3, [r7, #14]
    int16_t err = dx + dy, e2;
 8001b58:	8aba      	ldrh	r2, [r7, #20]
 8001b5a:	8a3b      	ldrh	r3, [r7, #16]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	82fb      	strh	r3, [r7, #22]

    while (1)
    {
        ILI9341_Draw_Pixel(x0, y0, color); // plot the pixel
 8001b62:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001b64:	88b9      	ldrh	r1, [r7, #4]
 8001b66:	88fb      	ldrh	r3, [r7, #6]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fe61 	bl	8001830 <ILI9341_Draw_Pixel>
        if (x0 == x1 && y0 == y1) break;
 8001b6e:	88fa      	ldrh	r2, [r7, #6]
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d103      	bne.n	8001b7e <ILI9341_DrawLine+0x8a>
 8001b76:	88ba      	ldrh	r2, [r7, #4]
 8001b78:	883b      	ldrh	r3, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d022      	beq.n	8001bc4 <ILI9341_DrawLine+0xd0>
        e2 = 2 * err;
 8001b7e:	8afb      	ldrh	r3, [r7, #22]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	81bb      	strh	r3, [r7, #12]
        if (e2 >= dy) { err += dy; x0 += sx; }
 8001b86:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b8a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	db08      	blt.n	8001ba4 <ILI9341_DrawLine+0xb0>
 8001b92:	8afa      	ldrh	r2, [r7, #22]
 8001b94:	8a3b      	ldrh	r3, [r7, #16]
 8001b96:	4413      	add	r3, r2
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	82fb      	strh	r3, [r7, #22]
 8001b9c:	8a7a      	ldrh	r2, [r7, #18]
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	80fb      	strh	r3, [r7, #6]
        if (e2 <= dx) { err += dx; y0 += sy; }
 8001ba4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001ba8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dcd8      	bgt.n	8001b62 <ILI9341_DrawLine+0x6e>
 8001bb0:	8afa      	ldrh	r2, [r7, #22]
 8001bb2:	8abb      	ldrh	r3, [r7, #20]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	82fb      	strh	r3, [r7, #22]
 8001bba:	89fa      	ldrh	r2, [r7, #14]
 8001bbc:	88bb      	ldrh	r3, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	80bb      	strh	r3, [r7, #4]
        ILI9341_Draw_Pixel(x0, y0, color); // plot the pixel
 8001bc2:	e7ce      	b.n	8001b62 <ILI9341_DrawLine+0x6e>
        if (x0 == x1 && y0 == y1) break;
 8001bc4:	bf00      	nop
    }
}
 8001bc6:	bf00      	nop
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}
	...

08001bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b08e      	sub	sp, #56	@ 0x38
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	const char connection_msg[] = "UART to PC success \n";
 8001bd6:	4b50      	ldr	r3, [pc, #320]	@ (8001d18 <main+0x148>)
 8001bd8:	f107 0418 	add.w	r4, r7, #24
 8001bdc:	461d      	mov	r5, r3
 8001bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001be6:	6020      	str	r0, [r4, #0]
 8001be8:	3404      	adds	r4, #4
 8001bea:	7021      	strb	r1, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bec:	f000 fd8c 	bl	8002708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bf0:	f000 f8a4 	bl	8001d3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf4:	f000 fa58 	bl	80020a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bf8:	f000 fa2c 	bl	8002054 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001bfc:	f000 f9b4 	bl	8001f68 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001c00:	f000 f93e 	bl	8001e80 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001c04:	f000 f906 	bl	8001e14 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2,(const uint8_t*) connection_msg , strlen(connection_msg), TIMEOUT);
 8001c08:	f107 0118 	add.w	r1, r7, #24
 8001c0c:	230f      	movs	r3, #15
 8001c0e:	2214      	movs	r2, #20
 8001c10:	4842      	ldr	r0, [pc, #264]	@ (8001d1c <main+0x14c>)
 8001c12:	f003 fc47 	bl	80054a4 <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001c16:	2100      	movs	r1, #0
 8001c18:	4841      	ldr	r0, [pc, #260]	@ (8001d20 <main+0x150>)
 8001c1a:	f002 fab9 	bl	8004190 <HAL_TIM_PWM_Start>
  HCR04_init(&htim1);
 8001c1e:	4841      	ldr	r0, [pc, #260]	@ (8001d24 <main+0x154>)
 8001c20:	f7ff fa72 	bl	8001108 <HCR04_init>
  ILI9341_Init(&hspi1);
 8001c24:	4840      	ldr	r0, [pc, #256]	@ (8001d28 <main+0x158>)
 8001c26:	f7ff fc2b 	bl	8001480 <ILI9341_Init>

  ILI9341_Fill_Screen(RED);
 8001c2a:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001c2e:	f7ff fdd9 	bl	80017e4 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 8001c32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c36:	f000 fdd9 	bl	80027ec <HAL_Delay>

  ILI9341_Fill_Screen(GREEN);
 8001c3a:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001c3e:	f7ff fdd1 	bl	80017e4 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 8001c42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c46:	f000 fdd1 	bl	80027ec <HAL_Delay>

  ILI9341_Fill_Screen(BLUE);
 8001c4a:	201f      	movs	r0, #31
 8001c4c:	f7ff fdca 	bl	80017e4 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 8001c50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c54:	f000 fdca 	bl	80027ec <HAL_Delay>

  ILI9341_Fill_Screen(BLACK);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff fdc3 	bl	80017e4 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 8001c5e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c62:	f000 fdc3 	bl	80027ec <HAL_Delay>

  // Draw a single WHITE pixel at (10, 10)
  ILI9341_Draw_Pixel(10, 10, 0xFFFF);
 8001c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c6a:	210a      	movs	r1, #10
 8001c6c:	200a      	movs	r0, #10
 8001c6e:	f7ff fddf 	bl	8001830 <ILI9341_Draw_Pixel>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(button_state == 0) {
 8001c72:	4b2e      	ldr	r3, [pc, #184]	@ (8001d2c <main+0x15c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1fb      	bne.n	8001c72 <main+0xa2>
		  set_servo_angle(&htim2, TIM_CHANNEL_1, current_angle);
 8001c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <main+0x160>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	2100      	movs	r1, #0
 8001c84:	4826      	ldr	r0, [pc, #152]	@ (8001d20 <main+0x150>)
 8001c86:	f000 fafd 	bl	8002284 <set_servo_angle>

		  uint16_t distance = HCSR04_read(&htim1);
 8001c8a:	4826      	ldr	r0, [pc, #152]	@ (8001d24 <main+0x154>)
 8001c8c:	f7ff fa50 	bl	8001130 <HCSR04_read>
 8001c90:	4603      	mov	r3, r0
 8001c92:	86fb      	strh	r3, [r7, #54]	@ 0x36
		  uint32_t filtered = median_filter(distance);
 8001c94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff f9f0 	bl	800107c <median_filter>
 8001c9c:	6338      	str	r0, [r7, #48]	@ 0x30
		  sprintf(transmit_distance_msg, "Dist: %lu cm \r\n", filtered);
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ca2:	4924      	ldr	r1, [pc, #144]	@ (8001d34 <main+0x164>)
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 ffb9 	bl	8005c1c <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)transmit_distance_msg, strlen(transmit_distance_msg), TIMEOUT);
 8001caa:	463b      	mov	r3, r7
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe faaf 	bl	8000210 <strlen>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	4639      	mov	r1, r7
 8001cb8:	230f      	movs	r3, #15
 8001cba:	4818      	ldr	r0, [pc, #96]	@ (8001d1c <main+0x14c>)
 8001cbc:	f003 fbf2 	bl	80054a4 <HAL_UART_Transmit>
		  HAL_Delay(10);
 8001cc0:	200a      	movs	r0, #10
 8001cc2:	f000 fd93 	bl	80027ec <HAL_Delay>
		  draw_line_to_object(current_angle, filtered);
 8001cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <main+0x160>)
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ccc:	b292      	uxth	r2, r2
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fe81 	bl	80019d8 <draw_line_to_object>

		  current_angle += direction;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	@ (8001d38 <main+0x168>)
 8001cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	4b14      	ldr	r3, [pc, #80]	@ (8001d30 <main+0x160>)
 8001ce0:	881b      	ldrh	r3, [r3, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <main+0x160>)
 8001ce8:	801a      	strh	r2, [r3, #0]

		  //change direction at boundaries
		  if(current_angle >= 180) {
 8001cea:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <main+0x160>)
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	2bb3      	cmp	r3, #179	@ 0xb3
 8001cf0:	d906      	bls.n	8001d00 <main+0x130>
			  direction = -1; //start going backward
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <main+0x168>)
 8001cf4:	22ff      	movs	r2, #255	@ 0xff
 8001cf6:	701a      	strb	r2, [r3, #0]
			  ILI9341_Fill_Screen(BLACK);
 8001cf8:	2000      	movs	r0, #0
 8001cfa:	f7ff fd73 	bl	80017e4 <ILI9341_Fill_Screen>
 8001cfe:	e7b8      	b.n	8001c72 <main+0xa2>
		  } else if(current_angle <= 0) {
 8001d00:	4b0b      	ldr	r3, [pc, #44]	@ (8001d30 <main+0x160>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1b4      	bne.n	8001c72 <main+0xa2>
			  direction = 1; //start going forward
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <main+0x168>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	701a      	strb	r2, [r3, #0]
			  ILI9341_Fill_Screen(BLACK);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7ff fd68 	bl	80017e4 <ILI9341_Fill_Screen>
	  if(button_state == 0) {
 8001d14:	e7ad      	b.n	8001c72 <main+0xa2>
 8001d16:	bf00      	nop
 8001d18:	08007678 	.word	0x08007678
 8001d1c:	2000019c 	.word	0x2000019c
 8001d20:	20000154 	.word	0x20000154
 8001d24:	2000010c 	.word	0x2000010c
 8001d28:	200000b4 	.word	0x200000b4
 8001d2c:	200001e4 	.word	0x200001e4
 8001d30:	200001e8 	.word	0x200001e8
 8001d34:	08007668 	.word	0x08007668
 8001d38:	20000004 	.word	0x20000004

08001d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b094      	sub	sp, #80	@ 0x50
 8001d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	2234      	movs	r2, #52	@ 0x34
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 ff88 	bl	8005c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d60:	2300      	movs	r3, #0
 8001d62:	607b      	str	r3, [r7, #4]
 8001d64:	4b29      	ldr	r3, [pc, #164]	@ (8001e0c <SystemClock_Config+0xd0>)
 8001d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d68:	4a28      	ldr	r2, [pc, #160]	@ (8001e0c <SystemClock_Config+0xd0>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d70:	4b26      	ldr	r3, [pc, #152]	@ (8001e0c <SystemClock_Config+0xd0>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	4b23      	ldr	r3, [pc, #140]	@ (8001e10 <SystemClock_Config+0xd4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d88:	4a21      	ldr	r2, [pc, #132]	@ (8001e10 <SystemClock_Config+0xd4>)
 8001d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	4b1f      	ldr	r3, [pc, #124]	@ (8001e10 <SystemClock_Config+0xd4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d98:	603b      	str	r3, [r7, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da0:	2301      	movs	r3, #1
 8001da2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da4:	2310      	movs	r3, #16
 8001da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da8:	2302      	movs	r3, #2
 8001daa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001db0:	2308      	movs	r3, #8
 8001db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001db4:	2354      	movs	r3, #84	@ 0x54
 8001db6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001db8:	2302      	movs	r3, #2
 8001dba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc4:	f107 031c 	add.w	r3, r7, #28
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f001 fb87 	bl	80034dc <HAL_RCC_OscConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001dd4:	f000 fa50 	bl	8002278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dd8:	230f      	movs	r3, #15
 8001dda:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001de4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	2102      	movs	r1, #2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f001 f827 	bl	8002e48 <HAL_RCC_ClockConfig>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001e00:	f000 fa3a 	bl	8002278 <Error_Handler>
  }
}
 8001e04:	bf00      	nop
 8001e06:	3750      	adds	r7, #80	@ 0x50
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40007000 	.word	0x40007000

08001e14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e18:	4b17      	ldr	r3, [pc, #92]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e1a:	4a18      	ldr	r2, [pc, #96]	@ (8001e7c <MX_SPI1_Init+0x68>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e1e:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e26:	4b14      	ldr	r3, [pc, #80]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e32:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e52:	4b09      	ldr	r3, [pc, #36]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e58:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e5e:	4b06      	ldr	r3, [pc, #24]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e60:	220a      	movs	r2, #10
 8001e62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e64:	4804      	ldr	r0, [pc, #16]	@ (8001e78 <MX_SPI1_Init+0x64>)
 8001e66:	f001 fdd7 	bl	8003a18 <HAL_SPI_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e70:	f000 fa02 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	200000b4 	.word	0x200000b4
 8001e7c:	40013000 	.word	0x40013000

08001e80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e86:	f107 0318 	add.w	r3, r7, #24
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e94:	f107 0310 	add.w	r3, r7, #16
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e9e:	463b      	mov	r3, r7
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001eac:	4a2d      	ldr	r2, [pc, #180]	@ (8001f64 <MX_TIM1_Init+0xe4>)
 8001eae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001eb2:	2253      	movs	r2, #83	@ 0x53
 8001eb4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001ebc:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001ebe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001ec2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eca:	4b25      	ldr	r3, [pc, #148]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ed0:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ed6:	4822      	ldr	r0, [pc, #136]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001ed8:	f002 f848 	bl	8003f6c <HAL_TIM_Base_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001ee2:	f000 f9c9 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eea:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001eec:	f107 0318 	add.w	r3, r7, #24
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	481b      	ldr	r0, [pc, #108]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001ef4:	f002 fcbc 	bl	8004870 <HAL_TIM_ConfigClockSource>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001efe:	f000 f9bb 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f02:	4817      	ldr	r0, [pc, #92]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001f04:	f002 fa0c 	bl	8004320 <HAL_TIM_IC_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001f0e:	f000 f9b3 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f1a:	f107 0310 	add.w	r3, r7, #16
 8001f1e:	4619      	mov	r1, r3
 8001f20:	480f      	ldr	r0, [pc, #60]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001f22:	f003 f9df 	bl	80052e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001f2c:	f000 f9a4 	bl	8002278 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001f30:	2300      	movs	r3, #0
 8001f32:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001f34:	2301      	movs	r3, #1
 8001f36:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001f40:	463b      	mov	r3, r7
 8001f42:	2200      	movs	r2, #0
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	@ (8001f60 <MX_TIM1_Init+0xe0>)
 8001f48:	f002 fb33 	bl	80045b2 <HAL_TIM_IC_ConfigChannel>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001f52:	f000 f991 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	3728      	adds	r7, #40	@ 0x28
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	2000010c 	.word	0x2000010c
 8001f64:	40010000 	.word	0x40010000

08001f68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08e      	sub	sp, #56	@ 0x38
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7c:	f107 0320 	add.w	r3, r7, #32
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
 8001f94:	615a      	str	r2, [r3, #20]
 8001f96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <MX_TIM2_Init+0xe8>)
 8001f9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8001fa0:	4b2b      	ldr	r3, [pc, #172]	@ (8002050 <MX_TIM2_Init+0xe8>)
 8001fa2:	22c7      	movs	r2, #199	@ 0xc7
 8001fa4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <MX_TIM2_Init+0xe8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8001fac:	4b28      	ldr	r3, [pc, #160]	@ (8002050 <MX_TIM2_Init+0xe8>)
 8001fae:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001fb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb4:	4b26      	ldr	r3, [pc, #152]	@ (8002050 <MX_TIM2_Init+0xe8>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fba:	4b25      	ldr	r3, [pc, #148]	@ (8002050 <MX_TIM2_Init+0xe8>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fc0:	4823      	ldr	r0, [pc, #140]	@ (8002050 <MX_TIM2_Init+0xe8>)
 8001fc2:	f001 ffd3 	bl	8003f6c <HAL_TIM_Base_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001fcc:	f000 f954 	bl	8002278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fda:	4619      	mov	r1, r3
 8001fdc:	481c      	ldr	r0, [pc, #112]	@ (8002050 <MX_TIM2_Init+0xe8>)
 8001fde:	f002 fc47 	bl	8004870 <HAL_TIM_ConfigClockSource>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001fe8:	f000 f946 	bl	8002278 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fec:	4818      	ldr	r0, [pc, #96]	@ (8002050 <MX_TIM2_Init+0xe8>)
 8001fee:	f002 f875 	bl	80040dc <HAL_TIM_PWM_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001ff8:	f000 f93e 	bl	8002278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002004:	f107 0320 	add.w	r3, r7, #32
 8002008:	4619      	mov	r1, r3
 800200a:	4811      	ldr	r0, [pc, #68]	@ (8002050 <MX_TIM2_Init+0xe8>)
 800200c:	f003 f96a 	bl	80052e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002016:	f000 f92f 	bl	8002278 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201a:	2360      	movs	r3, #96	@ 0x60
 800201c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2200      	movs	r2, #0
 800202e:	4619      	mov	r1, r3
 8002030:	4807      	ldr	r0, [pc, #28]	@ (8002050 <MX_TIM2_Init+0xe8>)
 8002032:	f002 fb5b 	bl	80046ec <HAL_TIM_PWM_ConfigChannel>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800203c:	f000 f91c 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002040:	4803      	ldr	r0, [pc, #12]	@ (8002050 <MX_TIM2_Init+0xe8>)
 8002042:	f000 fa2d 	bl	80024a0 <HAL_TIM_MspPostInit>

}
 8002046:	bf00      	nop
 8002048:	3738      	adds	r7, #56	@ 0x38
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000154 	.word	0x20000154

08002054 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <MX_USART2_UART_Init+0x4c>)
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <MX_USART2_UART_Init+0x50>)
 800205c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <MX_USART2_UART_Init+0x4c>)
 8002060:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002064:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <MX_USART2_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <MX_USART2_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002072:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <MX_USART2_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <MX_USART2_UART_Init+0x4c>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <MX_USART2_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <MX_USART2_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800208a:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <MX_USART2_UART_Init+0x4c>)
 800208c:	f003 f9ba 	bl	8005404 <HAL_UART_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002096:	f000 f8ef 	bl	8002278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000019c 	.word	0x2000019c
 80020a4:	40004400 	.word	0x40004400

080020a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	@ 0x28
 80020ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ae:	f107 0314 	add.w	r3, r7, #20
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b4f      	ldr	r3, [pc, #316]	@ (8002200 <MX_GPIO_Init+0x158>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	4a4e      	ldr	r2, [pc, #312]	@ (8002200 <MX_GPIO_Init+0x158>)
 80020c8:	f043 0304 	orr.w	r3, r3, #4
 80020cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002200 <MX_GPIO_Init+0x158>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b48      	ldr	r3, [pc, #288]	@ (8002200 <MX_GPIO_Init+0x158>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	4a47      	ldr	r2, [pc, #284]	@ (8002200 <MX_GPIO_Init+0x158>)
 80020e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ea:	4b45      	ldr	r3, [pc, #276]	@ (8002200 <MX_GPIO_Init+0x158>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b41      	ldr	r3, [pc, #260]	@ (8002200 <MX_GPIO_Init+0x158>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a40      	ldr	r2, [pc, #256]	@ (8002200 <MX_GPIO_Init+0x158>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b3e      	ldr	r3, [pc, #248]	@ (8002200 <MX_GPIO_Init+0x158>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	4b3a      	ldr	r3, [pc, #232]	@ (8002200 <MX_GPIO_Init+0x158>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a39      	ldr	r2, [pc, #228]	@ (8002200 <MX_GPIO_Init+0x158>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b37      	ldr	r3, [pc, #220]	@ (8002200 <MX_GPIO_Init+0x158>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	607b      	str	r3, [r7, #4]
 800212c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800212e:	2201      	movs	r2, #1
 8002130:	2110      	movs	r1, #16
 8002132:	4834      	ldr	r0, [pc, #208]	@ (8002204 <MX_GPIO_Init+0x15c>)
 8002134:	f000 fe3c 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_RESET_Pin|SPI1_DC_Pin, GPIO_PIN_RESET);
 8002138:	2200      	movs	r2, #0
 800213a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 800213e:	4832      	ldr	r0, [pc, #200]	@ (8002208 <MX_GPIO_Init+0x160>)
 8002140:	f000 fe36 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002144:	2200      	movs	r2, #0
 8002146:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800214a:	482e      	ldr	r0, [pc, #184]	@ (8002204 <MX_GPIO_Init+0x15c>)
 800214c:	f000 fe30 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002156:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800215a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	4828      	ldr	r0, [pc, #160]	@ (8002208 <MX_GPIO_Init+0x160>)
 8002168:	f000 fc76 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800216c:	2310      	movs	r3, #16
 800216e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002170:	2301      	movs	r3, #1
 8002172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	4619      	mov	r1, r3
 8002182:	4820      	ldr	r0, [pc, #128]	@ (8002204 <MX_GPIO_Init+0x15c>)
 8002184:	f000 fc68 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RESET_Pin SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_RESET_Pin|SPI1_DC_Pin;
 8002188:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800218c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218e:	2301      	movs	r3, #1
 8002190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002196:	2303      	movs	r3, #3
 8002198:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	4619      	mov	r1, r3
 80021a0:	4819      	ldr	r0, [pc, #100]	@ (8002208 <MX_GPIO_Init+0x160>)
 80021a2:	f000 fc59 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80021a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ac:	2300      	movs	r3, #0
 80021ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	4812      	ldr	r0, [pc, #72]	@ (8002204 <MX_GPIO_Init+0x15c>)
 80021bc:	f000 fc4c 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c6:	2301      	movs	r3, #1
 80021c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2300      	movs	r3, #0
 80021cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	2300      	movs	r3, #0
 80021d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	480a      	ldr	r0, [pc, #40]	@ (8002204 <MX_GPIO_Init+0x15c>)
 80021da:	f000 fc3d 	bl	8002a58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2028      	movs	r0, #40	@ 0x28
 80021e4:	f000 fc01 	bl	80029ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021e8:	2028      	movs	r0, #40	@ 0x28
 80021ea:	f000 fc1a 	bl	8002a22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //start with LED on
 80021ee:	2201      	movs	r2, #1
 80021f0:	2120      	movs	r1, #32
 80021f2:	4804      	ldr	r0, [pc, #16]	@ (8002204 <MX_GPIO_Init+0x15c>)
 80021f4:	f000 fddc 	bl	8002db0 <HAL_GPIO_WritePin>

  /* USER CODE END MX_GPIO_Init_2 */
}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	@ 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	40020000 	.word	0x40020000
 8002208:	40020800 	.word	0x40020800

0800220c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) //blue pushbutton pin
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800221c:	d122      	bne.n	8002264 <HAL_GPIO_EXTI_Callback+0x58>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800221e:	2120      	movs	r1, #32
 8002220:	4812      	ldr	r0, [pc, #72]	@ (800226c <HAL_GPIO_EXTI_Callback+0x60>)
 8002222:	f000 fdde 	bl	8002de2 <HAL_GPIO_TogglePin>

		if(button_state == 0) {
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_GPIO_EXTI_Callback+0x64>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d109      	bne.n	8002242 <HAL_GPIO_EXTI_Callback+0x36>
			__HAL_RCC_TIM2_CLK_DISABLE(); // pause
 800222e:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <HAL_GPIO_EXTI_Callback+0x68>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	4a10      	ldr	r2, [pc, #64]	@ (8002274 <HAL_GPIO_EXTI_Callback+0x68>)
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	6413      	str	r3, [r2, #64]	@ 0x40
			button_state = 1;
 800223a:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <HAL_GPIO_EXTI_Callback+0x64>)
 800223c:	2201      	movs	r2, #1
 800223e:	601a      	str	r2, [r3, #0]
		} else {
			__HAL_RCC_TIM2_CLK_ENABLE();
			button_state = 0;
		}
	}
}
 8002240:	e010      	b.n	8002264 <HAL_GPIO_EXTI_Callback+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b0b      	ldr	r3, [pc, #44]	@ (8002274 <HAL_GPIO_EXTI_Callback+0x68>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	4a0a      	ldr	r2, [pc, #40]	@ (8002274 <HAL_GPIO_EXTI_Callback+0x68>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6413      	str	r3, [r2, #64]	@ 0x40
 8002252:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <HAL_GPIO_EXTI_Callback+0x68>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
			button_state = 0;
 800225e:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <HAL_GPIO_EXTI_Callback+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40020000 	.word	0x40020000
 8002270:	200001e4 	.word	0x200001e4
 8002274:	40023800 	.word	0x40023800

08002278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800227c:	b672      	cpsid	i
}
 800227e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <Error_Handler+0x8>

08002284 <set_servo_angle>:
 */
#include "stm32f4xx_hal.h"
#include "servo.h"

void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	4613      	mov	r3, r2
 8002290:	71fb      	strb	r3, [r7, #7]
	//map angle (0-180) to pulse width (210-1050 counts)
	uint32_t pulse_length = 250 + (angle * (1100 - 250) / 180);
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	f240 3252 	movw	r2, #850	@ 0x352
 8002298:	fb02 f303 	mul.w	r3, r2, r3
 800229c:	4a15      	ldr	r2, [pc, #84]	@ (80022f4 <set_servo_angle+0x70>)
 800229e:	fb82 1203 	smull	r1, r2, r2, r3
 80022a2:	441a      	add	r2, r3
 80022a4:	11d2      	asrs	r2, r2, #7
 80022a6:	17db      	asrs	r3, r3, #31
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	33fa      	adds	r3, #250	@ 0xfa
 80022ac:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d104      	bne.n	80022be <set_servo_angle+0x3a>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80022bc:	e013      	b.n	80022e6 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d104      	bne.n	80022ce <set_servo_angle+0x4a>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80022cc:	e00b      	b.n	80022e6 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d104      	bne.n	80022de <set_servo_angle+0x5a>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80022dc:	e003      	b.n	80022e6 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	b60b60b7 	.word	0xb60b60b7

080022f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	4b10      	ldr	r3, [pc, #64]	@ (8002344 <HAL_MspInit+0x4c>)
 8002304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002306:	4a0f      	ldr	r2, [pc, #60]	@ (8002344 <HAL_MspInit+0x4c>)
 8002308:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800230c:	6453      	str	r3, [r2, #68]	@ 0x44
 800230e:	4b0d      	ldr	r3, [pc, #52]	@ (8002344 <HAL_MspInit+0x4c>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002316:	607b      	str	r3, [r7, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_MspInit+0x4c>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002322:	4a08      	ldr	r2, [pc, #32]	@ (8002344 <HAL_MspInit+0x4c>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002328:	6413      	str	r3, [r2, #64]	@ 0x40
 800232a:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_MspInit+0x4c>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002336:	2007      	movs	r0, #7
 8002338:	f000 fb4c 	bl	80029d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40023800 	.word	0x40023800

08002348 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a19      	ldr	r2, [pc, #100]	@ (80023cc <HAL_SPI_MspInit+0x84>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d12b      	bne.n	80023c2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b18      	ldr	r3, [pc, #96]	@ (80023d0 <HAL_SPI_MspInit+0x88>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002372:	4a17      	ldr	r2, [pc, #92]	@ (80023d0 <HAL_SPI_MspInit+0x88>)
 8002374:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002378:	6453      	str	r3, [r2, #68]	@ 0x44
 800237a:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <HAL_SPI_MspInit+0x88>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b11      	ldr	r3, [pc, #68]	@ (80023d0 <HAL_SPI_MspInit+0x88>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	4a10      	ldr	r2, [pc, #64]	@ (80023d0 <HAL_SPI_MspInit+0x88>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6313      	str	r3, [r2, #48]	@ 0x30
 8002396:	4b0e      	ldr	r3, [pc, #56]	@ (80023d0 <HAL_SPI_MspInit+0x88>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80023a2:	23e0      	movs	r3, #224	@ 0xe0
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023b2:	2305      	movs	r3, #5
 80023b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	@ (80023d4 <HAL_SPI_MspInit+0x8c>)
 80023be:	f000 fb4b 	bl	8002a58 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80023c2:	bf00      	nop
 80023c4:	3728      	adds	r7, #40	@ 0x28
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40013000 	.word	0x40013000
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40020000 	.word	0x40020000

080023d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08a      	sub	sp, #40	@ 0x28
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a27      	ldr	r2, [pc, #156]	@ (8002494 <HAL_TIM_Base_MspInit+0xbc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d135      	bne.n	8002466 <HAL_TIM_Base_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	4b26      	ldr	r3, [pc, #152]	@ (8002498 <HAL_TIM_Base_MspInit+0xc0>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	4a25      	ldr	r2, [pc, #148]	@ (8002498 <HAL_TIM_Base_MspInit+0xc0>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6453      	str	r3, [r2, #68]	@ 0x44
 800240a:	4b23      	ldr	r3, [pc, #140]	@ (8002498 <HAL_TIM_Base_MspInit+0xc0>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	4b1f      	ldr	r3, [pc, #124]	@ (8002498 <HAL_TIM_Base_MspInit+0xc0>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	4a1e      	ldr	r2, [pc, #120]	@ (8002498 <HAL_TIM_Base_MspInit+0xc0>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6313      	str	r3, [r2, #48]	@ 0x30
 8002426:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <HAL_TIM_Base_MspInit+0xc0>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002432:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002444:	2301      	movs	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	4813      	ldr	r0, [pc, #76]	@ (800249c <HAL_TIM_Base_MspInit+0xc4>)
 8002450:	f000 fb02 	bl	8002a58 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002454:	2200      	movs	r2, #0
 8002456:	2100      	movs	r1, #0
 8002458:	201b      	movs	r0, #27
 800245a:	f000 fac6 	bl	80029ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800245e:	201b      	movs	r0, #27
 8002460:	f000 fadf 	bl	8002a22 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002464:	e012      	b.n	800248c <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800246e:	d10d      	bne.n	800248c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <HAL_TIM_Base_MspInit+0xc0>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002478:	4a07      	ldr	r2, [pc, #28]	@ (8002498 <HAL_TIM_Base_MspInit+0xc0>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <HAL_TIM_Base_MspInit+0xc0>)
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
}
 800248c:	bf00      	nop
 800248e:	3728      	adds	r7, #40	@ 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40010000 	.word	0x40010000
 8002498:	40023800 	.word	0x40023800
 800249c:	40020000 	.word	0x40020000

080024a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c0:	d11d      	bne.n	80024fe <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <HAL_TIM_MspPostInit+0x68>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ca:	4a0f      	ldr	r2, [pc, #60]	@ (8002508 <HAL_TIM_MspPostInit+0x68>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002508 <HAL_TIM_MspPostInit+0x68>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	60bb      	str	r3, [r7, #8]
 80024dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_Pin;
 80024de:	2301      	movs	r3, #1
 80024e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024ee:	2301      	movs	r3, #1
 80024f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM2_GPIO_Port, &GPIO_InitStruct);
 80024f2:	f107 030c 	add.w	r3, r7, #12
 80024f6:	4619      	mov	r1, r3
 80024f8:	4804      	ldr	r0, [pc, #16]	@ (800250c <HAL_TIM_MspPostInit+0x6c>)
 80024fa:	f000 faad 	bl	8002a58 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024fe:	bf00      	nop
 8002500:	3720      	adds	r7, #32
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023800 	.word	0x40023800
 800250c:	40020000 	.word	0x40020000

08002510 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08a      	sub	sp, #40	@ 0x28
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 0314 	add.w	r3, r7, #20
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a19      	ldr	r2, [pc, #100]	@ (8002594 <HAL_UART_MspInit+0x84>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d12b      	bne.n	800258a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	4b18      	ldr	r3, [pc, #96]	@ (8002598 <HAL_UART_MspInit+0x88>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	4a17      	ldr	r2, [pc, #92]	@ (8002598 <HAL_UART_MspInit+0x88>)
 800253c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002540:	6413      	str	r3, [r2, #64]	@ 0x40
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <HAL_UART_MspInit+0x88>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <HAL_UART_MspInit+0x88>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <HAL_UART_MspInit+0x88>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_UART_MspInit+0x88>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800256a:	230c      	movs	r3, #12
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256e:	2302      	movs	r3, #2
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2303      	movs	r3, #3
 8002578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800257a:	2307      	movs	r3, #7
 800257c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	4619      	mov	r1, r3
 8002584:	4805      	ldr	r0, [pc, #20]	@ (800259c <HAL_UART_MspInit+0x8c>)
 8002586:	f000 fa67 	bl	8002a58 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	@ 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40004400 	.word	0x40004400
 8002598:	40023800 	.word	0x40023800
 800259c:	40020000 	.word	0x40020000

080025a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <NMI_Handler+0x4>

080025a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ac:	bf00      	nop
 80025ae:	e7fd      	b.n	80025ac <HardFault_Handler+0x4>

080025b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <MemManage_Handler+0x4>

080025b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025bc:	bf00      	nop
 80025be:	e7fd      	b.n	80025bc <BusFault_Handler+0x4>

080025c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c4:	bf00      	nop
 80025c6:	e7fd      	b.n	80025c4 <UsageFault_Handler+0x4>

080025c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr

080025d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025d6:	b480      	push	{r7}
 80025d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025f6:	f000 f8d9 	bl	80027ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002604:	4802      	ldr	r0, [pc, #8]	@ (8002610 <TIM1_CC_IRQHandler+0x10>)
 8002606:	f001 fee4 	bl	80043d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000010c 	.word	0x2000010c

08002614 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002618:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800261c:	f000 fbfc 	bl	8002e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	bd80      	pop	{r7, pc}

08002624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800262c:	4a14      	ldr	r2, [pc, #80]	@ (8002680 <_sbrk+0x5c>)
 800262e:	4b15      	ldr	r3, [pc, #84]	@ (8002684 <_sbrk+0x60>)
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002638:	4b13      	ldr	r3, [pc, #76]	@ (8002688 <_sbrk+0x64>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002640:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <_sbrk+0x64>)
 8002642:	4a12      	ldr	r2, [pc, #72]	@ (800268c <_sbrk+0x68>)
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	429a      	cmp	r2, r3
 8002652:	d207      	bcs.n	8002664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002654:	f003 fb0c 	bl	8005c70 <__errno>
 8002658:	4603      	mov	r3, r0
 800265a:	220c      	movs	r2, #12
 800265c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	e009      	b.n	8002678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002664:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266a:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	4a05      	ldr	r2, [pc, #20]	@ (8002688 <_sbrk+0x64>)
 8002674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20020000 	.word	0x20020000
 8002684:	00000400 	.word	0x00000400
 8002688:	200001ec 	.word	0x200001ec
 800268c:	20000340 	.word	0x20000340

08002690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <SystemInit+0x20>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	4a05      	ldr	r2, [pc, #20]	@ (80026b0 <SystemInit+0x20>)
 800269c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026b8:	f7ff ffea 	bl	8002690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026bc:	480c      	ldr	r0, [pc, #48]	@ (80026f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026be:	490d      	ldr	r1, [pc, #52]	@ (80026f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026c0:	4a0d      	ldr	r2, [pc, #52]	@ (80026f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c4:	e002      	b.n	80026cc <LoopCopyDataInit>

080026c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ca:	3304      	adds	r3, #4

080026cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d0:	d3f9      	bcc.n	80026c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d8:	e001      	b.n	80026de <LoopFillZerobss>

080026da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026dc:	3204      	adds	r2, #4

080026de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e0:	d3fb      	bcc.n	80026da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80026e2:	f003 facb 	bl	8005c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e6:	f7ff fa73 	bl	8001bd0 <main>
  bx  lr    
 80026ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80026f8:	080078c8 	.word	0x080078c8
  ldr r2, =_sbss
 80026fc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8002700:	2000033c 	.word	0x2000033c

08002704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC_IRQHandler>
	...

08002708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800270c:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <HAL_Init+0x40>)
 8002712:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <HAL_Init+0x40>)
 800271e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a07      	ldr	r2, [pc, #28]	@ (8002748 <HAL_Init+0x40>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002730:	2003      	movs	r0, #3
 8002732:	f000 f94f 	bl	80029d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002736:	2000      	movs	r0, #0
 8002738:	f000 f808 	bl	800274c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800273c:	f7ff fddc 	bl	80022f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023c00 	.word	0x40023c00

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <HAL_InitTick+0x54>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <HAL_InitTick+0x58>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002762:	fbb3 f3f1 	udiv	r3, r3, r1
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f967 	bl	8002a3e <HAL_SYSTICK_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00e      	b.n	8002798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d80a      	bhi.n	8002796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002780:	2200      	movs	r2, #0
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f000 f92f 	bl	80029ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800278c:	4a06      	ldr	r2, [pc, #24]	@ (80027a8 <HAL_InitTick+0x5c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000008 	.word	0x20000008
 80027a4:	20000010 	.word	0x20000010
 80027a8:	2000000c 	.word	0x2000000c

080027ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_IncTick+0x20>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_IncTick+0x24>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	4a04      	ldr	r2, [pc, #16]	@ (80027d0 <HAL_IncTick+0x24>)
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000010 	.word	0x20000010
 80027d0:	200001f0 	.word	0x200001f0

080027d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return uwTick;
 80027d8:	4b03      	ldr	r3, [pc, #12]	@ (80027e8 <HAL_GetTick+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	200001f0 	.word	0x200001f0

080027ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff ffee 	bl	80027d4 <HAL_GetTick>
 80027f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d005      	beq.n	8002812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <HAL_Delay+0x44>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002812:	bf00      	nop
 8002814:	f7ff ffde 	bl	80027d4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	429a      	cmp	r2, r3
 8002822:	d8f7      	bhi.n	8002814 <HAL_Delay+0x28>
  {
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000010 	.word	0x20000010

08002834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002844:	4b0c      	ldr	r3, [pc, #48]	@ (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002850:	4013      	ands	r3, r2
 8002852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800285c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002860:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002866:	4a04      	ldr	r2, [pc, #16]	@ (8002878 <__NVIC_SetPriorityGrouping+0x44>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	60d3      	str	r3, [r2, #12]
}
 800286c:	bf00      	nop
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000ed00 	.word	0xe000ed00

0800287c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002880:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <__NVIC_GetPriorityGrouping+0x18>)
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	0a1b      	lsrs	r3, r3, #8
 8002886:	f003 0307 	and.w	r3, r3, #7
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db0b      	blt.n	80028c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4907      	ldr	r1, [pc, #28]	@ (80028d0 <__NVIC_EnableIRQ+0x38>)
 80028b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2001      	movs	r0, #1
 80028ba:	fa00 f202 	lsl.w	r2, r0, r2
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000e100 	.word	0xe000e100

080028d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	4603      	mov	r3, r0
 80028dc:	6039      	str	r1, [r7, #0]
 80028de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	db0a      	blt.n	80028fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	490c      	ldr	r1, [pc, #48]	@ (8002920 <__NVIC_SetPriority+0x4c>)
 80028ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f2:	0112      	lsls	r2, r2, #4
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	440b      	add	r3, r1
 80028f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028fc:	e00a      	b.n	8002914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	b2da      	uxtb	r2, r3
 8002902:	4908      	ldr	r1, [pc, #32]	@ (8002924 <__NVIC_SetPriority+0x50>)
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	3b04      	subs	r3, #4
 800290c:	0112      	lsls	r2, r2, #4
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	440b      	add	r3, r1
 8002912:	761a      	strb	r2, [r3, #24]
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000e100 	.word	0xe000e100
 8002924:	e000ed00 	.word	0xe000ed00

08002928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b480      	push	{r7}
 800292a:	b089      	sub	sp, #36	@ 0x24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f1c3 0307 	rsb	r3, r3, #7
 8002942:	2b04      	cmp	r3, #4
 8002944:	bf28      	it	cs
 8002946:	2304      	movcs	r3, #4
 8002948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3304      	adds	r3, #4
 800294e:	2b06      	cmp	r3, #6
 8002950:	d902      	bls.n	8002958 <NVIC_EncodePriority+0x30>
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	3b03      	subs	r3, #3
 8002956:	e000      	b.n	800295a <NVIC_EncodePriority+0x32>
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800295c:	f04f 32ff 	mov.w	r2, #4294967295
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	43da      	mvns	r2, r3
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002970:	f04f 31ff 	mov.w	r1, #4294967295
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa01 f303 	lsl.w	r3, r1, r3
 800297a:	43d9      	mvns	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	4313      	orrs	r3, r2
         );
}
 8002982:	4618      	mov	r0, r3
 8002984:	3724      	adds	r7, #36	@ 0x24
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
	...

08002990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3b01      	subs	r3, #1
 800299c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029a0:	d301      	bcc.n	80029a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a2:	2301      	movs	r3, #1
 80029a4:	e00f      	b.n	80029c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a6:	4a0a      	ldr	r2, [pc, #40]	@ (80029d0 <SysTick_Config+0x40>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029ae:	210f      	movs	r1, #15
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	f7ff ff8e 	bl	80028d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b8:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <SysTick_Config+0x40>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029be:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <SysTick_Config+0x40>)
 80029c0:	2207      	movs	r2, #7
 80029c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	e000e010 	.word	0xe000e010

080029d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff ff29 	bl	8002834 <__NVIC_SetPriorityGrouping>
}
 80029e2:	bf00      	nop
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b086      	sub	sp, #24
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	4603      	mov	r3, r0
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
 80029f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029fc:	f7ff ff3e 	bl	800287c <__NVIC_GetPriorityGrouping>
 8002a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	6978      	ldr	r0, [r7, #20]
 8002a08:	f7ff ff8e 	bl	8002928 <NVIC_EncodePriority>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a12:	4611      	mov	r1, r2
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff ff5d 	bl	80028d4 <__NVIC_SetPriority>
}
 8002a1a:	bf00      	nop
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	4603      	mov	r3, r0
 8002a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff ff31 	bl	8002898 <__NVIC_EnableIRQ>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}

08002a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a3e:	b580      	push	{r7, lr}
 8002a40:	b082      	sub	sp, #8
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff ffa2 	bl	8002990 <SysTick_Config>
 8002a4c:	4603      	mov	r3, r0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	@ 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e165      	b.n	8002d40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 8154 	bne.w	8002d3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d005      	beq.n	8002aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d130      	bne.n	8002b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 0201 	and.w	r2, r3, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d017      	beq.n	8002b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d123      	bne.n	8002b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80ae 	beq.w	8002d3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b5d      	ldr	r3, [pc, #372]	@ (8002d58 <HAL_GPIO_Init+0x300>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	4a5c      	ldr	r2, [pc, #368]	@ (8002d58 <HAL_GPIO_Init+0x300>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bee:	4b5a      	ldr	r3, [pc, #360]	@ (8002d58 <HAL_GPIO_Init+0x300>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfa:	4a58      	ldr	r2, [pc, #352]	@ (8002d5c <HAL_GPIO_Init+0x304>)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4f      	ldr	r2, [pc, #316]	@ (8002d60 <HAL_GPIO_Init+0x308>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d025      	beq.n	8002c72 <HAL_GPIO_Init+0x21a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4e      	ldr	r2, [pc, #312]	@ (8002d64 <HAL_GPIO_Init+0x30c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01f      	beq.n	8002c6e <HAL_GPIO_Init+0x216>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4d      	ldr	r2, [pc, #308]	@ (8002d68 <HAL_GPIO_Init+0x310>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d019      	beq.n	8002c6a <HAL_GPIO_Init+0x212>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4c      	ldr	r2, [pc, #304]	@ (8002d6c <HAL_GPIO_Init+0x314>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0x20e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4b      	ldr	r2, [pc, #300]	@ (8002d70 <HAL_GPIO_Init+0x318>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00d      	beq.n	8002c62 <HAL_GPIO_Init+0x20a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	@ (8002d74 <HAL_GPIO_Init+0x31c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <HAL_GPIO_Init+0x206>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a49      	ldr	r2, [pc, #292]	@ (8002d78 <HAL_GPIO_Init+0x320>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_GPIO_Init+0x202>
 8002c56:	2306      	movs	r3, #6
 8002c58:	e00c      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	e00a      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	@ (8002d5c <HAL_GPIO_Init+0x304>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b3a      	ldr	r3, [pc, #232]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a31      	ldr	r2, [pc, #196]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b2f      	ldr	r3, [pc, #188]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a26      	ldr	r2, [pc, #152]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce6:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d10:	4b1a      	ldr	r3, [pc, #104]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d34:	4a11      	ldr	r2, [pc, #68]	@ (8002d7c <HAL_GPIO_Init+0x324>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f ae96 	bls.w	8002a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	@ 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40021400 	.word	0x40021400
 8002d78:	40021800 	.word	0x40021800
 8002d7c:	40013c00 	.word	0x40013c00

08002d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d002      	beq.n	8002d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e001      	b.n	8002da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc0:	787b      	ldrb	r3, [r7, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dcc:	e003      	b.n	8002dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dce:	887b      	ldrh	r3, [r7, #2]
 8002dd0:	041a      	lsls	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	619a      	str	r2, [r3, #24]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
 8002dea:	460b      	mov	r3, r1
 8002dec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002df4:	887a      	ldrh	r2, [r7, #2]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	041a      	lsls	r2, r3, #16
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	43d9      	mvns	r1, r3
 8002e00:	887b      	ldrh	r3, [r7, #2]
 8002e02:	400b      	ands	r3, r1
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	619a      	str	r2, [r3, #24]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
	...

08002e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002e22:	4b08      	ldr	r3, [pc, #32]	@ (8002e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d006      	beq.n	8002e3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e2e:	4a05      	ldr	r2, [pc, #20]	@ (8002e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff f9e8 	bl	800220c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40013c00 	.word	0x40013c00

08002e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0cc      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e5c:	4b68      	ldr	r3, [pc, #416]	@ (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 030f 	and.w	r3, r3, #15
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d90c      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e6a:	4b65      	ldr	r3, [pc, #404]	@ (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b63      	ldr	r3, [pc, #396]	@ (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e0b8      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e9c:	4b59      	ldr	r3, [pc, #356]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a58      	ldr	r2, [pc, #352]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002ea6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002eb4:	4b53      	ldr	r3, [pc, #332]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a52      	ldr	r2, [pc, #328]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ebe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec0:	4b50      	ldr	r3, [pc, #320]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	494d      	ldr	r1, [pc, #308]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d044      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee6:	4b47      	ldr	r3, [pc, #284]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d119      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e07f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d107      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	4b3f      	ldr	r3, [pc, #252]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e06f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f16:	4b3b      	ldr	r3, [pc, #236]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e067      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f26:	4b37      	ldr	r3, [pc, #220]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f023 0203 	bic.w	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4934      	ldr	r1, [pc, #208]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f38:	f7ff fc4c 	bl	80027d4 <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7ff fc48 	bl	80027d4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e04f      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f56:	4b2b      	ldr	r3, [pc, #172]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 020c 	and.w	r2, r3, #12
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d1eb      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f68:	4b25      	ldr	r3, [pc, #148]	@ (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d20c      	bcs.n	8002f90 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b22      	ldr	r3, [pc, #136]	@ (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	b2d2      	uxtb	r2, r2
 8002f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <HAL_RCC_ClockConfig+0x1b8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e032      	b.n	8002ff6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0304 	and.w	r3, r3, #4
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d008      	beq.n	8002fae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f9c:	4b19      	ldr	r3, [pc, #100]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	4916      	ldr	r1, [pc, #88]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fba:	4b12      	ldr	r3, [pc, #72]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	490e      	ldr	r1, [pc, #56]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fce:	f000 f855 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003004 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	091b      	lsrs	r3, r3, #4
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	490a      	ldr	r1, [pc, #40]	@ (8003008 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe0:	5ccb      	ldrb	r3, [r1, r3]
 8002fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe6:	4a09      	ldr	r2, [pc, #36]	@ (800300c <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fea:	4b09      	ldr	r3, [pc, #36]	@ (8003010 <HAL_RCC_ClockConfig+0x1c8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fbac 	bl	800274c <HAL_InitTick>

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40023c00 	.word	0x40023c00
 8003004:	40023800 	.word	0x40023800
 8003008:	08007690 	.word	0x08007690
 800300c:	20000008 	.word	0x20000008
 8003010:	2000000c 	.word	0x2000000c

08003014 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003018:	4b03      	ldr	r3, [pc, #12]	@ (8003028 <HAL_RCC_GetHCLKFreq+0x14>)
 800301a:	681b      	ldr	r3, [r3, #0]
}
 800301c:	4618      	mov	r0, r3
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	20000008 	.word	0x20000008

0800302c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003030:	f7ff fff0 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 8003034:	4602      	mov	r2, r0
 8003036:	4b05      	ldr	r3, [pc, #20]	@ (800304c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	0a9b      	lsrs	r3, r3, #10
 800303c:	f003 0307 	and.w	r3, r3, #7
 8003040:	4903      	ldr	r1, [pc, #12]	@ (8003050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003042:	5ccb      	ldrb	r3, [r1, r3]
 8003044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003048:	4618      	mov	r0, r3
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40023800 	.word	0x40023800
 8003050:	080076a0 	.word	0x080076a0

08003054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003058:	f7ff ffdc 	bl	8003014 <HAL_RCC_GetHCLKFreq>
 800305c:	4602      	mov	r2, r0
 800305e:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	0b5b      	lsrs	r3, r3, #13
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	4903      	ldr	r1, [pc, #12]	@ (8003078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800306a:	5ccb      	ldrb	r3, [r1, r3]
 800306c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003070:	4618      	mov	r0, r3
 8003072:	bd80      	pop	{r7, pc}
 8003074:	40023800 	.word	0x40023800
 8003078:	080076a0 	.word	0x080076a0

0800307c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003080:	b0ae      	sub	sp, #184	@ 0xb8
 8003082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a2:	4bcb      	ldr	r3, [pc, #812]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b0c      	cmp	r3, #12
 80030ac:	f200 8206 	bhi.w	80034bc <HAL_RCC_GetSysClockFreq+0x440>
 80030b0:	a201      	add	r2, pc, #4	@ (adr r2, 80030b8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030ed 	.word	0x080030ed
 80030bc:	080034bd 	.word	0x080034bd
 80030c0:	080034bd 	.word	0x080034bd
 80030c4:	080034bd 	.word	0x080034bd
 80030c8:	080030f5 	.word	0x080030f5
 80030cc:	080034bd 	.word	0x080034bd
 80030d0:	080034bd 	.word	0x080034bd
 80030d4:	080034bd 	.word	0x080034bd
 80030d8:	080030fd 	.word	0x080030fd
 80030dc:	080034bd 	.word	0x080034bd
 80030e0:	080034bd 	.word	0x080034bd
 80030e4:	080034bd 	.word	0x080034bd
 80030e8:	080032ed 	.word	0x080032ed
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030ec:	4bb9      	ldr	r3, [pc, #740]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x358>)
 80030ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030f2:	e1e7      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030f4:	4bb8      	ldr	r3, [pc, #736]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80030f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030fa:	e1e3      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030fc:	4bb4      	ldr	r3, [pc, #720]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003108:	4bb1      	ldr	r3, [pc, #708]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x354>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d071      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003114:	4bae      	ldr	r3, [pc, #696]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	2200      	movs	r2, #0
 800311c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003120:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003124:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800312c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003130:	2300      	movs	r3, #0
 8003132:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800313a:	4622      	mov	r2, r4
 800313c:	462b      	mov	r3, r5
 800313e:	f04f 0000 	mov.w	r0, #0
 8003142:	f04f 0100 	mov.w	r1, #0
 8003146:	0159      	lsls	r1, r3, #5
 8003148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800314c:	0150      	lsls	r0, r2, #5
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4621      	mov	r1, r4
 8003154:	1a51      	subs	r1, r2, r1
 8003156:	6439      	str	r1, [r7, #64]	@ 0x40
 8003158:	4629      	mov	r1, r5
 800315a:	eb63 0301 	sbc.w	r3, r3, r1
 800315e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800316c:	4649      	mov	r1, r9
 800316e:	018b      	lsls	r3, r1, #6
 8003170:	4641      	mov	r1, r8
 8003172:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003176:	4641      	mov	r1, r8
 8003178:	018a      	lsls	r2, r1, #6
 800317a:	4641      	mov	r1, r8
 800317c:	1a51      	subs	r1, r2, r1
 800317e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003180:	4649      	mov	r1, r9
 8003182:	eb63 0301 	sbc.w	r3, r3, r1
 8003186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003194:	4649      	mov	r1, r9
 8003196:	00cb      	lsls	r3, r1, #3
 8003198:	4641      	mov	r1, r8
 800319a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800319e:	4641      	mov	r1, r8
 80031a0:	00ca      	lsls	r2, r1, #3
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	4603      	mov	r3, r0
 80031a8:	4622      	mov	r2, r4
 80031aa:	189b      	adds	r3, r3, r2
 80031ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ae:	462b      	mov	r3, r5
 80031b0:	460a      	mov	r2, r1
 80031b2:	eb42 0303 	adc.w	r3, r2, r3
 80031b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031c4:	4629      	mov	r1, r5
 80031c6:	024b      	lsls	r3, r1, #9
 80031c8:	4621      	mov	r1, r4
 80031ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031ce:	4621      	mov	r1, r4
 80031d0:	024a      	lsls	r2, r1, #9
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80031da:	2200      	movs	r2, #0
 80031dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80031e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80031e8:	f7fd fd38 	bl	8000c5c <__aeabi_uldivmod>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4613      	mov	r3, r2
 80031f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031f6:	e067      	b.n	80032c8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f8:	4b75      	ldr	r3, [pc, #468]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	099b      	lsrs	r3, r3, #6
 80031fe:	2200      	movs	r2, #0
 8003200:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003204:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003208:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800320c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003210:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003212:	2300      	movs	r3, #0
 8003214:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003216:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800321a:	4622      	mov	r2, r4
 800321c:	462b      	mov	r3, r5
 800321e:	f04f 0000 	mov.w	r0, #0
 8003222:	f04f 0100 	mov.w	r1, #0
 8003226:	0159      	lsls	r1, r3, #5
 8003228:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800322c:	0150      	lsls	r0, r2, #5
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4621      	mov	r1, r4
 8003234:	1a51      	subs	r1, r2, r1
 8003236:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003238:	4629      	mov	r1, r5
 800323a:	eb63 0301 	sbc.w	r3, r3, r1
 800323e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003240:	f04f 0200 	mov.w	r2, #0
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800324c:	4649      	mov	r1, r9
 800324e:	018b      	lsls	r3, r1, #6
 8003250:	4641      	mov	r1, r8
 8003252:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003256:	4641      	mov	r1, r8
 8003258:	018a      	lsls	r2, r1, #6
 800325a:	4641      	mov	r1, r8
 800325c:	ebb2 0a01 	subs.w	sl, r2, r1
 8003260:	4649      	mov	r1, r9
 8003262:	eb63 0b01 	sbc.w	fp, r3, r1
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003272:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003276:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800327a:	4692      	mov	sl, r2
 800327c:	469b      	mov	fp, r3
 800327e:	4623      	mov	r3, r4
 8003280:	eb1a 0303 	adds.w	r3, sl, r3
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	462b      	mov	r3, r5
 8003288:	eb4b 0303 	adc.w	r3, fp, r3
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800329a:	4629      	mov	r1, r5
 800329c:	028b      	lsls	r3, r1, #10
 800329e:	4621      	mov	r1, r4
 80032a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a4:	4621      	mov	r1, r4
 80032a6:	028a      	lsls	r2, r1, #10
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032b0:	2200      	movs	r2, #0
 80032b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80032b4:	677a      	str	r2, [r7, #116]	@ 0x74
 80032b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80032ba:	f7fd fccf 	bl	8000c5c <__aeabi_uldivmod>
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	4613      	mov	r3, r2
 80032c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032c8:	4b41      	ldr	r3, [pc, #260]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	0c1b      	lsrs	r3, r3, #16
 80032ce:	f003 0303 	and.w	r3, r3, #3
 80032d2:	3301      	adds	r3, #1
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80032da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80032de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032ea:	e0eb      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032ec:	4b38      	ldr	r3, [pc, #224]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032f8:	4b35      	ldr	r3, [pc, #212]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x354>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d06b      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003304:	4b32      	ldr	r3, [pc, #200]	@ (80033d0 <HAL_RCC_GetSysClockFreq+0x354>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	099b      	lsrs	r3, r3, #6
 800330a:	2200      	movs	r2, #0
 800330c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800330e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003310:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003316:	663b      	str	r3, [r7, #96]	@ 0x60
 8003318:	2300      	movs	r3, #0
 800331a:	667b      	str	r3, [r7, #100]	@ 0x64
 800331c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003320:	4622      	mov	r2, r4
 8003322:	462b      	mov	r3, r5
 8003324:	f04f 0000 	mov.w	r0, #0
 8003328:	f04f 0100 	mov.w	r1, #0
 800332c:	0159      	lsls	r1, r3, #5
 800332e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003332:	0150      	lsls	r0, r2, #5
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4621      	mov	r1, r4
 800333a:	1a51      	subs	r1, r2, r1
 800333c:	61b9      	str	r1, [r7, #24]
 800333e:	4629      	mov	r1, r5
 8003340:	eb63 0301 	sbc.w	r3, r3, r1
 8003344:	61fb      	str	r3, [r7, #28]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003352:	4659      	mov	r1, fp
 8003354:	018b      	lsls	r3, r1, #6
 8003356:	4651      	mov	r1, sl
 8003358:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800335c:	4651      	mov	r1, sl
 800335e:	018a      	lsls	r2, r1, #6
 8003360:	4651      	mov	r1, sl
 8003362:	ebb2 0801 	subs.w	r8, r2, r1
 8003366:	4659      	mov	r1, fp
 8003368:	eb63 0901 	sbc.w	r9, r3, r1
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003378:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800337c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003380:	4690      	mov	r8, r2
 8003382:	4699      	mov	r9, r3
 8003384:	4623      	mov	r3, r4
 8003386:	eb18 0303 	adds.w	r3, r8, r3
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	462b      	mov	r3, r5
 800338e:	eb49 0303 	adc.w	r3, r9, r3
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80033a0:	4629      	mov	r1, r5
 80033a2:	024b      	lsls	r3, r1, #9
 80033a4:	4621      	mov	r1, r4
 80033a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033aa:	4621      	mov	r1, r4
 80033ac:	024a      	lsls	r2, r1, #9
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033b6:	2200      	movs	r2, #0
 80033b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033ba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80033bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033c0:	f7fd fc4c 	bl	8000c5c <__aeabi_uldivmod>
 80033c4:	4602      	mov	r2, r0
 80033c6:	460b      	mov	r3, r1
 80033c8:	4613      	mov	r3, r2
 80033ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033ce:	e065      	b.n	800349c <HAL_RCC_GetSysClockFreq+0x420>
 80033d0:	40023800 	.word	0x40023800
 80033d4:	00f42400 	.word	0x00f42400
 80033d8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033dc:	4b3d      	ldr	r3, [pc, #244]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x458>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	099b      	lsrs	r3, r3, #6
 80033e2:	2200      	movs	r2, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	4611      	mov	r1, r2
 80033e8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80033ee:	2300      	movs	r3, #0
 80033f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80033f2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80033f6:	4642      	mov	r2, r8
 80033f8:	464b      	mov	r3, r9
 80033fa:	f04f 0000 	mov.w	r0, #0
 80033fe:	f04f 0100 	mov.w	r1, #0
 8003402:	0159      	lsls	r1, r3, #5
 8003404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003408:	0150      	lsls	r0, r2, #5
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4641      	mov	r1, r8
 8003410:	1a51      	subs	r1, r2, r1
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	4649      	mov	r1, r9
 8003416:	eb63 0301 	sbc.w	r3, r3, r1
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003428:	4659      	mov	r1, fp
 800342a:	018b      	lsls	r3, r1, #6
 800342c:	4651      	mov	r1, sl
 800342e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003432:	4651      	mov	r1, sl
 8003434:	018a      	lsls	r2, r1, #6
 8003436:	4651      	mov	r1, sl
 8003438:	1a54      	subs	r4, r2, r1
 800343a:	4659      	mov	r1, fp
 800343c:	eb63 0501 	sbc.w	r5, r3, r1
 8003440:	f04f 0200 	mov.w	r2, #0
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	00eb      	lsls	r3, r5, #3
 800344a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800344e:	00e2      	lsls	r2, r4, #3
 8003450:	4614      	mov	r4, r2
 8003452:	461d      	mov	r5, r3
 8003454:	4643      	mov	r3, r8
 8003456:	18e3      	adds	r3, r4, r3
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	464b      	mov	r3, r9
 800345c:	eb45 0303 	adc.w	r3, r5, r3
 8003460:	607b      	str	r3, [r7, #4]
 8003462:	f04f 0200 	mov.w	r2, #0
 8003466:	f04f 0300 	mov.w	r3, #0
 800346a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800346e:	4629      	mov	r1, r5
 8003470:	028b      	lsls	r3, r1, #10
 8003472:	4621      	mov	r1, r4
 8003474:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003478:	4621      	mov	r1, r4
 800347a:	028a      	lsls	r2, r1, #10
 800347c:	4610      	mov	r0, r2
 800347e:	4619      	mov	r1, r3
 8003480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003484:	2200      	movs	r2, #0
 8003486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003488:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800348a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800348e:	f7fd fbe5 	bl	8000c5c <__aeabi_uldivmod>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4613      	mov	r3, r2
 8003498:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800349c:	4b0d      	ldr	r3, [pc, #52]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x458>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	0f1b      	lsrs	r3, r3, #28
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80034aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034ba:	e003      	b.n	80034c4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80034be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	37b8      	adds	r7, #184	@ 0xb8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d2:	bf00      	nop
 80034d4:	40023800 	.word	0x40023800
 80034d8:	00f42400 	.word	0x00f42400

080034dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e28d      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8083 	beq.w	8003602 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80034fc:	4b94      	ldr	r3, [pc, #592]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b04      	cmp	r3, #4
 8003506:	d019      	beq.n	800353c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003508:	4b91      	ldr	r3, [pc, #580]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003510:	2b08      	cmp	r3, #8
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003514:	4b8e      	ldr	r3, [pc, #568]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800351c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003520:	d00c      	beq.n	800353c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b8b      	ldr	r3, [pc, #556]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d112      	bne.n	8003554 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352e:	4b88      	ldr	r3, [pc, #544]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800353a:	d10b      	bne.n	8003554 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800353c:	4b84      	ldr	r3, [pc, #528]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d05b      	beq.n	8003600 <HAL_RCC_OscConfig+0x124>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d157      	bne.n	8003600 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e25a      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355c:	d106      	bne.n	800356c <HAL_RCC_OscConfig+0x90>
 800355e:	4b7c      	ldr	r3, [pc, #496]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a7b      	ldr	r2, [pc, #492]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e01d      	b.n	80035a8 <HAL_RCC_OscConfig+0xcc>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0xb4>
 8003576:	4b76      	ldr	r3, [pc, #472]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a75      	ldr	r2, [pc, #468]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b73      	ldr	r3, [pc, #460]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a72      	ldr	r2, [pc, #456]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e00b      	b.n	80035a8 <HAL_RCC_OscConfig+0xcc>
 8003590:	4b6f      	ldr	r3, [pc, #444]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a6e      	ldr	r2, [pc, #440]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b6c      	ldr	r3, [pc, #432]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 80035a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7ff f910 	bl	80027d4 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b8:	f7ff f90c 	bl	80027d4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	@ 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e21f      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b61      	ldr	r3, [pc, #388]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0xdc>
 80035d6:	e014      	b.n	8003602 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d8:	f7ff f8fc 	bl	80027d4 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e0:	f7ff f8f8 	bl	80027d4 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	@ 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e20b      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	4b57      	ldr	r3, [pc, #348]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x104>
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d06f      	beq.n	80036ee <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800360e:	4b50      	ldr	r3, [pc, #320]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b00      	cmp	r3, #0
 8003618:	d017      	beq.n	800364a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800361a:	4b4d      	ldr	r3, [pc, #308]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003622:	2b08      	cmp	r3, #8
 8003624:	d105      	bne.n	8003632 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003626:	4b4a      	ldr	r3, [pc, #296]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003632:	4b47      	ldr	r3, [pc, #284]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800363a:	2b0c      	cmp	r3, #12
 800363c:	d11c      	bne.n	8003678 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800363e:	4b44      	ldr	r3, [pc, #272]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d116      	bne.n	8003678 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800364a:	4b41      	ldr	r3, [pc, #260]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <HAL_RCC_OscConfig+0x186>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d001      	beq.n	8003662 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e1d3      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003662:	4b3b      	ldr	r3, [pc, #236]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	4937      	ldr	r1, [pc, #220]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003676:	e03a      	b.n	80036ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003680:	4b34      	ldr	r3, [pc, #208]	@ (8003754 <HAL_RCC_OscConfig+0x278>)
 8003682:	2201      	movs	r2, #1
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7ff f8a5 	bl	80027d4 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800368e:	f7ff f8a1 	bl	80027d4 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e1b4      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ac:	4b28      	ldr	r3, [pc, #160]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4925      	ldr	r1, [pc, #148]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]
 80036c0:	e015      	b.n	80036ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c2:	4b24      	ldr	r3, [pc, #144]	@ (8003754 <HAL_RCC_OscConfig+0x278>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c8:	f7ff f884 	bl	80027d4 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036d0:	f7ff f880 	bl	80027d4 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e193      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d036      	beq.n	8003768 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d016      	beq.n	8003730 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <HAL_RCC_OscConfig+0x27c>)
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003708:	f7ff f864 	bl	80027d4 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003710:	f7ff f860 	bl	80027d4 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e173      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003722:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d0f0      	beq.n	8003710 <HAL_RCC_OscConfig+0x234>
 800372e:	e01b      	b.n	8003768 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003730:	4b09      	ldr	r3, [pc, #36]	@ (8003758 <HAL_RCC_OscConfig+0x27c>)
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003736:	f7ff f84d 	bl	80027d4 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	e00e      	b.n	800375c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800373e:	f7ff f849 	bl	80027d4 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d907      	bls.n	800375c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e15c      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
 8003750:	40023800 	.word	0x40023800
 8003754:	42470000 	.word	0x42470000
 8003758:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800375c:	4b8a      	ldr	r3, [pc, #552]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 800375e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ea      	bne.n	800373e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 8097 	beq.w	80038a4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003776:	2300      	movs	r3, #0
 8003778:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377a:	4b83      	ldr	r3, [pc, #524]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10f      	bne.n	80037a6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003786:	2300      	movs	r3, #0
 8003788:	60bb      	str	r3, [r7, #8]
 800378a:	4b7f      	ldr	r3, [pc, #508]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 800378c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378e:	4a7e      	ldr	r2, [pc, #504]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003794:	6413      	str	r3, [r2, #64]	@ 0x40
 8003796:	4b7c      	ldr	r3, [pc, #496]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	2301      	movs	r3, #1
 80037a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b79      	ldr	r3, [pc, #484]	@ (800398c <HAL_RCC_OscConfig+0x4b0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d118      	bne.n	80037e4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b2:	4b76      	ldr	r3, [pc, #472]	@ (800398c <HAL_RCC_OscConfig+0x4b0>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a75      	ldr	r2, [pc, #468]	@ (800398c <HAL_RCC_OscConfig+0x4b0>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037be:	f7ff f809 	bl	80027d4 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c6:	f7ff f805 	bl	80027d4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e118      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b6c      	ldr	r3, [pc, #432]	@ (800398c <HAL_RCC_OscConfig+0x4b0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d106      	bne.n	80037fa <HAL_RCC_OscConfig+0x31e>
 80037ec:	4b66      	ldr	r3, [pc, #408]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f0:	4a65      	ldr	r2, [pc, #404]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f8:	e01c      	b.n	8003834 <HAL_RCC_OscConfig+0x358>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b05      	cmp	r3, #5
 8003800:	d10c      	bne.n	800381c <HAL_RCC_OscConfig+0x340>
 8003802:	4b61      	ldr	r3, [pc, #388]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	4a60      	ldr	r2, [pc, #384]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 8003808:	f043 0304 	orr.w	r3, r3, #4
 800380c:	6713      	str	r3, [r2, #112]	@ 0x70
 800380e:	4b5e      	ldr	r3, [pc, #376]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 8003810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003812:	4a5d      	ldr	r2, [pc, #372]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 8003814:	f043 0301 	orr.w	r3, r3, #1
 8003818:	6713      	str	r3, [r2, #112]	@ 0x70
 800381a:	e00b      	b.n	8003834 <HAL_RCC_OscConfig+0x358>
 800381c:	4b5a      	ldr	r3, [pc, #360]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003820:	4a59      	ldr	r2, [pc, #356]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 8003822:	f023 0301 	bic.w	r3, r3, #1
 8003826:	6713      	str	r3, [r2, #112]	@ 0x70
 8003828:	4b57      	ldr	r3, [pc, #348]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 800382a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382c:	4a56      	ldr	r2, [pc, #344]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 800382e:	f023 0304 	bic.w	r3, r3, #4
 8003832:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d015      	beq.n	8003868 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7fe ffca 	bl	80027d4 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	e00a      	b.n	800385a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003844:	f7fe ffc6 	bl	80027d4 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003852:	4293      	cmp	r3, r2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0d7      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385a:	4b4b      	ldr	r3, [pc, #300]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0ee      	beq.n	8003844 <HAL_RCC_OscConfig+0x368>
 8003866:	e014      	b.n	8003892 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003868:	f7fe ffb4 	bl	80027d4 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386e:	e00a      	b.n	8003886 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003870:	f7fe ffb0 	bl	80027d4 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e0c1      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003886:	4b40      	ldr	r3, [pc, #256]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1ee      	bne.n	8003870 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003892:	7dfb      	ldrb	r3, [r7, #23]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003898:	4b3b      	ldr	r3, [pc, #236]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	4a3a      	ldr	r2, [pc, #232]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 800389e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 80ad 	beq.w	8003a08 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ae:	4b36      	ldr	r3, [pc, #216]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d060      	beq.n	800397c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d145      	bne.n	800394e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c2:	4b33      	ldr	r3, [pc, #204]	@ (8003990 <HAL_RCC_OscConfig+0x4b4>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fe ff84 	bl	80027d4 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fe ff80 	bl	80027d4 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e093      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e2:	4b29      	ldr	r3, [pc, #164]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69da      	ldr	r2, [r3, #28]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	431a      	orrs	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003904:	085b      	lsrs	r3, r3, #1
 8003906:	3b01      	subs	r3, #1
 8003908:	041b      	lsls	r3, r3, #16
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	061b      	lsls	r3, r3, #24
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	071b      	lsls	r3, r3, #28
 800391a:	491b      	ldr	r1, [pc, #108]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 800391c:	4313      	orrs	r3, r2
 800391e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003920:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <HAL_RCC_OscConfig+0x4b4>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fe ff55 	bl	80027d4 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392e:	f7fe ff51 	bl	80027d4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e064      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003940:	4b11      	ldr	r3, [pc, #68]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x452>
 800394c:	e05c      	b.n	8003a08 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b10      	ldr	r3, [pc, #64]	@ (8003990 <HAL_RCC_OscConfig+0x4b4>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7fe ff3e 	bl	80027d4 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe ff3a 	bl	80027d4 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e04d      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <HAL_RCC_OscConfig+0x4ac>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x480>
 800397a:	e045      	b.n	8003a08 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e040      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
 8003988:	40023800 	.word	0x40023800
 800398c:	40007000 	.word	0x40007000
 8003990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003994:	4b1f      	ldr	r3, [pc, #124]	@ (8003a14 <HAL_RCC_OscConfig+0x538>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d030      	beq.n	8003a04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d129      	bne.n	8003a04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d122      	bne.n	8003a04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d119      	bne.n	8003a04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	3b01      	subs	r3, #1
 80039de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d10f      	bne.n	8003a04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800

08003a18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e07b      	b.n	8003b22 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d108      	bne.n	8003a44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a3a:	d009      	beq.n	8003a50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
 8003a42:	e005      	b.n	8003a50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d106      	bne.n	8003a70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7fe fc6c 	bl	8002348 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	431a      	orrs	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad4:	ea42 0103 	orr.w	r1, r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003adc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	f003 0104 	and.w	r1, r3, #4
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af6:	f003 0210 	and.w	r2, r3, #16
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b088      	sub	sp, #32
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	603b      	str	r3, [r7, #0]
 8003b36:	4613      	mov	r3, r2
 8003b38:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b3a:	f7fe fe4b 	bl	80027d4 <HAL_GetTick>
 8003b3e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d001      	beq.n	8003b54 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
 8003b52:	e12a      	b.n	8003daa <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_SPI_Transmit+0x36>
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e122      	b.n	8003daa <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_SPI_Transmit+0x48>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e11b      	b.n	8003daa <HAL_SPI_Transmit+0x280>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	88fa      	ldrh	r2, [r7, #6]
 8003b92:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	88fa      	ldrh	r2, [r7, #6]
 8003b98:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc0:	d10f      	bne.n	8003be2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bd0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003be0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bec:	2b40      	cmp	r3, #64	@ 0x40
 8003bee:	d007      	beq.n	8003c00 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bfe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c08:	d152      	bne.n	8003cb0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d002      	beq.n	8003c18 <HAL_SPI_Transmit+0xee>
 8003c12:	8b7b      	ldrh	r3, [r7, #26]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d145      	bne.n	8003ca4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1c:	881a      	ldrh	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c28:	1c9a      	adds	r2, r3, #2
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c3c:	e032      	b.n	8003ca4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d112      	bne.n	8003c72 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	881a      	ldrh	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003c70:	e018      	b.n	8003ca4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c72:	f7fe fdaf 	bl	80027d4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d803      	bhi.n	8003c8a <HAL_SPI_Transmit+0x160>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c88:	d102      	bne.n	8003c90 <HAL_SPI_Transmit+0x166>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e082      	b.n	8003daa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1c7      	bne.n	8003c3e <HAL_SPI_Transmit+0x114>
 8003cae:	e053      	b.n	8003d58 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <HAL_SPI_Transmit+0x194>
 8003cb8:	8b7b      	ldrh	r3, [r7, #26]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d147      	bne.n	8003d4e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	330c      	adds	r3, #12
 8003cc8:	7812      	ldrb	r2, [r2, #0]
 8003cca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ce4:	e033      	b.n	8003d4e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d113      	bne.n	8003d1c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	7812      	ldrb	r2, [r2, #0]
 8003d00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	1c5a      	adds	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003d1a:	e018      	b.n	8003d4e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d1c:	f7fe fd5a 	bl	80027d4 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d803      	bhi.n	8003d34 <HAL_SPI_Transmit+0x20a>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d32:	d102      	bne.n	8003d3a <HAL_SPI_Transmit+0x210>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e02d      	b.n	8003daa <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1c6      	bne.n	8003ce6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f8b1 	bl	8003ec4 <SPI_EndRxTxTransaction>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d002      	beq.n	8003d6e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10a      	bne.n	8003d8c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	617b      	str	r3, [r7, #20]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	617b      	str	r3, [r7, #20]
 8003d8a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
  }
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3720      	adds	r7, #32
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dc4:	f7fe fd06 	bl	80027d4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dd4:	f7fe fcfe 	bl	80027d4 <HAL_GetTick>
 8003dd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dda:	4b39      	ldr	r3, [pc, #228]	@ (8003ec0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	015b      	lsls	r3, r3, #5
 8003de0:	0d1b      	lsrs	r3, r3, #20
 8003de2:	69fa      	ldr	r2, [r7, #28]
 8003de4:	fb02 f303 	mul.w	r3, r2, r3
 8003de8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dea:	e055      	b.n	8003e98 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d051      	beq.n	8003e98 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003df4:	f7fe fcee 	bl	80027d4 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d902      	bls.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d13d      	bne.n	8003e86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e22:	d111      	bne.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e2c:	d004      	beq.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e36:	d107      	bne.n	8003e48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e50:	d10f      	bne.n	8003e72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e018      	b.n	8003eb8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d102      	bne.n	8003e92 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
 8003e90:	e002      	b.n	8003e98 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689a      	ldr	r2, [r3, #8]
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	bf0c      	ite	eq
 8003ea8:	2301      	moveq	r3, #1
 8003eaa:	2300      	movne	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d19a      	bne.n	8003dec <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	20000008 	.word	0x20000008

08003ec4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b088      	sub	sp, #32
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	2102      	movs	r1, #2
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f7ff ff6a 	bl	8003db4 <SPI_WaitFlagStateUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eea:	f043 0220 	orr.w	r2, r3, #32
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e032      	b.n	8003f5c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f64 <SPI_EndRxTxTransaction+0xa0>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a1b      	ldr	r2, [pc, #108]	@ (8003f68 <SPI_EndRxTxTransaction+0xa4>)
 8003efc:	fba2 2303 	umull	r2, r3, r2, r3
 8003f00:	0d5b      	lsrs	r3, r3, #21
 8003f02:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f14:	d112      	bne.n	8003f3c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2180      	movs	r1, #128	@ 0x80
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f7ff ff47 	bl	8003db4 <SPI_WaitFlagStateUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d016      	beq.n	8003f5a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f30:	f043 0220 	orr.w	r2, r3, #32
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e00f      	b.n	8003f5c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00a      	beq.n	8003f58 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	3b01      	subs	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f52:	2b80      	cmp	r3, #128	@ 0x80
 8003f54:	d0f2      	beq.n	8003f3c <SPI_EndRxTxTransaction+0x78>
 8003f56:	e000      	b.n	8003f5a <SPI_EndRxTxTransaction+0x96>
        break;
 8003f58:	bf00      	nop
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	20000008 	.word	0x20000008
 8003f68:	165e9f81 	.word	0x165e9f81

08003f6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e041      	b.n	8004002 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	f7fe fa20 	bl	80023d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4610      	mov	r0, r2
 8003fac:	f000 fd5a 	bl	8004a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d001      	beq.n	8004024 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e046      	b.n	80040b2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a23      	ldr	r2, [pc, #140]	@ (80040c0 <HAL_TIM_Base_Start+0xb4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d022      	beq.n	800407c <HAL_TIM_Base_Start+0x70>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403e:	d01d      	beq.n	800407c <HAL_TIM_Base_Start+0x70>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a1f      	ldr	r2, [pc, #124]	@ (80040c4 <HAL_TIM_Base_Start+0xb8>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <HAL_TIM_Base_Start+0x70>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1e      	ldr	r2, [pc, #120]	@ (80040c8 <HAL_TIM_Base_Start+0xbc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <HAL_TIM_Base_Start+0x70>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1c      	ldr	r2, [pc, #112]	@ (80040cc <HAL_TIM_Base_Start+0xc0>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_TIM_Base_Start+0x70>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1b      	ldr	r2, [pc, #108]	@ (80040d0 <HAL_TIM_Base_Start+0xc4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_TIM_Base_Start+0x70>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a19      	ldr	r2, [pc, #100]	@ (80040d4 <HAL_TIM_Base_Start+0xc8>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_TIM_Base_Start+0x70>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a18      	ldr	r2, [pc, #96]	@ (80040d8 <HAL_TIM_Base_Start+0xcc>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d111      	bne.n	80040a0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d010      	beq.n	80040b0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f042 0201 	orr.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409e:	e007      	b.n	80040b0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f042 0201 	orr.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3714      	adds	r7, #20
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800
 80040cc:	40000c00 	.word	0x40000c00
 80040d0:	40010400 	.word	0x40010400
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40001800 	.word	0x40001800

080040dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e041      	b.n	8004172 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f839 	bl	800417a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3304      	adds	r3, #4
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f000 fca2 	bl	8004a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <HAL_TIM_PWM_Start+0x24>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	bf14      	ite	ne
 80041ac:	2301      	movne	r3, #1
 80041ae:	2300      	moveq	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	e022      	b.n	80041fa <HAL_TIM_PWM_Start+0x6a>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d109      	bne.n	80041ce <HAL_TIM_PWM_Start+0x3e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	bf14      	ite	ne
 80041c6:	2301      	movne	r3, #1
 80041c8:	2300      	moveq	r3, #0
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	e015      	b.n	80041fa <HAL_TIM_PWM_Start+0x6a>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d109      	bne.n	80041e8 <HAL_TIM_PWM_Start+0x58>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e008      	b.n	80041fa <HAL_TIM_PWM_Start+0x6a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	bf14      	ite	ne
 80041f4:	2301      	movne	r3, #1
 80041f6:	2300      	moveq	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e07c      	b.n	80042fc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d104      	bne.n	8004212 <HAL_TIM_PWM_Start+0x82>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004210:	e013      	b.n	800423a <HAL_TIM_PWM_Start+0xaa>
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	2b04      	cmp	r3, #4
 8004216:	d104      	bne.n	8004222 <HAL_TIM_PWM_Start+0x92>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004220:	e00b      	b.n	800423a <HAL_TIM_PWM_Start+0xaa>
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	2b08      	cmp	r3, #8
 8004226:	d104      	bne.n	8004232 <HAL_TIM_PWM_Start+0xa2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2202      	movs	r2, #2
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004230:	e003      	b.n	800423a <HAL_TIM_PWM_Start+0xaa>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2201      	movs	r2, #1
 8004240:	6839      	ldr	r1, [r7, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f001 f828 	bl	8005298 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a2d      	ldr	r2, [pc, #180]	@ (8004304 <HAL_TIM_PWM_Start+0x174>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d004      	beq.n	800425c <HAL_TIM_PWM_Start+0xcc>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a2c      	ldr	r2, [pc, #176]	@ (8004308 <HAL_TIM_PWM_Start+0x178>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d101      	bne.n	8004260 <HAL_TIM_PWM_Start+0xd0>
 800425c:	2301      	movs	r3, #1
 800425e:	e000      	b.n	8004262 <HAL_TIM_PWM_Start+0xd2>
 8004260:	2300      	movs	r3, #0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d007      	beq.n	8004276 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004274:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a22      	ldr	r2, [pc, #136]	@ (8004304 <HAL_TIM_PWM_Start+0x174>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d022      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x136>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004288:	d01d      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x136>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1f      	ldr	r2, [pc, #124]	@ (800430c <HAL_TIM_PWM_Start+0x17c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d018      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x136>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1d      	ldr	r2, [pc, #116]	@ (8004310 <HAL_TIM_PWM_Start+0x180>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d013      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x136>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004314 <HAL_TIM_PWM_Start+0x184>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d00e      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x136>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a16      	ldr	r2, [pc, #88]	@ (8004308 <HAL_TIM_PWM_Start+0x178>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d009      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x136>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a18      	ldr	r2, [pc, #96]	@ (8004318 <HAL_TIM_PWM_Start+0x188>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d004      	beq.n	80042c6 <HAL_TIM_PWM_Start+0x136>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a16      	ldr	r2, [pc, #88]	@ (800431c <HAL_TIM_PWM_Start+0x18c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d111      	bne.n	80042ea <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 0307 	and.w	r3, r3, #7
 80042d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	d010      	beq.n	80042fa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0201 	orr.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e8:	e007      	b.n	80042fa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f042 0201 	orr.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	40010000 	.word	0x40010000
 8004308:	40010400 	.word	0x40010400
 800430c:	40000400 	.word	0x40000400
 8004310:	40000800 	.word	0x40000800
 8004314:	40000c00 	.word	0x40000c00
 8004318:	40014000 	.word	0x40014000
 800431c:	40001800 	.word	0x40001800

08004320 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e041      	b.n	80043b6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f839 	bl	80043be <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3304      	adds	r3, #4
 800435c:	4619      	mov	r1, r3
 800435e:	4610      	mov	r0, r2
 8004360:	f000 fb80 	bl	8004a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3708      	adds	r7, #8
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80043be:	b480      	push	{r7}
 80043c0:	b083      	sub	sp, #12
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b084      	sub	sp, #16
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d020      	beq.n	8004436 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01b      	beq.n	8004436 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f06f 0202 	mvn.w	r2, #2
 8004406:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	f003 0303 	and.w	r3, r3, #3
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fb02 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 8004422:	e005      	b.n	8004430 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f000 faf4 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 fb05 	bl	8004a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	2b00      	cmp	r3, #0
 800443e:	d020      	beq.n	8004482 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 0304 	and.w	r3, r3, #4
 8004446:	2b00      	cmp	r3, #0
 8004448:	d01b      	beq.n	8004482 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f06f 0204 	mvn.w	r2, #4
 8004452:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2202      	movs	r2, #2
 8004458:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004464:	2b00      	cmp	r3, #0
 8004466:	d003      	beq.n	8004470 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fadc 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 800446e:	e005      	b.n	800447c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 face 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fadf 	bl	8004a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0308 	and.w	r3, r3, #8
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01b      	beq.n	80044ce <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f06f 0208 	mvn.w	r2, #8
 800449e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2204      	movs	r2, #4
 80044a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 fab6 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 80044ba:	e005      	b.n	80044c8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 faa8 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fab9 	bl	8004a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d020      	beq.n	800451a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01b      	beq.n	800451a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0210 	mvn.w	r2, #16
 80044ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2208      	movs	r2, #8
 80044f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 fa90 	bl	8004a26 <HAL_TIM_IC_CaptureCallback>
 8004506:	e005      	b.n	8004514 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fa82 	bl	8004a12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa93 	bl	8004a3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00c      	beq.n	800453e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d007      	beq.n	800453e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f06f 0201 	mvn.w	r2, #1
 8004536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 fa60 	bl	80049fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00c      	beq.n	8004562 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800455a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 ff47 	bl	80053f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00c      	beq.n	8004586 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800457e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fa64 	bl	8004a4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f003 0320 	and.w	r3, r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00c      	beq.n	80045aa <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d007      	beq.n	80045aa <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f06f 0220 	mvn.w	r2, #32
 80045a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 ff19 	bl	80053dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b086      	sub	sp, #24
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	60f8      	str	r0, [r7, #12]
 80045ba:	60b9      	str	r1, [r7, #8]
 80045bc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d101      	bne.n	80045d0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80045cc:	2302      	movs	r3, #2
 80045ce:	e088      	b.n	80046e2 <HAL_TIM_IC_ConfigChannel+0x130>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d11b      	bne.n	8004616 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80045ee:	f000 fc8f 	bl	8004f10 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699a      	ldr	r2, [r3, #24]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 020c 	bic.w	r2, r2, #12
 8004600:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6999      	ldr	r1, [r3, #24]
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	619a      	str	r2, [r3, #24]
 8004614:	e060      	b.n	80046d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b04      	cmp	r3, #4
 800461a:	d11c      	bne.n	8004656 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800462c:	f000 fd13 	bl	8005056 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800463e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6999      	ldr	r1, [r3, #24]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	021a      	lsls	r2, r3, #8
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	619a      	str	r2, [r3, #24]
 8004654:	e040      	b.n	80046d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d11b      	bne.n	8004694 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800466c:	f000 fd60 	bl	8005130 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 020c 	bic.w	r2, r2, #12
 800467e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	69d9      	ldr	r1, [r3, #28]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	689a      	ldr	r2, [r3, #8]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	430a      	orrs	r2, r1
 8004690:	61da      	str	r2, [r3, #28]
 8004692:	e021      	b.n	80046d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b0c      	cmp	r3, #12
 8004698:	d11c      	bne.n	80046d4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80046aa:	f000 fd7d 	bl	80051a8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80046bc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69d9      	ldr	r1, [r3, #28]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	021a      	lsls	r2, r3, #8
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	61da      	str	r2, [r3, #28]
 80046d2:	e001      	b.n	80046d8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004702:	2b01      	cmp	r3, #1
 8004704:	d101      	bne.n	800470a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004706:	2302      	movs	r3, #2
 8004708:	e0ae      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b0c      	cmp	r3, #12
 8004716:	f200 809f 	bhi.w	8004858 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800471a:	a201      	add	r2, pc, #4	@ (adr r2, 8004720 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800471c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004720:	08004755 	.word	0x08004755
 8004724:	08004859 	.word	0x08004859
 8004728:	08004859 	.word	0x08004859
 800472c:	08004859 	.word	0x08004859
 8004730:	08004795 	.word	0x08004795
 8004734:	08004859 	.word	0x08004859
 8004738:	08004859 	.word	0x08004859
 800473c:	08004859 	.word	0x08004859
 8004740:	080047d7 	.word	0x080047d7
 8004744:	08004859 	.word	0x08004859
 8004748:	08004859 	.word	0x08004859
 800474c:	08004859 	.word	0x08004859
 8004750:	08004817 	.word	0x08004817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fa28 	bl	8004bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0208 	orr.w	r2, r2, #8
 800476e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 0204 	bic.w	r2, r2, #4
 800477e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6999      	ldr	r1, [r3, #24]
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	691a      	ldr	r2, [r3, #16]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	619a      	str	r2, [r3, #24]
      break;
 8004792:	e064      	b.n	800485e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fa78 	bl	8004c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699a      	ldr	r2, [r3, #24]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6999      	ldr	r1, [r3, #24]
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	021a      	lsls	r2, r3, #8
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	619a      	str	r2, [r3, #24]
      break;
 80047d4:	e043      	b.n	800485e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68b9      	ldr	r1, [r7, #8]
 80047dc:	4618      	mov	r0, r3
 80047de:	f000 facd 	bl	8004d7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0208 	orr.w	r2, r2, #8
 80047f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69da      	ldr	r2, [r3, #28]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f022 0204 	bic.w	r2, r2, #4
 8004800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	691a      	ldr	r2, [r3, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	61da      	str	r2, [r3, #28]
      break;
 8004814:	e023      	b.n	800485e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68b9      	ldr	r1, [r7, #8]
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fb21 	bl	8004e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004830:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69da      	ldr	r2, [r3, #28]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004840:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69d9      	ldr	r1, [r3, #28]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	021a      	lsls	r2, r3, #8
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	61da      	str	r2, [r3, #28]
      break;
 8004856:	e002      	b.n	800485e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	75fb      	strb	r3, [r7, #23]
      break;
 800485c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004866:	7dfb      	ldrb	r3, [r7, #23]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004884:	2b01      	cmp	r3, #1
 8004886:	d101      	bne.n	800488c <HAL_TIM_ConfigClockSource+0x1c>
 8004888:	2302      	movs	r3, #2
 800488a:	e0b4      	b.n	80049f6 <HAL_TIM_ConfigClockSource+0x186>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048c4:	d03e      	beq.n	8004944 <HAL_TIM_ConfigClockSource+0xd4>
 80048c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80048ca:	f200 8087 	bhi.w	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048d2:	f000 8086 	beq.w	80049e2 <HAL_TIM_ConfigClockSource+0x172>
 80048d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048da:	d87f      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b70      	cmp	r3, #112	@ 0x70
 80048de:	d01a      	beq.n	8004916 <HAL_TIM_ConfigClockSource+0xa6>
 80048e0:	2b70      	cmp	r3, #112	@ 0x70
 80048e2:	d87b      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b60      	cmp	r3, #96	@ 0x60
 80048e6:	d050      	beq.n	800498a <HAL_TIM_ConfigClockSource+0x11a>
 80048e8:	2b60      	cmp	r3, #96	@ 0x60
 80048ea:	d877      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b50      	cmp	r3, #80	@ 0x50
 80048ee:	d03c      	beq.n	800496a <HAL_TIM_ConfigClockSource+0xfa>
 80048f0:	2b50      	cmp	r3, #80	@ 0x50
 80048f2:	d873      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b40      	cmp	r3, #64	@ 0x40
 80048f6:	d058      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x13a>
 80048f8:	2b40      	cmp	r3, #64	@ 0x40
 80048fa:	d86f      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 80048fc:	2b30      	cmp	r3, #48	@ 0x30
 80048fe:	d064      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004900:	2b30      	cmp	r3, #48	@ 0x30
 8004902:	d86b      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 8004904:	2b20      	cmp	r3, #32
 8004906:	d060      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004908:	2b20      	cmp	r3, #32
 800490a:	d867      	bhi.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05c      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004910:	2b10      	cmp	r3, #16
 8004912:	d05a      	beq.n	80049ca <HAL_TIM_ConfigClockSource+0x15a>
 8004914:	e062      	b.n	80049dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004926:	f000 fc97 	bl	8005258 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	609a      	str	r2, [r3, #8]
      break;
 8004942:	e04f      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004954:	f000 fc80 	bl	8005258 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004966:	609a      	str	r2, [r3, #8]
      break;
 8004968:	e03c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004976:	461a      	mov	r2, r3
 8004978:	f000 fb3e 	bl	8004ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2150      	movs	r1, #80	@ 0x50
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fc4d 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 8004988:	e02c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004996:	461a      	mov	r2, r3
 8004998:	f000 fb9a 	bl	80050d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2160      	movs	r1, #96	@ 0x60
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fc3d 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 80049a8:	e01c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b6:	461a      	mov	r2, r3
 80049b8:	f000 fb1e 	bl	8004ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2140      	movs	r1, #64	@ 0x40
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fc2d 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 80049c8:	e00c      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4619      	mov	r1, r3
 80049d4:	4610      	mov	r0, r2
 80049d6:	f000 fc24 	bl	8005222 <TIM_ITRx_SetConfig>
      break;
 80049da:	e003      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
      break;
 80049e0:	e000      	b.n	80049e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b083      	sub	sp, #12
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
	...

08004a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a43      	ldr	r2, [pc, #268]	@ (8004b84 <TIM_Base_SetConfig+0x120>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d013      	beq.n	8004aa4 <TIM_Base_SetConfig+0x40>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a82:	d00f      	beq.n	8004aa4 <TIM_Base_SetConfig+0x40>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a40      	ldr	r2, [pc, #256]	@ (8004b88 <TIM_Base_SetConfig+0x124>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d00b      	beq.n	8004aa4 <TIM_Base_SetConfig+0x40>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b8c <TIM_Base_SetConfig+0x128>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d007      	beq.n	8004aa4 <TIM_Base_SetConfig+0x40>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a3e      	ldr	r2, [pc, #248]	@ (8004b90 <TIM_Base_SetConfig+0x12c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d003      	beq.n	8004aa4 <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a3d      	ldr	r2, [pc, #244]	@ (8004b94 <TIM_Base_SetConfig+0x130>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d108      	bne.n	8004ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a32      	ldr	r2, [pc, #200]	@ (8004b84 <TIM_Base_SetConfig+0x120>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d02b      	beq.n	8004b16 <TIM_Base_SetConfig+0xb2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac4:	d027      	beq.n	8004b16 <TIM_Base_SetConfig+0xb2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a2f      	ldr	r2, [pc, #188]	@ (8004b88 <TIM_Base_SetConfig+0x124>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d023      	beq.n	8004b16 <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a2e      	ldr	r2, [pc, #184]	@ (8004b8c <TIM_Base_SetConfig+0x128>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d01f      	beq.n	8004b16 <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2d      	ldr	r2, [pc, #180]	@ (8004b90 <TIM_Base_SetConfig+0x12c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d01b      	beq.n	8004b16 <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a2c      	ldr	r2, [pc, #176]	@ (8004b94 <TIM_Base_SetConfig+0x130>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d017      	beq.n	8004b16 <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b98 <TIM_Base_SetConfig+0x134>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d013      	beq.n	8004b16 <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2a      	ldr	r2, [pc, #168]	@ (8004b9c <TIM_Base_SetConfig+0x138>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d00f      	beq.n	8004b16 <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a29      	ldr	r2, [pc, #164]	@ (8004ba0 <TIM_Base_SetConfig+0x13c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00b      	beq.n	8004b16 <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a28      	ldr	r2, [pc, #160]	@ (8004ba4 <TIM_Base_SetConfig+0x140>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d007      	beq.n	8004b16 <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a27      	ldr	r2, [pc, #156]	@ (8004ba8 <TIM_Base_SetConfig+0x144>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d003      	beq.n	8004b16 <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a26      	ldr	r2, [pc, #152]	@ (8004bac <TIM_Base_SetConfig+0x148>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d108      	bne.n	8004b28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a0e      	ldr	r2, [pc, #56]	@ (8004b84 <TIM_Base_SetConfig+0x120>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_Base_SetConfig+0xf2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a10      	ldr	r2, [pc, #64]	@ (8004b94 <TIM_Base_SetConfig+0x130>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d103      	bne.n	8004b5e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f043 0204 	orr.w	r2, r3, #4
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	601a      	str	r2, [r3, #0]
}
 8004b76:	bf00      	nop
 8004b78:	3714      	adds	r7, #20
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	40010000 	.word	0x40010000
 8004b88:	40000400 	.word	0x40000400
 8004b8c:	40000800 	.word	0x40000800
 8004b90:	40000c00 	.word	0x40000c00
 8004b94:	40010400 	.word	0x40010400
 8004b98:	40014000 	.word	0x40014000
 8004b9c:	40014400 	.word	0x40014400
 8004ba0:	40014800 	.word	0x40014800
 8004ba4:	40001800 	.word	0x40001800
 8004ba8:	40001c00 	.word	0x40001c00
 8004bac:	40002000 	.word	0x40002000

08004bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f023 0201 	bic.w	r2, r3, #1
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	f023 0302 	bic.w	r3, r3, #2
 8004bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a20      	ldr	r2, [pc, #128]	@ (8004c88 <TIM_OC1_SetConfig+0xd8>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_OC1_SetConfig+0x64>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c8c <TIM_OC1_SetConfig+0xdc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d10c      	bne.n	8004c2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f023 0308 	bic.w	r3, r3, #8
 8004c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	697a      	ldr	r2, [r7, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f023 0304 	bic.w	r3, r3, #4
 8004c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a15      	ldr	r2, [pc, #84]	@ (8004c88 <TIM_OC1_SetConfig+0xd8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d003      	beq.n	8004c3e <TIM_OC1_SetConfig+0x8e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a14      	ldr	r2, [pc, #80]	@ (8004c8c <TIM_OC1_SetConfig+0xdc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d111      	bne.n	8004c62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	697a      	ldr	r2, [r7, #20]
 8004c7a:	621a      	str	r2, [r3, #32]
}
 8004c7c:	bf00      	nop
 8004c7e:	371c      	adds	r7, #28
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40010400 	.word	0x40010400

08004c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f023 0210 	bic.w	r2, r3, #16
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	021b      	lsls	r3, r3, #8
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f023 0320 	bic.w	r3, r3, #32
 8004cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a22      	ldr	r2, [pc, #136]	@ (8004d74 <TIM_OC2_SetConfig+0xe4>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d003      	beq.n	8004cf8 <TIM_OC2_SetConfig+0x68>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a21      	ldr	r2, [pc, #132]	@ (8004d78 <TIM_OC2_SetConfig+0xe8>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d10d      	bne.n	8004d14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a17      	ldr	r2, [pc, #92]	@ (8004d74 <TIM_OC2_SetConfig+0xe4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC2_SetConfig+0x94>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a16      	ldr	r2, [pc, #88]	@ (8004d78 <TIM_OC2_SetConfig+0xe8>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d113      	bne.n	8004d4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	621a      	str	r2, [r3, #32]
}
 8004d66:	bf00      	nop
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40010400 	.word	0x40010400

08004d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a1b      	ldr	r3, [r3, #32]
 8004d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	69db      	ldr	r3, [r3, #28]
 8004da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f023 0303 	bic.w	r3, r3, #3
 8004db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	021b      	lsls	r3, r3, #8
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a21      	ldr	r2, [pc, #132]	@ (8004e5c <TIM_OC3_SetConfig+0xe0>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d003      	beq.n	8004de2 <TIM_OC3_SetConfig+0x66>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a20      	ldr	r2, [pc, #128]	@ (8004e60 <TIM_OC3_SetConfig+0xe4>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d10d      	bne.n	8004dfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a16      	ldr	r2, [pc, #88]	@ (8004e5c <TIM_OC3_SetConfig+0xe0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d003      	beq.n	8004e0e <TIM_OC3_SetConfig+0x92>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <TIM_OC3_SetConfig+0xe4>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d113      	bne.n	8004e36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	621a      	str	r2, [r3, #32]
}
 8004e50:	bf00      	nop
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40010000 	.word	0x40010000
 8004e60:	40010400 	.word	0x40010400

08004e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
 8004e78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	69db      	ldr	r3, [r3, #28]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	021b      	lsls	r3, r3, #8
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	031b      	lsls	r3, r3, #12
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a12      	ldr	r2, [pc, #72]	@ (8004f08 <TIM_OC4_SetConfig+0xa4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_OC4_SetConfig+0x68>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a11      	ldr	r2, [pc, #68]	@ (8004f0c <TIM_OC4_SetConfig+0xa8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d109      	bne.n	8004ee0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	019b      	lsls	r3, r3, #6
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	621a      	str	r2, [r3, #32]
}
 8004efa:	bf00      	nop
 8004efc:	371c      	adds	r7, #28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40010400 	.word	0x40010400

08004f10 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	f023 0201 	bic.w	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	4a28      	ldr	r2, [pc, #160]	@ (8004fdc <TIM_TI1_SetConfig+0xcc>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d01b      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f44:	d017      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	4a25      	ldr	r2, [pc, #148]	@ (8004fe0 <TIM_TI1_SetConfig+0xd0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d013      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	4a24      	ldr	r2, [pc, #144]	@ (8004fe4 <TIM_TI1_SetConfig+0xd4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00f      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	4a23      	ldr	r2, [pc, #140]	@ (8004fe8 <TIM_TI1_SetConfig+0xd8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00b      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a22      	ldr	r2, [pc, #136]	@ (8004fec <TIM_TI1_SetConfig+0xdc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d007      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a21      	ldr	r2, [pc, #132]	@ (8004ff0 <TIM_TI1_SetConfig+0xe0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d003      	beq.n	8004f76 <TIM_TI1_SetConfig+0x66>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a20      	ldr	r2, [pc, #128]	@ (8004ff4 <TIM_TI1_SetConfig+0xe4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d101      	bne.n	8004f7a <TIM_TI1_SetConfig+0x6a>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <TIM_TI1_SetConfig+0x6c>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0303 	bic.w	r3, r3, #3
 8004f86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e003      	b.n	8004f9a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f043 0301 	orr.w	r3, r3, #1
 8004f98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	011b      	lsls	r3, r3, #4
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f023 030a 	bic.w	r3, r3, #10
 8004fb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f003 030a 	and.w	r3, r3, #10
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	40010000 	.word	0x40010000
 8004fe0:	40000400 	.word	0x40000400
 8004fe4:	40000800 	.word	0x40000800
 8004fe8:	40000c00 	.word	0x40000c00
 8004fec:	40010400 	.word	0x40010400
 8004ff0:	40014000 	.word	0x40014000
 8004ff4:	40001800 	.word	0x40001800

08004ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	60b9      	str	r1, [r7, #8]
 8005002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	f023 0201 	bic.w	r2, r3, #1
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f023 030a 	bic.w	r3, r3, #10
 8005034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	621a      	str	r2, [r3, #32]
}
 800504a:	bf00      	nop
 800504c:	371c      	adds	r7, #28
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005056:	b480      	push	{r7}
 8005058:	b087      	sub	sp, #28
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f023 0210 	bic.w	r2, r3, #16
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005094:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	031b      	lsls	r3, r3, #12
 800509a:	b29b      	uxth	r3, r3
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050a8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	011b      	lsls	r3, r3, #4
 80050ae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	621a      	str	r2, [r3, #32]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b087      	sub	sp, #28
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f023 0210 	bic.w	r2, r3, #16
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	031b      	lsls	r3, r3, #12
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800510c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	621a      	str	r2, [r3, #32]
}
 8005124:	bf00      	nop
 8005126:	371c      	adds	r7, #28
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f023 0303 	bic.w	r3, r3, #3
 800515c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800516c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	b2db      	uxtb	r3, r3
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005180:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	021b      	lsls	r3, r3, #8
 8005186:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	621a      	str	r2, [r3, #32]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b087      	sub	sp, #28
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	607a      	str	r2, [r7, #4]
 80051b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051d4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	031b      	lsls	r3, r3, #12
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80051fa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	031b      	lsls	r3, r3, #12
 8005200:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	4313      	orrs	r3, r2
 8005208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	621a      	str	r2, [r3, #32]
}
 8005216:	bf00      	nop
 8005218:	371c      	adds	r7, #28
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005238:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	f043 0307 	orr.w	r3, r3, #7
 8005244:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	609a      	str	r2, [r3, #8]
}
 800524c:	bf00      	nop
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
 8005264:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005272:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	021a      	lsls	r2, r3, #8
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	431a      	orrs	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	4313      	orrs	r3, r2
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	609a      	str	r2, [r3, #8]
}
 800528c:	bf00      	nop
 800528e:	371c      	adds	r7, #28
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	2201      	movs	r2, #1
 80052ac:	fa02 f303 	lsl.w	r3, r2, r3
 80052b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a1a      	ldr	r2, [r3, #32]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	43db      	mvns	r3, r3
 80052ba:	401a      	ands	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1a      	ldr	r2, [r3, #32]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 031f 	and.w	r3, r3, #31
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	431a      	orrs	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]
}
 80052d6:	bf00      	nop
 80052d8:	371c      	adds	r7, #28
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
	...

080052e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d101      	bne.n	80052fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052f8:	2302      	movs	r3, #2
 80052fa:	e05a      	b.n	80053b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2202      	movs	r2, #2
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a21      	ldr	r2, [pc, #132]	@ (80053c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d022      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005348:	d01d      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a1d      	ldr	r2, [pc, #116]	@ (80053c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d018      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a1b      	ldr	r2, [pc, #108]	@ (80053c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d013      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a1a      	ldr	r2, [pc, #104]	@ (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d00e      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a18      	ldr	r2, [pc, #96]	@ (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a17      	ldr	r2, [pc, #92]	@ (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d004      	beq.n	8005386 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a15      	ldr	r2, [pc, #84]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d10c      	bne.n	80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800538c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	4313      	orrs	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	40010000 	.word	0x40010000
 80053c4:	40000400 	.word	0x40000400
 80053c8:	40000800 	.word	0x40000800
 80053cc:	40000c00 	.word	0x40000c00
 80053d0:	40010400 	.word	0x40010400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40001800 	.word	0x40001800

080053dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e042      	b.n	800549c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fd f870 	bl	8002510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2224      	movs	r2, #36	@ 0x24
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f973 	bl	8005734 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691a      	ldr	r2, [r3, #16]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800545c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	695a      	ldr	r2, [r3, #20]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800546c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800547c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2220      	movs	r2, #32
 8005488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3708      	adds	r7, #8
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08a      	sub	sp, #40	@ 0x28
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	603b      	str	r3, [r7, #0]
 80054b0:	4613      	mov	r3, r2
 80054b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b20      	cmp	r3, #32
 80054c2:	d175      	bne.n	80055b0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <HAL_UART_Transmit+0x2c>
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e06e      	b.n	80055b2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2221      	movs	r2, #33	@ 0x21
 80054de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054e2:	f7fd f977 	bl	80027d4 <HAL_GetTick>
 80054e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	88fa      	ldrh	r2, [r7, #6]
 80054ec:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	88fa      	ldrh	r2, [r7, #6]
 80054f2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054fc:	d108      	bne.n	8005510 <HAL_UART_Transmit+0x6c>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	61bb      	str	r3, [r7, #24]
 800550e:	e003      	b.n	8005518 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005514:	2300      	movs	r3, #0
 8005516:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005518:	e02e      	b.n	8005578 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2200      	movs	r2, #0
 8005522:	2180      	movs	r1, #128	@ 0x80
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f000 f848 	bl	80055ba <UART_WaitOnFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e03a      	b.n	80055b2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10b      	bne.n	800555a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	881b      	ldrh	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005550:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	3302      	adds	r3, #2
 8005556:	61bb      	str	r3, [r7, #24]
 8005558:	e007      	b.n	800556a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	781a      	ldrb	r2, [r3, #0]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	3301      	adds	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800556e:	b29b      	uxth	r3, r3
 8005570:	3b01      	subs	r3, #1
 8005572:	b29a      	uxth	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1cb      	bne.n	800551a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2200      	movs	r2, #0
 800558a:	2140      	movs	r1, #64	@ 0x40
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 f814 	bl	80055ba <UART_WaitOnFlagUntilTimeout>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d005      	beq.n	80055a4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e006      	b.n	80055b2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055ac:	2300      	movs	r3, #0
 80055ae:	e000      	b.n	80055b2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80055b0:	2302      	movs	r3, #2
  }
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3720      	adds	r7, #32
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	4613      	mov	r3, r2
 80055c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ca:	e03b      	b.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d037      	beq.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d4:	f7fd f8fe 	bl	80027d4 <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	6a3a      	ldr	r2, [r7, #32]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d302      	bcc.n	80055ea <UART_WaitOnFlagUntilTimeout+0x30>
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e03a      	b.n	8005664 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d023      	beq.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b80      	cmp	r3, #128	@ 0x80
 8005600:	d020      	beq.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	2b40      	cmp	r3, #64	@ 0x40
 8005606:	d01d      	beq.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b08      	cmp	r3, #8
 8005614:	d116      	bne.n	8005644 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005616:	2300      	movs	r3, #0
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f81d 	bl	800566c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2208      	movs	r2, #8
 8005636:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e00f      	b.n	8005664 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4013      	ands	r3, r2
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	429a      	cmp	r2, r3
 8005652:	bf0c      	ite	eq
 8005654:	2301      	moveq	r3, #1
 8005656:	2300      	movne	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	429a      	cmp	r2, r3
 8005660:	d0b4      	beq.n	80055cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800566c:	b480      	push	{r7}
 800566e:	b095      	sub	sp, #84	@ 0x54
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005686:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800568a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	330c      	adds	r3, #12
 8005692:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005694:	643a      	str	r2, [r7, #64]	@ 0x40
 8005696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800569a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e5      	bne.n	8005674 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3314      	adds	r3, #20
 80056ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	e853 3f00 	ldrex	r3, [r3]
 80056b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3314      	adds	r3, #20
 80056c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056d0:	e841 2300 	strex	r3, r2, [r1]
 80056d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1e5      	bne.n	80056a8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d119      	bne.n	8005718 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f023 0310 	bic.w	r3, r3, #16
 80056fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005704:	61ba      	str	r2, [r7, #24]
 8005706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6979      	ldr	r1, [r7, #20]
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	613b      	str	r3, [r7, #16]
   return(result);
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e5      	bne.n	80056e4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005726:	bf00      	nop
 8005728:	3754      	adds	r7, #84	@ 0x54
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005738:	b0c0      	sub	sp, #256	@ 0x100
 800573a:	af00      	add	r7, sp, #0
 800573c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005750:	68d9      	ldr	r1, [r3, #12]
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	ea40 0301 	orr.w	r3, r0, r1
 800575c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800575e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	431a      	orrs	r2, r3
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	431a      	orrs	r2, r3
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800578c:	f021 010c 	bic.w	r1, r1, #12
 8005790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800579a:	430b      	orrs	r3, r1
 800579c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800579e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80057aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ae:	6999      	ldr	r1, [r3, #24]
 80057b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	ea40 0301 	orr.w	r3, r0, r1
 80057ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	4b8f      	ldr	r3, [pc, #572]	@ (8005a00 <UART_SetConfig+0x2cc>)
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d005      	beq.n	80057d4 <UART_SetConfig+0xa0>
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	4b8d      	ldr	r3, [pc, #564]	@ (8005a04 <UART_SetConfig+0x2d0>)
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d104      	bne.n	80057de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057d4:	f7fd fc3e 	bl	8003054 <HAL_RCC_GetPCLK2Freq>
 80057d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057dc:	e003      	b.n	80057e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057de:	f7fd fc25 	bl	800302c <HAL_RCC_GetPCLK1Freq>
 80057e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057ea:	69db      	ldr	r3, [r3, #28]
 80057ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057f0:	f040 810c 	bne.w	8005a0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005802:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005806:	4622      	mov	r2, r4
 8005808:	462b      	mov	r3, r5
 800580a:	1891      	adds	r1, r2, r2
 800580c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800580e:	415b      	adcs	r3, r3
 8005810:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005812:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005816:	4621      	mov	r1, r4
 8005818:	eb12 0801 	adds.w	r8, r2, r1
 800581c:	4629      	mov	r1, r5
 800581e:	eb43 0901 	adc.w	r9, r3, r1
 8005822:	f04f 0200 	mov.w	r2, #0
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800582e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005832:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005836:	4690      	mov	r8, r2
 8005838:	4699      	mov	r9, r3
 800583a:	4623      	mov	r3, r4
 800583c:	eb18 0303 	adds.w	r3, r8, r3
 8005840:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005844:	462b      	mov	r3, r5
 8005846:	eb49 0303 	adc.w	r3, r9, r3
 800584a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800584e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800585a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800585e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005862:	460b      	mov	r3, r1
 8005864:	18db      	adds	r3, r3, r3
 8005866:	653b      	str	r3, [r7, #80]	@ 0x50
 8005868:	4613      	mov	r3, r2
 800586a:	eb42 0303 	adc.w	r3, r2, r3
 800586e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005870:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005874:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005878:	f7fb f9f0 	bl	8000c5c <__aeabi_uldivmod>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4b61      	ldr	r3, [pc, #388]	@ (8005a08 <UART_SetConfig+0x2d4>)
 8005882:	fba3 2302 	umull	r2, r3, r3, r2
 8005886:	095b      	lsrs	r3, r3, #5
 8005888:	011c      	lsls	r4, r3, #4
 800588a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800588e:	2200      	movs	r2, #0
 8005890:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005894:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005898:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800589c:	4642      	mov	r2, r8
 800589e:	464b      	mov	r3, r9
 80058a0:	1891      	adds	r1, r2, r2
 80058a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80058a4:	415b      	adcs	r3, r3
 80058a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058ac:	4641      	mov	r1, r8
 80058ae:	eb12 0a01 	adds.w	sl, r2, r1
 80058b2:	4649      	mov	r1, r9
 80058b4:	eb43 0b01 	adc.w	fp, r3, r1
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058cc:	4692      	mov	sl, r2
 80058ce:	469b      	mov	fp, r3
 80058d0:	4643      	mov	r3, r8
 80058d2:	eb1a 0303 	adds.w	r3, sl, r3
 80058d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058da:	464b      	mov	r3, r9
 80058dc:	eb4b 0303 	adc.w	r3, fp, r3
 80058e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80058f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80058f8:	460b      	mov	r3, r1
 80058fa:	18db      	adds	r3, r3, r3
 80058fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80058fe:	4613      	mov	r3, r2
 8005900:	eb42 0303 	adc.w	r3, r2, r3
 8005904:	647b      	str	r3, [r7, #68]	@ 0x44
 8005906:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800590a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800590e:	f7fb f9a5 	bl	8000c5c <__aeabi_uldivmod>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	4611      	mov	r1, r2
 8005918:	4b3b      	ldr	r3, [pc, #236]	@ (8005a08 <UART_SetConfig+0x2d4>)
 800591a:	fba3 2301 	umull	r2, r3, r3, r1
 800591e:	095b      	lsrs	r3, r3, #5
 8005920:	2264      	movs	r2, #100	@ 0x64
 8005922:	fb02 f303 	mul.w	r3, r2, r3
 8005926:	1acb      	subs	r3, r1, r3
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800592e:	4b36      	ldr	r3, [pc, #216]	@ (8005a08 <UART_SetConfig+0x2d4>)
 8005930:	fba3 2302 	umull	r2, r3, r3, r2
 8005934:	095b      	lsrs	r3, r3, #5
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800593c:	441c      	add	r4, r3
 800593e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005942:	2200      	movs	r2, #0
 8005944:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005948:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800594c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005950:	4642      	mov	r2, r8
 8005952:	464b      	mov	r3, r9
 8005954:	1891      	adds	r1, r2, r2
 8005956:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005958:	415b      	adcs	r3, r3
 800595a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800595c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005960:	4641      	mov	r1, r8
 8005962:	1851      	adds	r1, r2, r1
 8005964:	6339      	str	r1, [r7, #48]	@ 0x30
 8005966:	4649      	mov	r1, r9
 8005968:	414b      	adcs	r3, r1
 800596a:	637b      	str	r3, [r7, #52]	@ 0x34
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005978:	4659      	mov	r1, fp
 800597a:	00cb      	lsls	r3, r1, #3
 800597c:	4651      	mov	r1, sl
 800597e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005982:	4651      	mov	r1, sl
 8005984:	00ca      	lsls	r2, r1, #3
 8005986:	4610      	mov	r0, r2
 8005988:	4619      	mov	r1, r3
 800598a:	4603      	mov	r3, r0
 800598c:	4642      	mov	r2, r8
 800598e:	189b      	adds	r3, r3, r2
 8005990:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005994:	464b      	mov	r3, r9
 8005996:	460a      	mov	r2, r1
 8005998:	eb42 0303 	adc.w	r3, r2, r3
 800599c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059b4:	460b      	mov	r3, r1
 80059b6:	18db      	adds	r3, r3, r3
 80059b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ba:	4613      	mov	r3, r2
 80059bc:	eb42 0303 	adc.w	r3, r2, r3
 80059c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059ca:	f7fb f947 	bl	8000c5c <__aeabi_uldivmod>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005a08 <UART_SetConfig+0x2d4>)
 80059d4:	fba3 1302 	umull	r1, r3, r3, r2
 80059d8:	095b      	lsrs	r3, r3, #5
 80059da:	2164      	movs	r1, #100	@ 0x64
 80059dc:	fb01 f303 	mul.w	r3, r1, r3
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	3332      	adds	r3, #50	@ 0x32
 80059e6:	4a08      	ldr	r2, [pc, #32]	@ (8005a08 <UART_SetConfig+0x2d4>)
 80059e8:	fba2 2303 	umull	r2, r3, r2, r3
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	f003 0207 	and.w	r2, r3, #7
 80059f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4422      	add	r2, r4
 80059fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059fc:	e106      	b.n	8005c0c <UART_SetConfig+0x4d8>
 80059fe:	bf00      	nop
 8005a00:	40011000 	.word	0x40011000
 8005a04:	40011400 	.word	0x40011400
 8005a08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a10:	2200      	movs	r2, #0
 8005a12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a1e:	4642      	mov	r2, r8
 8005a20:	464b      	mov	r3, r9
 8005a22:	1891      	adds	r1, r2, r2
 8005a24:	6239      	str	r1, [r7, #32]
 8005a26:	415b      	adcs	r3, r3
 8005a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a2e:	4641      	mov	r1, r8
 8005a30:	1854      	adds	r4, r2, r1
 8005a32:	4649      	mov	r1, r9
 8005a34:	eb43 0501 	adc.w	r5, r3, r1
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	00eb      	lsls	r3, r5, #3
 8005a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a46:	00e2      	lsls	r2, r4, #3
 8005a48:	4614      	mov	r4, r2
 8005a4a:	461d      	mov	r5, r3
 8005a4c:	4643      	mov	r3, r8
 8005a4e:	18e3      	adds	r3, r4, r3
 8005a50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a54:	464b      	mov	r3, r9
 8005a56:	eb45 0303 	adc.w	r3, r5, r3
 8005a5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a7a:	4629      	mov	r1, r5
 8005a7c:	008b      	lsls	r3, r1, #2
 8005a7e:	4621      	mov	r1, r4
 8005a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a84:	4621      	mov	r1, r4
 8005a86:	008a      	lsls	r2, r1, #2
 8005a88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005a8c:	f7fb f8e6 	bl	8000c5c <__aeabi_uldivmod>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4b60      	ldr	r3, [pc, #384]	@ (8005c18 <UART_SetConfig+0x4e4>)
 8005a96:	fba3 2302 	umull	r2, r3, r3, r2
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	011c      	lsls	r4, r3, #4
 8005a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005aa8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005aac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ab0:	4642      	mov	r2, r8
 8005ab2:	464b      	mov	r3, r9
 8005ab4:	1891      	adds	r1, r2, r2
 8005ab6:	61b9      	str	r1, [r7, #24]
 8005ab8:	415b      	adcs	r3, r3
 8005aba:	61fb      	str	r3, [r7, #28]
 8005abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	1851      	adds	r1, r2, r1
 8005ac4:	6139      	str	r1, [r7, #16]
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	414b      	adcs	r3, r1
 8005aca:	617b      	str	r3, [r7, #20]
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ad8:	4659      	mov	r1, fp
 8005ada:	00cb      	lsls	r3, r1, #3
 8005adc:	4651      	mov	r1, sl
 8005ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ae2:	4651      	mov	r1, sl
 8005ae4:	00ca      	lsls	r2, r1, #3
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4603      	mov	r3, r0
 8005aec:	4642      	mov	r2, r8
 8005aee:	189b      	adds	r3, r3, r2
 8005af0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005af4:	464b      	mov	r3, r9
 8005af6:	460a      	mov	r2, r1
 8005af8:	eb42 0303 	adc.w	r3, r2, r3
 8005afc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	f04f 0300 	mov.w	r3, #0
 8005b14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b18:	4649      	mov	r1, r9
 8005b1a:	008b      	lsls	r3, r1, #2
 8005b1c:	4641      	mov	r1, r8
 8005b1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b22:	4641      	mov	r1, r8
 8005b24:	008a      	lsls	r2, r1, #2
 8005b26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b2a:	f7fb f897 	bl	8000c5c <__aeabi_uldivmod>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4611      	mov	r1, r2
 8005b34:	4b38      	ldr	r3, [pc, #224]	@ (8005c18 <UART_SetConfig+0x4e4>)
 8005b36:	fba3 2301 	umull	r2, r3, r3, r1
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	2264      	movs	r2, #100	@ 0x64
 8005b3e:	fb02 f303 	mul.w	r3, r2, r3
 8005b42:	1acb      	subs	r3, r1, r3
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	3332      	adds	r3, #50	@ 0x32
 8005b48:	4a33      	ldr	r2, [pc, #204]	@ (8005c18 <UART_SetConfig+0x4e4>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b54:	441c      	add	r4, r3
 8005b56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b64:	4642      	mov	r2, r8
 8005b66:	464b      	mov	r3, r9
 8005b68:	1891      	adds	r1, r2, r2
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	415b      	adcs	r3, r3
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b74:	4641      	mov	r1, r8
 8005b76:	1851      	adds	r1, r2, r1
 8005b78:	6039      	str	r1, [r7, #0]
 8005b7a:	4649      	mov	r1, r9
 8005b7c:	414b      	adcs	r3, r1
 8005b7e:	607b      	str	r3, [r7, #4]
 8005b80:	f04f 0200 	mov.w	r2, #0
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b8c:	4659      	mov	r1, fp
 8005b8e:	00cb      	lsls	r3, r1, #3
 8005b90:	4651      	mov	r1, sl
 8005b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b96:	4651      	mov	r1, sl
 8005b98:	00ca      	lsls	r2, r1, #3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	189b      	adds	r3, r3, r2
 8005ba4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ba6:	464b      	mov	r3, r9
 8005ba8:	460a      	mov	r2, r1
 8005baa:	eb42 0303 	adc.w	r3, r2, r3
 8005bae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bba:	667a      	str	r2, [r7, #100]	@ 0x64
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bc8:	4649      	mov	r1, r9
 8005bca:	008b      	lsls	r3, r1, #2
 8005bcc:	4641      	mov	r1, r8
 8005bce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	008a      	lsls	r2, r1, #2
 8005bd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bda:	f7fb f83f 	bl	8000c5c <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4b0d      	ldr	r3, [pc, #52]	@ (8005c18 <UART_SetConfig+0x4e4>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	@ 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	3332      	adds	r3, #50	@ 0x32
 8005bf6:	4a08      	ldr	r2, [pc, #32]	@ (8005c18 <UART_SetConfig+0x4e4>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	f003 020f 	and.w	r2, r3, #15
 8005c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4422      	add	r2, r4
 8005c0a:	609a      	str	r2, [r3, #8]
}
 8005c0c:	bf00      	nop
 8005c0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c12:	46bd      	mov	sp, r7
 8005c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c18:	51eb851f 	.word	0x51eb851f

08005c1c <siprintf>:
 8005c1c:	b40e      	push	{r1, r2, r3}
 8005c1e:	b510      	push	{r4, lr}
 8005c20:	b09d      	sub	sp, #116	@ 0x74
 8005c22:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005c24:	9002      	str	r0, [sp, #8]
 8005c26:	9006      	str	r0, [sp, #24]
 8005c28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005c2c:	480a      	ldr	r0, [pc, #40]	@ (8005c58 <siprintf+0x3c>)
 8005c2e:	9107      	str	r1, [sp, #28]
 8005c30:	9104      	str	r1, [sp, #16]
 8005c32:	490a      	ldr	r1, [pc, #40]	@ (8005c5c <siprintf+0x40>)
 8005c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c38:	9105      	str	r1, [sp, #20]
 8005c3a:	2400      	movs	r4, #0
 8005c3c:	a902      	add	r1, sp, #8
 8005c3e:	6800      	ldr	r0, [r0, #0]
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005c44:	f000 f9a2 	bl	8005f8c <_svfiprintf_r>
 8005c48:	9b02      	ldr	r3, [sp, #8]
 8005c4a:	701c      	strb	r4, [r3, #0]
 8005c4c:	b01d      	add	sp, #116	@ 0x74
 8005c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c52:	b003      	add	sp, #12
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20000014 	.word	0x20000014
 8005c5c:	ffff0208 	.word	0xffff0208

08005c60 <memset>:
 8005c60:	4402      	add	r2, r0
 8005c62:	4603      	mov	r3, r0
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d100      	bne.n	8005c6a <memset+0xa>
 8005c68:	4770      	bx	lr
 8005c6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c6e:	e7f9      	b.n	8005c64 <memset+0x4>

08005c70 <__errno>:
 8005c70:	4b01      	ldr	r3, [pc, #4]	@ (8005c78 <__errno+0x8>)
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	20000014 	.word	0x20000014

08005c7c <__libc_init_array>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	4d0d      	ldr	r5, [pc, #52]	@ (8005cb4 <__libc_init_array+0x38>)
 8005c80:	4c0d      	ldr	r4, [pc, #52]	@ (8005cb8 <__libc_init_array+0x3c>)
 8005c82:	1b64      	subs	r4, r4, r5
 8005c84:	10a4      	asrs	r4, r4, #2
 8005c86:	2600      	movs	r6, #0
 8005c88:	42a6      	cmp	r6, r4
 8005c8a:	d109      	bne.n	8005ca0 <__libc_init_array+0x24>
 8005c8c:	4d0b      	ldr	r5, [pc, #44]	@ (8005cbc <__libc_init_array+0x40>)
 8005c8e:	4c0c      	ldr	r4, [pc, #48]	@ (8005cc0 <__libc_init_array+0x44>)
 8005c90:	f001 fcde 	bl	8007650 <_init>
 8005c94:	1b64      	subs	r4, r4, r5
 8005c96:	10a4      	asrs	r4, r4, #2
 8005c98:	2600      	movs	r6, #0
 8005c9a:	42a6      	cmp	r6, r4
 8005c9c:	d105      	bne.n	8005caa <__libc_init_array+0x2e>
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca4:	4798      	blx	r3
 8005ca6:	3601      	adds	r6, #1
 8005ca8:	e7ee      	b.n	8005c88 <__libc_init_array+0xc>
 8005caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cae:	4798      	blx	r3
 8005cb0:	3601      	adds	r6, #1
 8005cb2:	e7f2      	b.n	8005c9a <__libc_init_array+0x1e>
 8005cb4:	080078c0 	.word	0x080078c0
 8005cb8:	080078c0 	.word	0x080078c0
 8005cbc:	080078c0 	.word	0x080078c0
 8005cc0:	080078c4 	.word	0x080078c4

08005cc4 <__retarget_lock_acquire_recursive>:
 8005cc4:	4770      	bx	lr

08005cc6 <__retarget_lock_release_recursive>:
 8005cc6:	4770      	bx	lr

08005cc8 <memcpy>:
 8005cc8:	440a      	add	r2, r1
 8005cca:	4291      	cmp	r1, r2
 8005ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cd0:	d100      	bne.n	8005cd4 <memcpy+0xc>
 8005cd2:	4770      	bx	lr
 8005cd4:	b510      	push	{r4, lr}
 8005cd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005cda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005cde:	4291      	cmp	r1, r2
 8005ce0:	d1f9      	bne.n	8005cd6 <memcpy+0xe>
 8005ce2:	bd10      	pop	{r4, pc}

08005ce4 <_free_r>:
 8005ce4:	b538      	push	{r3, r4, r5, lr}
 8005ce6:	4605      	mov	r5, r0
 8005ce8:	2900      	cmp	r1, #0
 8005cea:	d041      	beq.n	8005d70 <_free_r+0x8c>
 8005cec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf0:	1f0c      	subs	r4, r1, #4
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	bfb8      	it	lt
 8005cf6:	18e4      	addlt	r4, r4, r3
 8005cf8:	f000 f8e0 	bl	8005ebc <__malloc_lock>
 8005cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d74 <_free_r+0x90>)
 8005cfe:	6813      	ldr	r3, [r2, #0]
 8005d00:	b933      	cbnz	r3, 8005d10 <_free_r+0x2c>
 8005d02:	6063      	str	r3, [r4, #4]
 8005d04:	6014      	str	r4, [r2, #0]
 8005d06:	4628      	mov	r0, r5
 8005d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d0c:	f000 b8dc 	b.w	8005ec8 <__malloc_unlock>
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	d908      	bls.n	8005d26 <_free_r+0x42>
 8005d14:	6820      	ldr	r0, [r4, #0]
 8005d16:	1821      	adds	r1, r4, r0
 8005d18:	428b      	cmp	r3, r1
 8005d1a:	bf01      	itttt	eq
 8005d1c:	6819      	ldreq	r1, [r3, #0]
 8005d1e:	685b      	ldreq	r3, [r3, #4]
 8005d20:	1809      	addeq	r1, r1, r0
 8005d22:	6021      	streq	r1, [r4, #0]
 8005d24:	e7ed      	b.n	8005d02 <_free_r+0x1e>
 8005d26:	461a      	mov	r2, r3
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b10b      	cbz	r3, 8005d30 <_free_r+0x4c>
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d9fa      	bls.n	8005d26 <_free_r+0x42>
 8005d30:	6811      	ldr	r1, [r2, #0]
 8005d32:	1850      	adds	r0, r2, r1
 8005d34:	42a0      	cmp	r0, r4
 8005d36:	d10b      	bne.n	8005d50 <_free_r+0x6c>
 8005d38:	6820      	ldr	r0, [r4, #0]
 8005d3a:	4401      	add	r1, r0
 8005d3c:	1850      	adds	r0, r2, r1
 8005d3e:	4283      	cmp	r3, r0
 8005d40:	6011      	str	r1, [r2, #0]
 8005d42:	d1e0      	bne.n	8005d06 <_free_r+0x22>
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	6053      	str	r3, [r2, #4]
 8005d4a:	4408      	add	r0, r1
 8005d4c:	6010      	str	r0, [r2, #0]
 8005d4e:	e7da      	b.n	8005d06 <_free_r+0x22>
 8005d50:	d902      	bls.n	8005d58 <_free_r+0x74>
 8005d52:	230c      	movs	r3, #12
 8005d54:	602b      	str	r3, [r5, #0]
 8005d56:	e7d6      	b.n	8005d06 <_free_r+0x22>
 8005d58:	6820      	ldr	r0, [r4, #0]
 8005d5a:	1821      	adds	r1, r4, r0
 8005d5c:	428b      	cmp	r3, r1
 8005d5e:	bf04      	itt	eq
 8005d60:	6819      	ldreq	r1, [r3, #0]
 8005d62:	685b      	ldreq	r3, [r3, #4]
 8005d64:	6063      	str	r3, [r4, #4]
 8005d66:	bf04      	itt	eq
 8005d68:	1809      	addeq	r1, r1, r0
 8005d6a:	6021      	streq	r1, [r4, #0]
 8005d6c:	6054      	str	r4, [r2, #4]
 8005d6e:	e7ca      	b.n	8005d06 <_free_r+0x22>
 8005d70:	bd38      	pop	{r3, r4, r5, pc}
 8005d72:	bf00      	nop
 8005d74:	20000338 	.word	0x20000338

08005d78 <sbrk_aligned>:
 8005d78:	b570      	push	{r4, r5, r6, lr}
 8005d7a:	4e0f      	ldr	r6, [pc, #60]	@ (8005db8 <sbrk_aligned+0x40>)
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	6831      	ldr	r1, [r6, #0]
 8005d80:	4605      	mov	r5, r0
 8005d82:	b911      	cbnz	r1, 8005d8a <sbrk_aligned+0x12>
 8005d84:	f000 fba4 	bl	80064d0 <_sbrk_r>
 8005d88:	6030      	str	r0, [r6, #0]
 8005d8a:	4621      	mov	r1, r4
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	f000 fb9f 	bl	80064d0 <_sbrk_r>
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	d103      	bne.n	8005d9e <sbrk_aligned+0x26>
 8005d96:	f04f 34ff 	mov.w	r4, #4294967295
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	bd70      	pop	{r4, r5, r6, pc}
 8005d9e:	1cc4      	adds	r4, r0, #3
 8005da0:	f024 0403 	bic.w	r4, r4, #3
 8005da4:	42a0      	cmp	r0, r4
 8005da6:	d0f8      	beq.n	8005d9a <sbrk_aligned+0x22>
 8005da8:	1a21      	subs	r1, r4, r0
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 fb90 	bl	80064d0 <_sbrk_r>
 8005db0:	3001      	adds	r0, #1
 8005db2:	d1f2      	bne.n	8005d9a <sbrk_aligned+0x22>
 8005db4:	e7ef      	b.n	8005d96 <sbrk_aligned+0x1e>
 8005db6:	bf00      	nop
 8005db8:	20000334 	.word	0x20000334

08005dbc <_malloc_r>:
 8005dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dc0:	1ccd      	adds	r5, r1, #3
 8005dc2:	f025 0503 	bic.w	r5, r5, #3
 8005dc6:	3508      	adds	r5, #8
 8005dc8:	2d0c      	cmp	r5, #12
 8005dca:	bf38      	it	cc
 8005dcc:	250c      	movcc	r5, #12
 8005dce:	2d00      	cmp	r5, #0
 8005dd0:	4606      	mov	r6, r0
 8005dd2:	db01      	blt.n	8005dd8 <_malloc_r+0x1c>
 8005dd4:	42a9      	cmp	r1, r5
 8005dd6:	d904      	bls.n	8005de2 <_malloc_r+0x26>
 8005dd8:	230c      	movs	r3, #12
 8005dda:	6033      	str	r3, [r6, #0]
 8005ddc:	2000      	movs	r0, #0
 8005dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005de2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005eb8 <_malloc_r+0xfc>
 8005de6:	f000 f869 	bl	8005ebc <__malloc_lock>
 8005dea:	f8d8 3000 	ldr.w	r3, [r8]
 8005dee:	461c      	mov	r4, r3
 8005df0:	bb44      	cbnz	r4, 8005e44 <_malloc_r+0x88>
 8005df2:	4629      	mov	r1, r5
 8005df4:	4630      	mov	r0, r6
 8005df6:	f7ff ffbf 	bl	8005d78 <sbrk_aligned>
 8005dfa:	1c43      	adds	r3, r0, #1
 8005dfc:	4604      	mov	r4, r0
 8005dfe:	d158      	bne.n	8005eb2 <_malloc_r+0xf6>
 8005e00:	f8d8 4000 	ldr.w	r4, [r8]
 8005e04:	4627      	mov	r7, r4
 8005e06:	2f00      	cmp	r7, #0
 8005e08:	d143      	bne.n	8005e92 <_malloc_r+0xd6>
 8005e0a:	2c00      	cmp	r4, #0
 8005e0c:	d04b      	beq.n	8005ea6 <_malloc_r+0xea>
 8005e0e:	6823      	ldr	r3, [r4, #0]
 8005e10:	4639      	mov	r1, r7
 8005e12:	4630      	mov	r0, r6
 8005e14:	eb04 0903 	add.w	r9, r4, r3
 8005e18:	f000 fb5a 	bl	80064d0 <_sbrk_r>
 8005e1c:	4581      	cmp	r9, r0
 8005e1e:	d142      	bne.n	8005ea6 <_malloc_r+0xea>
 8005e20:	6821      	ldr	r1, [r4, #0]
 8005e22:	1a6d      	subs	r5, r5, r1
 8005e24:	4629      	mov	r1, r5
 8005e26:	4630      	mov	r0, r6
 8005e28:	f7ff ffa6 	bl	8005d78 <sbrk_aligned>
 8005e2c:	3001      	adds	r0, #1
 8005e2e:	d03a      	beq.n	8005ea6 <_malloc_r+0xea>
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	442b      	add	r3, r5
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	f8d8 3000 	ldr.w	r3, [r8]
 8005e3a:	685a      	ldr	r2, [r3, #4]
 8005e3c:	bb62      	cbnz	r2, 8005e98 <_malloc_r+0xdc>
 8005e3e:	f8c8 7000 	str.w	r7, [r8]
 8005e42:	e00f      	b.n	8005e64 <_malloc_r+0xa8>
 8005e44:	6822      	ldr	r2, [r4, #0]
 8005e46:	1b52      	subs	r2, r2, r5
 8005e48:	d420      	bmi.n	8005e8c <_malloc_r+0xd0>
 8005e4a:	2a0b      	cmp	r2, #11
 8005e4c:	d917      	bls.n	8005e7e <_malloc_r+0xc2>
 8005e4e:	1961      	adds	r1, r4, r5
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	6025      	str	r5, [r4, #0]
 8005e54:	bf18      	it	ne
 8005e56:	6059      	strne	r1, [r3, #4]
 8005e58:	6863      	ldr	r3, [r4, #4]
 8005e5a:	bf08      	it	eq
 8005e5c:	f8c8 1000 	streq.w	r1, [r8]
 8005e60:	5162      	str	r2, [r4, r5]
 8005e62:	604b      	str	r3, [r1, #4]
 8005e64:	4630      	mov	r0, r6
 8005e66:	f000 f82f 	bl	8005ec8 <__malloc_unlock>
 8005e6a:	f104 000b 	add.w	r0, r4, #11
 8005e6e:	1d23      	adds	r3, r4, #4
 8005e70:	f020 0007 	bic.w	r0, r0, #7
 8005e74:	1ac2      	subs	r2, r0, r3
 8005e76:	bf1c      	itt	ne
 8005e78:	1a1b      	subne	r3, r3, r0
 8005e7a:	50a3      	strne	r3, [r4, r2]
 8005e7c:	e7af      	b.n	8005dde <_malloc_r+0x22>
 8005e7e:	6862      	ldr	r2, [r4, #4]
 8005e80:	42a3      	cmp	r3, r4
 8005e82:	bf0c      	ite	eq
 8005e84:	f8c8 2000 	streq.w	r2, [r8]
 8005e88:	605a      	strne	r2, [r3, #4]
 8005e8a:	e7eb      	b.n	8005e64 <_malloc_r+0xa8>
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	6864      	ldr	r4, [r4, #4]
 8005e90:	e7ae      	b.n	8005df0 <_malloc_r+0x34>
 8005e92:	463c      	mov	r4, r7
 8005e94:	687f      	ldr	r7, [r7, #4]
 8005e96:	e7b6      	b.n	8005e06 <_malloc_r+0x4a>
 8005e98:	461a      	mov	r2, r3
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	42a3      	cmp	r3, r4
 8005e9e:	d1fb      	bne.n	8005e98 <_malloc_r+0xdc>
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	6053      	str	r3, [r2, #4]
 8005ea4:	e7de      	b.n	8005e64 <_malloc_r+0xa8>
 8005ea6:	230c      	movs	r3, #12
 8005ea8:	6033      	str	r3, [r6, #0]
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f000 f80c 	bl	8005ec8 <__malloc_unlock>
 8005eb0:	e794      	b.n	8005ddc <_malloc_r+0x20>
 8005eb2:	6005      	str	r5, [r0, #0]
 8005eb4:	e7d6      	b.n	8005e64 <_malloc_r+0xa8>
 8005eb6:	bf00      	nop
 8005eb8:	20000338 	.word	0x20000338

08005ebc <__malloc_lock>:
 8005ebc:	4801      	ldr	r0, [pc, #4]	@ (8005ec4 <__malloc_lock+0x8>)
 8005ebe:	f7ff bf01 	b.w	8005cc4 <__retarget_lock_acquire_recursive>
 8005ec2:	bf00      	nop
 8005ec4:	20000330 	.word	0x20000330

08005ec8 <__malloc_unlock>:
 8005ec8:	4801      	ldr	r0, [pc, #4]	@ (8005ed0 <__malloc_unlock+0x8>)
 8005eca:	f7ff befc 	b.w	8005cc6 <__retarget_lock_release_recursive>
 8005ece:	bf00      	nop
 8005ed0:	20000330 	.word	0x20000330

08005ed4 <__ssputs_r>:
 8005ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed8:	688e      	ldr	r6, [r1, #8]
 8005eda:	461f      	mov	r7, r3
 8005edc:	42be      	cmp	r6, r7
 8005ede:	680b      	ldr	r3, [r1, #0]
 8005ee0:	4682      	mov	sl, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	4690      	mov	r8, r2
 8005ee6:	d82d      	bhi.n	8005f44 <__ssputs_r+0x70>
 8005ee8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005eec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005ef0:	d026      	beq.n	8005f40 <__ssputs_r+0x6c>
 8005ef2:	6965      	ldr	r5, [r4, #20]
 8005ef4:	6909      	ldr	r1, [r1, #16]
 8005ef6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005efa:	eba3 0901 	sub.w	r9, r3, r1
 8005efe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f02:	1c7b      	adds	r3, r7, #1
 8005f04:	444b      	add	r3, r9
 8005f06:	106d      	asrs	r5, r5, #1
 8005f08:	429d      	cmp	r5, r3
 8005f0a:	bf38      	it	cc
 8005f0c:	461d      	movcc	r5, r3
 8005f0e:	0553      	lsls	r3, r2, #21
 8005f10:	d527      	bpl.n	8005f62 <__ssputs_r+0x8e>
 8005f12:	4629      	mov	r1, r5
 8005f14:	f7ff ff52 	bl	8005dbc <_malloc_r>
 8005f18:	4606      	mov	r6, r0
 8005f1a:	b360      	cbz	r0, 8005f76 <__ssputs_r+0xa2>
 8005f1c:	6921      	ldr	r1, [r4, #16]
 8005f1e:	464a      	mov	r2, r9
 8005f20:	f7ff fed2 	bl	8005cc8 <memcpy>
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f2e:	81a3      	strh	r3, [r4, #12]
 8005f30:	6126      	str	r6, [r4, #16]
 8005f32:	6165      	str	r5, [r4, #20]
 8005f34:	444e      	add	r6, r9
 8005f36:	eba5 0509 	sub.w	r5, r5, r9
 8005f3a:	6026      	str	r6, [r4, #0]
 8005f3c:	60a5      	str	r5, [r4, #8]
 8005f3e:	463e      	mov	r6, r7
 8005f40:	42be      	cmp	r6, r7
 8005f42:	d900      	bls.n	8005f46 <__ssputs_r+0x72>
 8005f44:	463e      	mov	r6, r7
 8005f46:	6820      	ldr	r0, [r4, #0]
 8005f48:	4632      	mov	r2, r6
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	f000 faa6 	bl	800649c <memmove>
 8005f50:	68a3      	ldr	r3, [r4, #8]
 8005f52:	1b9b      	subs	r3, r3, r6
 8005f54:	60a3      	str	r3, [r4, #8]
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	4433      	add	r3, r6
 8005f5a:	6023      	str	r3, [r4, #0]
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f62:	462a      	mov	r2, r5
 8005f64:	f000 fac4 	bl	80064f0 <_realloc_r>
 8005f68:	4606      	mov	r6, r0
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	d1e0      	bne.n	8005f30 <__ssputs_r+0x5c>
 8005f6e:	6921      	ldr	r1, [r4, #16]
 8005f70:	4650      	mov	r0, sl
 8005f72:	f7ff feb7 	bl	8005ce4 <_free_r>
 8005f76:	230c      	movs	r3, #12
 8005f78:	f8ca 3000 	str.w	r3, [sl]
 8005f7c:	89a3      	ldrh	r3, [r4, #12]
 8005f7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f82:	81a3      	strh	r3, [r4, #12]
 8005f84:	f04f 30ff 	mov.w	r0, #4294967295
 8005f88:	e7e9      	b.n	8005f5e <__ssputs_r+0x8a>
	...

08005f8c <_svfiprintf_r>:
 8005f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f90:	4698      	mov	r8, r3
 8005f92:	898b      	ldrh	r3, [r1, #12]
 8005f94:	061b      	lsls	r3, r3, #24
 8005f96:	b09d      	sub	sp, #116	@ 0x74
 8005f98:	4607      	mov	r7, r0
 8005f9a:	460d      	mov	r5, r1
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	d510      	bpl.n	8005fc2 <_svfiprintf_r+0x36>
 8005fa0:	690b      	ldr	r3, [r1, #16]
 8005fa2:	b973      	cbnz	r3, 8005fc2 <_svfiprintf_r+0x36>
 8005fa4:	2140      	movs	r1, #64	@ 0x40
 8005fa6:	f7ff ff09 	bl	8005dbc <_malloc_r>
 8005faa:	6028      	str	r0, [r5, #0]
 8005fac:	6128      	str	r0, [r5, #16]
 8005fae:	b930      	cbnz	r0, 8005fbe <_svfiprintf_r+0x32>
 8005fb0:	230c      	movs	r3, #12
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb8:	b01d      	add	sp, #116	@ 0x74
 8005fba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fbe:	2340      	movs	r3, #64	@ 0x40
 8005fc0:	616b      	str	r3, [r5, #20]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fc6:	2320      	movs	r3, #32
 8005fc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005fcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fd0:	2330      	movs	r3, #48	@ 0x30
 8005fd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006170 <_svfiprintf_r+0x1e4>
 8005fd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005fda:	f04f 0901 	mov.w	r9, #1
 8005fde:	4623      	mov	r3, r4
 8005fe0:	469a      	mov	sl, r3
 8005fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fe6:	b10a      	cbz	r2, 8005fec <_svfiprintf_r+0x60>
 8005fe8:	2a25      	cmp	r2, #37	@ 0x25
 8005fea:	d1f9      	bne.n	8005fe0 <_svfiprintf_r+0x54>
 8005fec:	ebba 0b04 	subs.w	fp, sl, r4
 8005ff0:	d00b      	beq.n	800600a <_svfiprintf_r+0x7e>
 8005ff2:	465b      	mov	r3, fp
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	4629      	mov	r1, r5
 8005ff8:	4638      	mov	r0, r7
 8005ffa:	f7ff ff6b 	bl	8005ed4 <__ssputs_r>
 8005ffe:	3001      	adds	r0, #1
 8006000:	f000 80a7 	beq.w	8006152 <_svfiprintf_r+0x1c6>
 8006004:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006006:	445a      	add	r2, fp
 8006008:	9209      	str	r2, [sp, #36]	@ 0x24
 800600a:	f89a 3000 	ldrb.w	r3, [sl]
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 809f 	beq.w	8006152 <_svfiprintf_r+0x1c6>
 8006014:	2300      	movs	r3, #0
 8006016:	f04f 32ff 	mov.w	r2, #4294967295
 800601a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800601e:	f10a 0a01 	add.w	sl, sl, #1
 8006022:	9304      	str	r3, [sp, #16]
 8006024:	9307      	str	r3, [sp, #28]
 8006026:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800602a:	931a      	str	r3, [sp, #104]	@ 0x68
 800602c:	4654      	mov	r4, sl
 800602e:	2205      	movs	r2, #5
 8006030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006034:	484e      	ldr	r0, [pc, #312]	@ (8006170 <_svfiprintf_r+0x1e4>)
 8006036:	f7fa f8f3 	bl	8000220 <memchr>
 800603a:	9a04      	ldr	r2, [sp, #16]
 800603c:	b9d8      	cbnz	r0, 8006076 <_svfiprintf_r+0xea>
 800603e:	06d0      	lsls	r0, r2, #27
 8006040:	bf44      	itt	mi
 8006042:	2320      	movmi	r3, #32
 8006044:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006048:	0711      	lsls	r1, r2, #28
 800604a:	bf44      	itt	mi
 800604c:	232b      	movmi	r3, #43	@ 0x2b
 800604e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006052:	f89a 3000 	ldrb.w	r3, [sl]
 8006056:	2b2a      	cmp	r3, #42	@ 0x2a
 8006058:	d015      	beq.n	8006086 <_svfiprintf_r+0xfa>
 800605a:	9a07      	ldr	r2, [sp, #28]
 800605c:	4654      	mov	r4, sl
 800605e:	2000      	movs	r0, #0
 8006060:	f04f 0c0a 	mov.w	ip, #10
 8006064:	4621      	mov	r1, r4
 8006066:	f811 3b01 	ldrb.w	r3, [r1], #1
 800606a:	3b30      	subs	r3, #48	@ 0x30
 800606c:	2b09      	cmp	r3, #9
 800606e:	d94b      	bls.n	8006108 <_svfiprintf_r+0x17c>
 8006070:	b1b0      	cbz	r0, 80060a0 <_svfiprintf_r+0x114>
 8006072:	9207      	str	r2, [sp, #28]
 8006074:	e014      	b.n	80060a0 <_svfiprintf_r+0x114>
 8006076:	eba0 0308 	sub.w	r3, r0, r8
 800607a:	fa09 f303 	lsl.w	r3, r9, r3
 800607e:	4313      	orrs	r3, r2
 8006080:	9304      	str	r3, [sp, #16]
 8006082:	46a2      	mov	sl, r4
 8006084:	e7d2      	b.n	800602c <_svfiprintf_r+0xa0>
 8006086:	9b03      	ldr	r3, [sp, #12]
 8006088:	1d19      	adds	r1, r3, #4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	9103      	str	r1, [sp, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	bfbb      	ittet	lt
 8006092:	425b      	neglt	r3, r3
 8006094:	f042 0202 	orrlt.w	r2, r2, #2
 8006098:	9307      	strge	r3, [sp, #28]
 800609a:	9307      	strlt	r3, [sp, #28]
 800609c:	bfb8      	it	lt
 800609e:	9204      	strlt	r2, [sp, #16]
 80060a0:	7823      	ldrb	r3, [r4, #0]
 80060a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80060a4:	d10a      	bne.n	80060bc <_svfiprintf_r+0x130>
 80060a6:	7863      	ldrb	r3, [r4, #1]
 80060a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80060aa:	d132      	bne.n	8006112 <_svfiprintf_r+0x186>
 80060ac:	9b03      	ldr	r3, [sp, #12]
 80060ae:	1d1a      	adds	r2, r3, #4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	9203      	str	r2, [sp, #12]
 80060b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060b8:	3402      	adds	r4, #2
 80060ba:	9305      	str	r3, [sp, #20]
 80060bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006180 <_svfiprintf_r+0x1f4>
 80060c0:	7821      	ldrb	r1, [r4, #0]
 80060c2:	2203      	movs	r2, #3
 80060c4:	4650      	mov	r0, sl
 80060c6:	f7fa f8ab 	bl	8000220 <memchr>
 80060ca:	b138      	cbz	r0, 80060dc <_svfiprintf_r+0x150>
 80060cc:	9b04      	ldr	r3, [sp, #16]
 80060ce:	eba0 000a 	sub.w	r0, r0, sl
 80060d2:	2240      	movs	r2, #64	@ 0x40
 80060d4:	4082      	lsls	r2, r0
 80060d6:	4313      	orrs	r3, r2
 80060d8:	3401      	adds	r4, #1
 80060da:	9304      	str	r3, [sp, #16]
 80060dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e0:	4824      	ldr	r0, [pc, #144]	@ (8006174 <_svfiprintf_r+0x1e8>)
 80060e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80060e6:	2206      	movs	r2, #6
 80060e8:	f7fa f89a 	bl	8000220 <memchr>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	d036      	beq.n	800615e <_svfiprintf_r+0x1d2>
 80060f0:	4b21      	ldr	r3, [pc, #132]	@ (8006178 <_svfiprintf_r+0x1ec>)
 80060f2:	bb1b      	cbnz	r3, 800613c <_svfiprintf_r+0x1b0>
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	3307      	adds	r3, #7
 80060f8:	f023 0307 	bic.w	r3, r3, #7
 80060fc:	3308      	adds	r3, #8
 80060fe:	9303      	str	r3, [sp, #12]
 8006100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006102:	4433      	add	r3, r6
 8006104:	9309      	str	r3, [sp, #36]	@ 0x24
 8006106:	e76a      	b.n	8005fde <_svfiprintf_r+0x52>
 8006108:	fb0c 3202 	mla	r2, ip, r2, r3
 800610c:	460c      	mov	r4, r1
 800610e:	2001      	movs	r0, #1
 8006110:	e7a8      	b.n	8006064 <_svfiprintf_r+0xd8>
 8006112:	2300      	movs	r3, #0
 8006114:	3401      	adds	r4, #1
 8006116:	9305      	str	r3, [sp, #20]
 8006118:	4619      	mov	r1, r3
 800611a:	f04f 0c0a 	mov.w	ip, #10
 800611e:	4620      	mov	r0, r4
 8006120:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006124:	3a30      	subs	r2, #48	@ 0x30
 8006126:	2a09      	cmp	r2, #9
 8006128:	d903      	bls.n	8006132 <_svfiprintf_r+0x1a6>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0c6      	beq.n	80060bc <_svfiprintf_r+0x130>
 800612e:	9105      	str	r1, [sp, #20]
 8006130:	e7c4      	b.n	80060bc <_svfiprintf_r+0x130>
 8006132:	fb0c 2101 	mla	r1, ip, r1, r2
 8006136:	4604      	mov	r4, r0
 8006138:	2301      	movs	r3, #1
 800613a:	e7f0      	b.n	800611e <_svfiprintf_r+0x192>
 800613c:	ab03      	add	r3, sp, #12
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	462a      	mov	r2, r5
 8006142:	4b0e      	ldr	r3, [pc, #56]	@ (800617c <_svfiprintf_r+0x1f0>)
 8006144:	a904      	add	r1, sp, #16
 8006146:	4638      	mov	r0, r7
 8006148:	f3af 8000 	nop.w
 800614c:	1c42      	adds	r2, r0, #1
 800614e:	4606      	mov	r6, r0
 8006150:	d1d6      	bne.n	8006100 <_svfiprintf_r+0x174>
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	065b      	lsls	r3, r3, #25
 8006156:	f53f af2d 	bmi.w	8005fb4 <_svfiprintf_r+0x28>
 800615a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800615c:	e72c      	b.n	8005fb8 <_svfiprintf_r+0x2c>
 800615e:	ab03      	add	r3, sp, #12
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	462a      	mov	r2, r5
 8006164:	4b05      	ldr	r3, [pc, #20]	@ (800617c <_svfiprintf_r+0x1f0>)
 8006166:	a904      	add	r1, sp, #16
 8006168:	4638      	mov	r0, r7
 800616a:	f000 f879 	bl	8006260 <_printf_i>
 800616e:	e7ed      	b.n	800614c <_svfiprintf_r+0x1c0>
 8006170:	080076a8 	.word	0x080076a8
 8006174:	080076b2 	.word	0x080076b2
 8006178:	00000000 	.word	0x00000000
 800617c:	08005ed5 	.word	0x08005ed5
 8006180:	080076ae 	.word	0x080076ae

08006184 <_printf_common>:
 8006184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006188:	4616      	mov	r6, r2
 800618a:	4698      	mov	r8, r3
 800618c:	688a      	ldr	r2, [r1, #8]
 800618e:	690b      	ldr	r3, [r1, #16]
 8006190:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006194:	4293      	cmp	r3, r2
 8006196:	bfb8      	it	lt
 8006198:	4613      	movlt	r3, r2
 800619a:	6033      	str	r3, [r6, #0]
 800619c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061a0:	4607      	mov	r7, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	b10a      	cbz	r2, 80061aa <_printf_common+0x26>
 80061a6:	3301      	adds	r3, #1
 80061a8:	6033      	str	r3, [r6, #0]
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	0699      	lsls	r1, r3, #26
 80061ae:	bf42      	ittt	mi
 80061b0:	6833      	ldrmi	r3, [r6, #0]
 80061b2:	3302      	addmi	r3, #2
 80061b4:	6033      	strmi	r3, [r6, #0]
 80061b6:	6825      	ldr	r5, [r4, #0]
 80061b8:	f015 0506 	ands.w	r5, r5, #6
 80061bc:	d106      	bne.n	80061cc <_printf_common+0x48>
 80061be:	f104 0a19 	add.w	sl, r4, #25
 80061c2:	68e3      	ldr	r3, [r4, #12]
 80061c4:	6832      	ldr	r2, [r6, #0]
 80061c6:	1a9b      	subs	r3, r3, r2
 80061c8:	42ab      	cmp	r3, r5
 80061ca:	dc26      	bgt.n	800621a <_printf_common+0x96>
 80061cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061d0:	6822      	ldr	r2, [r4, #0]
 80061d2:	3b00      	subs	r3, #0
 80061d4:	bf18      	it	ne
 80061d6:	2301      	movne	r3, #1
 80061d8:	0692      	lsls	r2, r2, #26
 80061da:	d42b      	bmi.n	8006234 <_printf_common+0xb0>
 80061dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061e0:	4641      	mov	r1, r8
 80061e2:	4638      	mov	r0, r7
 80061e4:	47c8      	blx	r9
 80061e6:	3001      	adds	r0, #1
 80061e8:	d01e      	beq.n	8006228 <_printf_common+0xa4>
 80061ea:	6823      	ldr	r3, [r4, #0]
 80061ec:	6922      	ldr	r2, [r4, #16]
 80061ee:	f003 0306 	and.w	r3, r3, #6
 80061f2:	2b04      	cmp	r3, #4
 80061f4:	bf02      	ittt	eq
 80061f6:	68e5      	ldreq	r5, [r4, #12]
 80061f8:	6833      	ldreq	r3, [r6, #0]
 80061fa:	1aed      	subeq	r5, r5, r3
 80061fc:	68a3      	ldr	r3, [r4, #8]
 80061fe:	bf0c      	ite	eq
 8006200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006204:	2500      	movne	r5, #0
 8006206:	4293      	cmp	r3, r2
 8006208:	bfc4      	itt	gt
 800620a:	1a9b      	subgt	r3, r3, r2
 800620c:	18ed      	addgt	r5, r5, r3
 800620e:	2600      	movs	r6, #0
 8006210:	341a      	adds	r4, #26
 8006212:	42b5      	cmp	r5, r6
 8006214:	d11a      	bne.n	800624c <_printf_common+0xc8>
 8006216:	2000      	movs	r0, #0
 8006218:	e008      	b.n	800622c <_printf_common+0xa8>
 800621a:	2301      	movs	r3, #1
 800621c:	4652      	mov	r2, sl
 800621e:	4641      	mov	r1, r8
 8006220:	4638      	mov	r0, r7
 8006222:	47c8      	blx	r9
 8006224:	3001      	adds	r0, #1
 8006226:	d103      	bne.n	8006230 <_printf_common+0xac>
 8006228:	f04f 30ff 	mov.w	r0, #4294967295
 800622c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006230:	3501      	adds	r5, #1
 8006232:	e7c6      	b.n	80061c2 <_printf_common+0x3e>
 8006234:	18e1      	adds	r1, r4, r3
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	2030      	movs	r0, #48	@ 0x30
 800623a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800623e:	4422      	add	r2, r4
 8006240:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006244:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006248:	3302      	adds	r3, #2
 800624a:	e7c7      	b.n	80061dc <_printf_common+0x58>
 800624c:	2301      	movs	r3, #1
 800624e:	4622      	mov	r2, r4
 8006250:	4641      	mov	r1, r8
 8006252:	4638      	mov	r0, r7
 8006254:	47c8      	blx	r9
 8006256:	3001      	adds	r0, #1
 8006258:	d0e6      	beq.n	8006228 <_printf_common+0xa4>
 800625a:	3601      	adds	r6, #1
 800625c:	e7d9      	b.n	8006212 <_printf_common+0x8e>
	...

08006260 <_printf_i>:
 8006260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	7e0f      	ldrb	r7, [r1, #24]
 8006266:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006268:	2f78      	cmp	r7, #120	@ 0x78
 800626a:	4691      	mov	r9, r2
 800626c:	4680      	mov	r8, r0
 800626e:	460c      	mov	r4, r1
 8006270:	469a      	mov	sl, r3
 8006272:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006276:	d807      	bhi.n	8006288 <_printf_i+0x28>
 8006278:	2f62      	cmp	r7, #98	@ 0x62
 800627a:	d80a      	bhi.n	8006292 <_printf_i+0x32>
 800627c:	2f00      	cmp	r7, #0
 800627e:	f000 80d1 	beq.w	8006424 <_printf_i+0x1c4>
 8006282:	2f58      	cmp	r7, #88	@ 0x58
 8006284:	f000 80b8 	beq.w	80063f8 <_printf_i+0x198>
 8006288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800628c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006290:	e03a      	b.n	8006308 <_printf_i+0xa8>
 8006292:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006296:	2b15      	cmp	r3, #21
 8006298:	d8f6      	bhi.n	8006288 <_printf_i+0x28>
 800629a:	a101      	add	r1, pc, #4	@ (adr r1, 80062a0 <_printf_i+0x40>)
 800629c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062a0:	080062f9 	.word	0x080062f9
 80062a4:	0800630d 	.word	0x0800630d
 80062a8:	08006289 	.word	0x08006289
 80062ac:	08006289 	.word	0x08006289
 80062b0:	08006289 	.word	0x08006289
 80062b4:	08006289 	.word	0x08006289
 80062b8:	0800630d 	.word	0x0800630d
 80062bc:	08006289 	.word	0x08006289
 80062c0:	08006289 	.word	0x08006289
 80062c4:	08006289 	.word	0x08006289
 80062c8:	08006289 	.word	0x08006289
 80062cc:	0800640b 	.word	0x0800640b
 80062d0:	08006337 	.word	0x08006337
 80062d4:	080063c5 	.word	0x080063c5
 80062d8:	08006289 	.word	0x08006289
 80062dc:	08006289 	.word	0x08006289
 80062e0:	0800642d 	.word	0x0800642d
 80062e4:	08006289 	.word	0x08006289
 80062e8:	08006337 	.word	0x08006337
 80062ec:	08006289 	.word	0x08006289
 80062f0:	08006289 	.word	0x08006289
 80062f4:	080063cd 	.word	0x080063cd
 80062f8:	6833      	ldr	r3, [r6, #0]
 80062fa:	1d1a      	adds	r2, r3, #4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	6032      	str	r2, [r6, #0]
 8006300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006304:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006308:	2301      	movs	r3, #1
 800630a:	e09c      	b.n	8006446 <_printf_i+0x1e6>
 800630c:	6833      	ldr	r3, [r6, #0]
 800630e:	6820      	ldr	r0, [r4, #0]
 8006310:	1d19      	adds	r1, r3, #4
 8006312:	6031      	str	r1, [r6, #0]
 8006314:	0606      	lsls	r6, r0, #24
 8006316:	d501      	bpl.n	800631c <_printf_i+0xbc>
 8006318:	681d      	ldr	r5, [r3, #0]
 800631a:	e003      	b.n	8006324 <_printf_i+0xc4>
 800631c:	0645      	lsls	r5, r0, #25
 800631e:	d5fb      	bpl.n	8006318 <_printf_i+0xb8>
 8006320:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006324:	2d00      	cmp	r5, #0
 8006326:	da03      	bge.n	8006330 <_printf_i+0xd0>
 8006328:	232d      	movs	r3, #45	@ 0x2d
 800632a:	426d      	negs	r5, r5
 800632c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006330:	4858      	ldr	r0, [pc, #352]	@ (8006494 <_printf_i+0x234>)
 8006332:	230a      	movs	r3, #10
 8006334:	e011      	b.n	800635a <_printf_i+0xfa>
 8006336:	6821      	ldr	r1, [r4, #0]
 8006338:	6833      	ldr	r3, [r6, #0]
 800633a:	0608      	lsls	r0, r1, #24
 800633c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006340:	d402      	bmi.n	8006348 <_printf_i+0xe8>
 8006342:	0649      	lsls	r1, r1, #25
 8006344:	bf48      	it	mi
 8006346:	b2ad      	uxthmi	r5, r5
 8006348:	2f6f      	cmp	r7, #111	@ 0x6f
 800634a:	4852      	ldr	r0, [pc, #328]	@ (8006494 <_printf_i+0x234>)
 800634c:	6033      	str	r3, [r6, #0]
 800634e:	bf14      	ite	ne
 8006350:	230a      	movne	r3, #10
 8006352:	2308      	moveq	r3, #8
 8006354:	2100      	movs	r1, #0
 8006356:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800635a:	6866      	ldr	r6, [r4, #4]
 800635c:	60a6      	str	r6, [r4, #8]
 800635e:	2e00      	cmp	r6, #0
 8006360:	db05      	blt.n	800636e <_printf_i+0x10e>
 8006362:	6821      	ldr	r1, [r4, #0]
 8006364:	432e      	orrs	r6, r5
 8006366:	f021 0104 	bic.w	r1, r1, #4
 800636a:	6021      	str	r1, [r4, #0]
 800636c:	d04b      	beq.n	8006406 <_printf_i+0x1a6>
 800636e:	4616      	mov	r6, r2
 8006370:	fbb5 f1f3 	udiv	r1, r5, r3
 8006374:	fb03 5711 	mls	r7, r3, r1, r5
 8006378:	5dc7      	ldrb	r7, [r0, r7]
 800637a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800637e:	462f      	mov	r7, r5
 8006380:	42bb      	cmp	r3, r7
 8006382:	460d      	mov	r5, r1
 8006384:	d9f4      	bls.n	8006370 <_printf_i+0x110>
 8006386:	2b08      	cmp	r3, #8
 8006388:	d10b      	bne.n	80063a2 <_printf_i+0x142>
 800638a:	6823      	ldr	r3, [r4, #0]
 800638c:	07df      	lsls	r7, r3, #31
 800638e:	d508      	bpl.n	80063a2 <_printf_i+0x142>
 8006390:	6923      	ldr	r3, [r4, #16]
 8006392:	6861      	ldr	r1, [r4, #4]
 8006394:	4299      	cmp	r1, r3
 8006396:	bfde      	ittt	le
 8006398:	2330      	movle	r3, #48	@ 0x30
 800639a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800639e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063a2:	1b92      	subs	r2, r2, r6
 80063a4:	6122      	str	r2, [r4, #16]
 80063a6:	f8cd a000 	str.w	sl, [sp]
 80063aa:	464b      	mov	r3, r9
 80063ac:	aa03      	add	r2, sp, #12
 80063ae:	4621      	mov	r1, r4
 80063b0:	4640      	mov	r0, r8
 80063b2:	f7ff fee7 	bl	8006184 <_printf_common>
 80063b6:	3001      	adds	r0, #1
 80063b8:	d14a      	bne.n	8006450 <_printf_i+0x1f0>
 80063ba:	f04f 30ff 	mov.w	r0, #4294967295
 80063be:	b004      	add	sp, #16
 80063c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	f043 0320 	orr.w	r3, r3, #32
 80063ca:	6023      	str	r3, [r4, #0]
 80063cc:	4832      	ldr	r0, [pc, #200]	@ (8006498 <_printf_i+0x238>)
 80063ce:	2778      	movs	r7, #120	@ 0x78
 80063d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	6831      	ldr	r1, [r6, #0]
 80063d8:	061f      	lsls	r7, r3, #24
 80063da:	f851 5b04 	ldr.w	r5, [r1], #4
 80063de:	d402      	bmi.n	80063e6 <_printf_i+0x186>
 80063e0:	065f      	lsls	r7, r3, #25
 80063e2:	bf48      	it	mi
 80063e4:	b2ad      	uxthmi	r5, r5
 80063e6:	6031      	str	r1, [r6, #0]
 80063e8:	07d9      	lsls	r1, r3, #31
 80063ea:	bf44      	itt	mi
 80063ec:	f043 0320 	orrmi.w	r3, r3, #32
 80063f0:	6023      	strmi	r3, [r4, #0]
 80063f2:	b11d      	cbz	r5, 80063fc <_printf_i+0x19c>
 80063f4:	2310      	movs	r3, #16
 80063f6:	e7ad      	b.n	8006354 <_printf_i+0xf4>
 80063f8:	4826      	ldr	r0, [pc, #152]	@ (8006494 <_printf_i+0x234>)
 80063fa:	e7e9      	b.n	80063d0 <_printf_i+0x170>
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	f023 0320 	bic.w	r3, r3, #32
 8006402:	6023      	str	r3, [r4, #0]
 8006404:	e7f6      	b.n	80063f4 <_printf_i+0x194>
 8006406:	4616      	mov	r6, r2
 8006408:	e7bd      	b.n	8006386 <_printf_i+0x126>
 800640a:	6833      	ldr	r3, [r6, #0]
 800640c:	6825      	ldr	r5, [r4, #0]
 800640e:	6961      	ldr	r1, [r4, #20]
 8006410:	1d18      	adds	r0, r3, #4
 8006412:	6030      	str	r0, [r6, #0]
 8006414:	062e      	lsls	r6, r5, #24
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	d501      	bpl.n	800641e <_printf_i+0x1be>
 800641a:	6019      	str	r1, [r3, #0]
 800641c:	e002      	b.n	8006424 <_printf_i+0x1c4>
 800641e:	0668      	lsls	r0, r5, #25
 8006420:	d5fb      	bpl.n	800641a <_printf_i+0x1ba>
 8006422:	8019      	strh	r1, [r3, #0]
 8006424:	2300      	movs	r3, #0
 8006426:	6123      	str	r3, [r4, #16]
 8006428:	4616      	mov	r6, r2
 800642a:	e7bc      	b.n	80063a6 <_printf_i+0x146>
 800642c:	6833      	ldr	r3, [r6, #0]
 800642e:	1d1a      	adds	r2, r3, #4
 8006430:	6032      	str	r2, [r6, #0]
 8006432:	681e      	ldr	r6, [r3, #0]
 8006434:	6862      	ldr	r2, [r4, #4]
 8006436:	2100      	movs	r1, #0
 8006438:	4630      	mov	r0, r6
 800643a:	f7f9 fef1 	bl	8000220 <memchr>
 800643e:	b108      	cbz	r0, 8006444 <_printf_i+0x1e4>
 8006440:	1b80      	subs	r0, r0, r6
 8006442:	6060      	str	r0, [r4, #4]
 8006444:	6863      	ldr	r3, [r4, #4]
 8006446:	6123      	str	r3, [r4, #16]
 8006448:	2300      	movs	r3, #0
 800644a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800644e:	e7aa      	b.n	80063a6 <_printf_i+0x146>
 8006450:	6923      	ldr	r3, [r4, #16]
 8006452:	4632      	mov	r2, r6
 8006454:	4649      	mov	r1, r9
 8006456:	4640      	mov	r0, r8
 8006458:	47d0      	blx	sl
 800645a:	3001      	adds	r0, #1
 800645c:	d0ad      	beq.n	80063ba <_printf_i+0x15a>
 800645e:	6823      	ldr	r3, [r4, #0]
 8006460:	079b      	lsls	r3, r3, #30
 8006462:	d413      	bmi.n	800648c <_printf_i+0x22c>
 8006464:	68e0      	ldr	r0, [r4, #12]
 8006466:	9b03      	ldr	r3, [sp, #12]
 8006468:	4298      	cmp	r0, r3
 800646a:	bfb8      	it	lt
 800646c:	4618      	movlt	r0, r3
 800646e:	e7a6      	b.n	80063be <_printf_i+0x15e>
 8006470:	2301      	movs	r3, #1
 8006472:	4632      	mov	r2, r6
 8006474:	4649      	mov	r1, r9
 8006476:	4640      	mov	r0, r8
 8006478:	47d0      	blx	sl
 800647a:	3001      	adds	r0, #1
 800647c:	d09d      	beq.n	80063ba <_printf_i+0x15a>
 800647e:	3501      	adds	r5, #1
 8006480:	68e3      	ldr	r3, [r4, #12]
 8006482:	9903      	ldr	r1, [sp, #12]
 8006484:	1a5b      	subs	r3, r3, r1
 8006486:	42ab      	cmp	r3, r5
 8006488:	dcf2      	bgt.n	8006470 <_printf_i+0x210>
 800648a:	e7eb      	b.n	8006464 <_printf_i+0x204>
 800648c:	2500      	movs	r5, #0
 800648e:	f104 0619 	add.w	r6, r4, #25
 8006492:	e7f5      	b.n	8006480 <_printf_i+0x220>
 8006494:	080076b9 	.word	0x080076b9
 8006498:	080076ca 	.word	0x080076ca

0800649c <memmove>:
 800649c:	4288      	cmp	r0, r1
 800649e:	b510      	push	{r4, lr}
 80064a0:	eb01 0402 	add.w	r4, r1, r2
 80064a4:	d902      	bls.n	80064ac <memmove+0x10>
 80064a6:	4284      	cmp	r4, r0
 80064a8:	4623      	mov	r3, r4
 80064aa:	d807      	bhi.n	80064bc <memmove+0x20>
 80064ac:	1e43      	subs	r3, r0, #1
 80064ae:	42a1      	cmp	r1, r4
 80064b0:	d008      	beq.n	80064c4 <memmove+0x28>
 80064b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064ba:	e7f8      	b.n	80064ae <memmove+0x12>
 80064bc:	4402      	add	r2, r0
 80064be:	4601      	mov	r1, r0
 80064c0:	428a      	cmp	r2, r1
 80064c2:	d100      	bne.n	80064c6 <memmove+0x2a>
 80064c4:	bd10      	pop	{r4, pc}
 80064c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064ce:	e7f7      	b.n	80064c0 <memmove+0x24>

080064d0 <_sbrk_r>:
 80064d0:	b538      	push	{r3, r4, r5, lr}
 80064d2:	4d06      	ldr	r5, [pc, #24]	@ (80064ec <_sbrk_r+0x1c>)
 80064d4:	2300      	movs	r3, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	602b      	str	r3, [r5, #0]
 80064dc:	f7fc f8a2 	bl	8002624 <_sbrk>
 80064e0:	1c43      	adds	r3, r0, #1
 80064e2:	d102      	bne.n	80064ea <_sbrk_r+0x1a>
 80064e4:	682b      	ldr	r3, [r5, #0]
 80064e6:	b103      	cbz	r3, 80064ea <_sbrk_r+0x1a>
 80064e8:	6023      	str	r3, [r4, #0]
 80064ea:	bd38      	pop	{r3, r4, r5, pc}
 80064ec:	2000032c 	.word	0x2000032c

080064f0 <_realloc_r>:
 80064f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064f4:	4607      	mov	r7, r0
 80064f6:	4614      	mov	r4, r2
 80064f8:	460d      	mov	r5, r1
 80064fa:	b921      	cbnz	r1, 8006506 <_realloc_r+0x16>
 80064fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	4611      	mov	r1, r2
 8006502:	f7ff bc5b 	b.w	8005dbc <_malloc_r>
 8006506:	b92a      	cbnz	r2, 8006514 <_realloc_r+0x24>
 8006508:	f7ff fbec 	bl	8005ce4 <_free_r>
 800650c:	4625      	mov	r5, r4
 800650e:	4628      	mov	r0, r5
 8006510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006514:	f000 f81a 	bl	800654c <_malloc_usable_size_r>
 8006518:	4284      	cmp	r4, r0
 800651a:	4606      	mov	r6, r0
 800651c:	d802      	bhi.n	8006524 <_realloc_r+0x34>
 800651e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006522:	d8f4      	bhi.n	800650e <_realloc_r+0x1e>
 8006524:	4621      	mov	r1, r4
 8006526:	4638      	mov	r0, r7
 8006528:	f7ff fc48 	bl	8005dbc <_malloc_r>
 800652c:	4680      	mov	r8, r0
 800652e:	b908      	cbnz	r0, 8006534 <_realloc_r+0x44>
 8006530:	4645      	mov	r5, r8
 8006532:	e7ec      	b.n	800650e <_realloc_r+0x1e>
 8006534:	42b4      	cmp	r4, r6
 8006536:	4622      	mov	r2, r4
 8006538:	4629      	mov	r1, r5
 800653a:	bf28      	it	cs
 800653c:	4632      	movcs	r2, r6
 800653e:	f7ff fbc3 	bl	8005cc8 <memcpy>
 8006542:	4629      	mov	r1, r5
 8006544:	4638      	mov	r0, r7
 8006546:	f7ff fbcd 	bl	8005ce4 <_free_r>
 800654a:	e7f1      	b.n	8006530 <_realloc_r+0x40>

0800654c <_malloc_usable_size_r>:
 800654c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006550:	1f18      	subs	r0, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	bfbc      	itt	lt
 8006556:	580b      	ldrlt	r3, [r1, r0]
 8006558:	18c0      	addlt	r0, r0, r3
 800655a:	4770      	bx	lr
 800655c:	0000      	movs	r0, r0
	...

08006560 <cos>:
 8006560:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006562:	ec53 2b10 	vmov	r2, r3, d0
 8006566:	4826      	ldr	r0, [pc, #152]	@ (8006600 <cos+0xa0>)
 8006568:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800656c:	4281      	cmp	r1, r0
 800656e:	d806      	bhi.n	800657e <cos+0x1e>
 8006570:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80065f8 <cos+0x98>
 8006574:	b005      	add	sp, #20
 8006576:	f85d eb04 	ldr.w	lr, [sp], #4
 800657a:	f000 b899 	b.w	80066b0 <__kernel_cos>
 800657e:	4821      	ldr	r0, [pc, #132]	@ (8006604 <cos+0xa4>)
 8006580:	4281      	cmp	r1, r0
 8006582:	d908      	bls.n	8006596 <cos+0x36>
 8006584:	4610      	mov	r0, r2
 8006586:	4619      	mov	r1, r3
 8006588:	f7f9 fe9e 	bl	80002c8 <__aeabi_dsub>
 800658c:	ec41 0b10 	vmov	d0, r0, r1
 8006590:	b005      	add	sp, #20
 8006592:	f85d fb04 	ldr.w	pc, [sp], #4
 8006596:	4668      	mov	r0, sp
 8006598:	f000 fa0e 	bl	80069b8 <__ieee754_rem_pio2>
 800659c:	f000 0003 	and.w	r0, r0, #3
 80065a0:	2801      	cmp	r0, #1
 80065a2:	d00b      	beq.n	80065bc <cos+0x5c>
 80065a4:	2802      	cmp	r0, #2
 80065a6:	d015      	beq.n	80065d4 <cos+0x74>
 80065a8:	b9d8      	cbnz	r0, 80065e2 <cos+0x82>
 80065aa:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065ae:	ed9d 0b00 	vldr	d0, [sp]
 80065b2:	f000 f87d 	bl	80066b0 <__kernel_cos>
 80065b6:	ec51 0b10 	vmov	r0, r1, d0
 80065ba:	e7e7      	b.n	800658c <cos+0x2c>
 80065bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065c0:	ed9d 0b00 	vldr	d0, [sp]
 80065c4:	f000 f93c 	bl	8006840 <__kernel_sin>
 80065c8:	ec53 2b10 	vmov	r2, r3, d0
 80065cc:	4610      	mov	r0, r2
 80065ce:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80065d2:	e7db      	b.n	800658c <cos+0x2c>
 80065d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065d8:	ed9d 0b00 	vldr	d0, [sp]
 80065dc:	f000 f868 	bl	80066b0 <__kernel_cos>
 80065e0:	e7f2      	b.n	80065c8 <cos+0x68>
 80065e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80065e6:	ed9d 0b00 	vldr	d0, [sp]
 80065ea:	2001      	movs	r0, #1
 80065ec:	f000 f928 	bl	8006840 <__kernel_sin>
 80065f0:	e7e1      	b.n	80065b6 <cos+0x56>
 80065f2:	bf00      	nop
 80065f4:	f3af 8000 	nop.w
	...
 8006600:	3fe921fb 	.word	0x3fe921fb
 8006604:	7fefffff 	.word	0x7fefffff

08006608 <sin>:
 8006608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800660a:	ec53 2b10 	vmov	r2, r3, d0
 800660e:	4826      	ldr	r0, [pc, #152]	@ (80066a8 <sin+0xa0>)
 8006610:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006614:	4281      	cmp	r1, r0
 8006616:	d807      	bhi.n	8006628 <sin+0x20>
 8006618:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80066a0 <sin+0x98>
 800661c:	2000      	movs	r0, #0
 800661e:	b005      	add	sp, #20
 8006620:	f85d eb04 	ldr.w	lr, [sp], #4
 8006624:	f000 b90c 	b.w	8006840 <__kernel_sin>
 8006628:	4820      	ldr	r0, [pc, #128]	@ (80066ac <sin+0xa4>)
 800662a:	4281      	cmp	r1, r0
 800662c:	d908      	bls.n	8006640 <sin+0x38>
 800662e:	4610      	mov	r0, r2
 8006630:	4619      	mov	r1, r3
 8006632:	f7f9 fe49 	bl	80002c8 <__aeabi_dsub>
 8006636:	ec41 0b10 	vmov	d0, r0, r1
 800663a:	b005      	add	sp, #20
 800663c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006640:	4668      	mov	r0, sp
 8006642:	f000 f9b9 	bl	80069b8 <__ieee754_rem_pio2>
 8006646:	f000 0003 	and.w	r0, r0, #3
 800664a:	2801      	cmp	r0, #1
 800664c:	d00c      	beq.n	8006668 <sin+0x60>
 800664e:	2802      	cmp	r0, #2
 8006650:	d011      	beq.n	8006676 <sin+0x6e>
 8006652:	b9e8      	cbnz	r0, 8006690 <sin+0x88>
 8006654:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006658:	ed9d 0b00 	vldr	d0, [sp]
 800665c:	2001      	movs	r0, #1
 800665e:	f000 f8ef 	bl	8006840 <__kernel_sin>
 8006662:	ec51 0b10 	vmov	r0, r1, d0
 8006666:	e7e6      	b.n	8006636 <sin+0x2e>
 8006668:	ed9d 1b02 	vldr	d1, [sp, #8]
 800666c:	ed9d 0b00 	vldr	d0, [sp]
 8006670:	f000 f81e 	bl	80066b0 <__kernel_cos>
 8006674:	e7f5      	b.n	8006662 <sin+0x5a>
 8006676:	ed9d 1b02 	vldr	d1, [sp, #8]
 800667a:	ed9d 0b00 	vldr	d0, [sp]
 800667e:	2001      	movs	r0, #1
 8006680:	f000 f8de 	bl	8006840 <__kernel_sin>
 8006684:	ec53 2b10 	vmov	r2, r3, d0
 8006688:	4610      	mov	r0, r2
 800668a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800668e:	e7d2      	b.n	8006636 <sin+0x2e>
 8006690:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006694:	ed9d 0b00 	vldr	d0, [sp]
 8006698:	f000 f80a 	bl	80066b0 <__kernel_cos>
 800669c:	e7f2      	b.n	8006684 <sin+0x7c>
 800669e:	bf00      	nop
	...
 80066a8:	3fe921fb 	.word	0x3fe921fb
 80066ac:	7fefffff 	.word	0x7fefffff

080066b0 <__kernel_cos>:
 80066b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b4:	ec57 6b10 	vmov	r6, r7, d0
 80066b8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80066bc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80066c0:	ed8d 1b00 	vstr	d1, [sp]
 80066c4:	d206      	bcs.n	80066d4 <__kernel_cos+0x24>
 80066c6:	4630      	mov	r0, r6
 80066c8:	4639      	mov	r1, r7
 80066ca:	f7fa fa4f 	bl	8000b6c <__aeabi_d2iz>
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f000 8088 	beq.w	80067e4 <__kernel_cos+0x134>
 80066d4:	4632      	mov	r2, r6
 80066d6:	463b      	mov	r3, r7
 80066d8:	4630      	mov	r0, r6
 80066da:	4639      	mov	r1, r7
 80066dc:	f7f9 ffac 	bl	8000638 <__aeabi_dmul>
 80066e0:	4b51      	ldr	r3, [pc, #324]	@ (8006828 <__kernel_cos+0x178>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	4604      	mov	r4, r0
 80066e6:	460d      	mov	r5, r1
 80066e8:	f7f9 ffa6 	bl	8000638 <__aeabi_dmul>
 80066ec:	a340      	add	r3, pc, #256	@ (adr r3, 80067f0 <__kernel_cos+0x140>)
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	4682      	mov	sl, r0
 80066f4:	468b      	mov	fp, r1
 80066f6:	4620      	mov	r0, r4
 80066f8:	4629      	mov	r1, r5
 80066fa:	f7f9 ff9d 	bl	8000638 <__aeabi_dmul>
 80066fe:	a33e      	add	r3, pc, #248	@ (adr r3, 80067f8 <__kernel_cos+0x148>)
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	f7f9 fde2 	bl	80002cc <__adddf3>
 8006708:	4622      	mov	r2, r4
 800670a:	462b      	mov	r3, r5
 800670c:	f7f9 ff94 	bl	8000638 <__aeabi_dmul>
 8006710:	a33b      	add	r3, pc, #236	@ (adr r3, 8006800 <__kernel_cos+0x150>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7f9 fdd7 	bl	80002c8 <__aeabi_dsub>
 800671a:	4622      	mov	r2, r4
 800671c:	462b      	mov	r3, r5
 800671e:	f7f9 ff8b 	bl	8000638 <__aeabi_dmul>
 8006722:	a339      	add	r3, pc, #228	@ (adr r3, 8006808 <__kernel_cos+0x158>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f7f9 fdd0 	bl	80002cc <__adddf3>
 800672c:	4622      	mov	r2, r4
 800672e:	462b      	mov	r3, r5
 8006730:	f7f9 ff82 	bl	8000638 <__aeabi_dmul>
 8006734:	a336      	add	r3, pc, #216	@ (adr r3, 8006810 <__kernel_cos+0x160>)
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f7f9 fdc5 	bl	80002c8 <__aeabi_dsub>
 800673e:	4622      	mov	r2, r4
 8006740:	462b      	mov	r3, r5
 8006742:	f7f9 ff79 	bl	8000638 <__aeabi_dmul>
 8006746:	a334      	add	r3, pc, #208	@ (adr r3, 8006818 <__kernel_cos+0x168>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f7f9 fdbe 	bl	80002cc <__adddf3>
 8006750:	4622      	mov	r2, r4
 8006752:	462b      	mov	r3, r5
 8006754:	f7f9 ff70 	bl	8000638 <__aeabi_dmul>
 8006758:	4622      	mov	r2, r4
 800675a:	462b      	mov	r3, r5
 800675c:	f7f9 ff6c 	bl	8000638 <__aeabi_dmul>
 8006760:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006764:	4604      	mov	r4, r0
 8006766:	460d      	mov	r5, r1
 8006768:	4630      	mov	r0, r6
 800676a:	4639      	mov	r1, r7
 800676c:	f7f9 ff64 	bl	8000638 <__aeabi_dmul>
 8006770:	460b      	mov	r3, r1
 8006772:	4602      	mov	r2, r0
 8006774:	4629      	mov	r1, r5
 8006776:	4620      	mov	r0, r4
 8006778:	f7f9 fda6 	bl	80002c8 <__aeabi_dsub>
 800677c:	4b2b      	ldr	r3, [pc, #172]	@ (800682c <__kernel_cos+0x17c>)
 800677e:	4598      	cmp	r8, r3
 8006780:	4606      	mov	r6, r0
 8006782:	460f      	mov	r7, r1
 8006784:	d810      	bhi.n	80067a8 <__kernel_cos+0xf8>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4650      	mov	r0, sl
 800678c:	4659      	mov	r1, fp
 800678e:	f7f9 fd9b 	bl	80002c8 <__aeabi_dsub>
 8006792:	460b      	mov	r3, r1
 8006794:	4926      	ldr	r1, [pc, #152]	@ (8006830 <__kernel_cos+0x180>)
 8006796:	4602      	mov	r2, r0
 8006798:	2000      	movs	r0, #0
 800679a:	f7f9 fd95 	bl	80002c8 <__aeabi_dsub>
 800679e:	ec41 0b10 	vmov	d0, r0, r1
 80067a2:	b003      	add	sp, #12
 80067a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067a8:	4b22      	ldr	r3, [pc, #136]	@ (8006834 <__kernel_cos+0x184>)
 80067aa:	4921      	ldr	r1, [pc, #132]	@ (8006830 <__kernel_cos+0x180>)
 80067ac:	4598      	cmp	r8, r3
 80067ae:	bf8c      	ite	hi
 80067b0:	4d21      	ldrhi	r5, [pc, #132]	@ (8006838 <__kernel_cos+0x188>)
 80067b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80067b6:	2400      	movs	r4, #0
 80067b8:	4622      	mov	r2, r4
 80067ba:	462b      	mov	r3, r5
 80067bc:	2000      	movs	r0, #0
 80067be:	f7f9 fd83 	bl	80002c8 <__aeabi_dsub>
 80067c2:	4622      	mov	r2, r4
 80067c4:	4680      	mov	r8, r0
 80067c6:	4689      	mov	r9, r1
 80067c8:	462b      	mov	r3, r5
 80067ca:	4650      	mov	r0, sl
 80067cc:	4659      	mov	r1, fp
 80067ce:	f7f9 fd7b 	bl	80002c8 <__aeabi_dsub>
 80067d2:	4632      	mov	r2, r6
 80067d4:	463b      	mov	r3, r7
 80067d6:	f7f9 fd77 	bl	80002c8 <__aeabi_dsub>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4640      	mov	r0, r8
 80067e0:	4649      	mov	r1, r9
 80067e2:	e7da      	b.n	800679a <__kernel_cos+0xea>
 80067e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8006820 <__kernel_cos+0x170>
 80067e8:	e7db      	b.n	80067a2 <__kernel_cos+0xf2>
 80067ea:	bf00      	nop
 80067ec:	f3af 8000 	nop.w
 80067f0:	be8838d4 	.word	0xbe8838d4
 80067f4:	bda8fae9 	.word	0xbda8fae9
 80067f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80067fc:	3e21ee9e 	.word	0x3e21ee9e
 8006800:	809c52ad 	.word	0x809c52ad
 8006804:	3e927e4f 	.word	0x3e927e4f
 8006808:	19cb1590 	.word	0x19cb1590
 800680c:	3efa01a0 	.word	0x3efa01a0
 8006810:	16c15177 	.word	0x16c15177
 8006814:	3f56c16c 	.word	0x3f56c16c
 8006818:	5555554c 	.word	0x5555554c
 800681c:	3fa55555 	.word	0x3fa55555
 8006820:	00000000 	.word	0x00000000
 8006824:	3ff00000 	.word	0x3ff00000
 8006828:	3fe00000 	.word	0x3fe00000
 800682c:	3fd33332 	.word	0x3fd33332
 8006830:	3ff00000 	.word	0x3ff00000
 8006834:	3fe90000 	.word	0x3fe90000
 8006838:	3fd20000 	.word	0x3fd20000
 800683c:	00000000 	.word	0x00000000

08006840 <__kernel_sin>:
 8006840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006844:	ec55 4b10 	vmov	r4, r5, d0
 8006848:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800684c:	b085      	sub	sp, #20
 800684e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006852:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006856:	4680      	mov	r8, r0
 8006858:	d205      	bcs.n	8006866 <__kernel_sin+0x26>
 800685a:	4620      	mov	r0, r4
 800685c:	4629      	mov	r1, r5
 800685e:	f7fa f985 	bl	8000b6c <__aeabi_d2iz>
 8006862:	2800      	cmp	r0, #0
 8006864:	d052      	beq.n	800690c <__kernel_sin+0xcc>
 8006866:	4622      	mov	r2, r4
 8006868:	462b      	mov	r3, r5
 800686a:	4620      	mov	r0, r4
 800686c:	4629      	mov	r1, r5
 800686e:	f7f9 fee3 	bl	8000638 <__aeabi_dmul>
 8006872:	4682      	mov	sl, r0
 8006874:	468b      	mov	fp, r1
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4620      	mov	r0, r4
 800687c:	4629      	mov	r1, r5
 800687e:	f7f9 fedb 	bl	8000638 <__aeabi_dmul>
 8006882:	a342      	add	r3, pc, #264	@ (adr r3, 800698c <__kernel_sin+0x14c>)
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	e9cd 0100 	strd	r0, r1, [sp]
 800688c:	4650      	mov	r0, sl
 800688e:	4659      	mov	r1, fp
 8006890:	f7f9 fed2 	bl	8000638 <__aeabi_dmul>
 8006894:	a33f      	add	r3, pc, #252	@ (adr r3, 8006994 <__kernel_sin+0x154>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f7f9 fd15 	bl	80002c8 <__aeabi_dsub>
 800689e:	4652      	mov	r2, sl
 80068a0:	465b      	mov	r3, fp
 80068a2:	f7f9 fec9 	bl	8000638 <__aeabi_dmul>
 80068a6:	a33d      	add	r3, pc, #244	@ (adr r3, 800699c <__kernel_sin+0x15c>)
 80068a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ac:	f7f9 fd0e 	bl	80002cc <__adddf3>
 80068b0:	4652      	mov	r2, sl
 80068b2:	465b      	mov	r3, fp
 80068b4:	f7f9 fec0 	bl	8000638 <__aeabi_dmul>
 80068b8:	a33a      	add	r3, pc, #232	@ (adr r3, 80069a4 <__kernel_sin+0x164>)
 80068ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068be:	f7f9 fd03 	bl	80002c8 <__aeabi_dsub>
 80068c2:	4652      	mov	r2, sl
 80068c4:	465b      	mov	r3, fp
 80068c6:	f7f9 feb7 	bl	8000638 <__aeabi_dmul>
 80068ca:	a338      	add	r3, pc, #224	@ (adr r3, 80069ac <__kernel_sin+0x16c>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	f7f9 fcfc 	bl	80002cc <__adddf3>
 80068d4:	4606      	mov	r6, r0
 80068d6:	460f      	mov	r7, r1
 80068d8:	f1b8 0f00 	cmp.w	r8, #0
 80068dc:	d11b      	bne.n	8006916 <__kernel_sin+0xd6>
 80068de:	4602      	mov	r2, r0
 80068e0:	460b      	mov	r3, r1
 80068e2:	4650      	mov	r0, sl
 80068e4:	4659      	mov	r1, fp
 80068e6:	f7f9 fea7 	bl	8000638 <__aeabi_dmul>
 80068ea:	a325      	add	r3, pc, #148	@ (adr r3, 8006980 <__kernel_sin+0x140>)
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	f7f9 fcea 	bl	80002c8 <__aeabi_dsub>
 80068f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068f8:	f7f9 fe9e 	bl	8000638 <__aeabi_dmul>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4620      	mov	r0, r4
 8006902:	4629      	mov	r1, r5
 8006904:	f7f9 fce2 	bl	80002cc <__adddf3>
 8006908:	4604      	mov	r4, r0
 800690a:	460d      	mov	r5, r1
 800690c:	ec45 4b10 	vmov	d0, r4, r5
 8006910:	b005      	add	sp, #20
 8006912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800691a:	4b1b      	ldr	r3, [pc, #108]	@ (8006988 <__kernel_sin+0x148>)
 800691c:	2200      	movs	r2, #0
 800691e:	f7f9 fe8b 	bl	8000638 <__aeabi_dmul>
 8006922:	4632      	mov	r2, r6
 8006924:	4680      	mov	r8, r0
 8006926:	4689      	mov	r9, r1
 8006928:	463b      	mov	r3, r7
 800692a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800692e:	f7f9 fe83 	bl	8000638 <__aeabi_dmul>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4640      	mov	r0, r8
 8006938:	4649      	mov	r1, r9
 800693a:	f7f9 fcc5 	bl	80002c8 <__aeabi_dsub>
 800693e:	4652      	mov	r2, sl
 8006940:	465b      	mov	r3, fp
 8006942:	f7f9 fe79 	bl	8000638 <__aeabi_dmul>
 8006946:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800694a:	f7f9 fcbd 	bl	80002c8 <__aeabi_dsub>
 800694e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006980 <__kernel_sin+0x140>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	4606      	mov	r6, r0
 8006956:	460f      	mov	r7, r1
 8006958:	e9dd 0100 	ldrd	r0, r1, [sp]
 800695c:	f7f9 fe6c 	bl	8000638 <__aeabi_dmul>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4630      	mov	r0, r6
 8006966:	4639      	mov	r1, r7
 8006968:	f7f9 fcb0 	bl	80002cc <__adddf3>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4620      	mov	r0, r4
 8006972:	4629      	mov	r1, r5
 8006974:	f7f9 fca8 	bl	80002c8 <__aeabi_dsub>
 8006978:	e7c6      	b.n	8006908 <__kernel_sin+0xc8>
 800697a:	bf00      	nop
 800697c:	f3af 8000 	nop.w
 8006980:	55555549 	.word	0x55555549
 8006984:	3fc55555 	.word	0x3fc55555
 8006988:	3fe00000 	.word	0x3fe00000
 800698c:	5acfd57c 	.word	0x5acfd57c
 8006990:	3de5d93a 	.word	0x3de5d93a
 8006994:	8a2b9ceb 	.word	0x8a2b9ceb
 8006998:	3e5ae5e6 	.word	0x3e5ae5e6
 800699c:	57b1fe7d 	.word	0x57b1fe7d
 80069a0:	3ec71de3 	.word	0x3ec71de3
 80069a4:	19c161d5 	.word	0x19c161d5
 80069a8:	3f2a01a0 	.word	0x3f2a01a0
 80069ac:	1110f8a6 	.word	0x1110f8a6
 80069b0:	3f811111 	.word	0x3f811111
 80069b4:	00000000 	.word	0x00000000

080069b8 <__ieee754_rem_pio2>:
 80069b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	ec57 6b10 	vmov	r6, r7, d0
 80069c0:	4bc5      	ldr	r3, [pc, #788]	@ (8006cd8 <__ieee754_rem_pio2+0x320>)
 80069c2:	b08d      	sub	sp, #52	@ 0x34
 80069c4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80069c8:	4598      	cmp	r8, r3
 80069ca:	4604      	mov	r4, r0
 80069cc:	9704      	str	r7, [sp, #16]
 80069ce:	d807      	bhi.n	80069e0 <__ieee754_rem_pio2+0x28>
 80069d0:	2200      	movs	r2, #0
 80069d2:	2300      	movs	r3, #0
 80069d4:	ed80 0b00 	vstr	d0, [r0]
 80069d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80069dc:	2500      	movs	r5, #0
 80069de:	e028      	b.n	8006a32 <__ieee754_rem_pio2+0x7a>
 80069e0:	4bbe      	ldr	r3, [pc, #760]	@ (8006cdc <__ieee754_rem_pio2+0x324>)
 80069e2:	4598      	cmp	r8, r3
 80069e4:	d878      	bhi.n	8006ad8 <__ieee754_rem_pio2+0x120>
 80069e6:	9b04      	ldr	r3, [sp, #16]
 80069e8:	4dbd      	ldr	r5, [pc, #756]	@ (8006ce0 <__ieee754_rem_pio2+0x328>)
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	4630      	mov	r0, r6
 80069ee:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006ca0 <__ieee754_rem_pio2+0x2e8>)
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	4639      	mov	r1, r7
 80069f6:	dd38      	ble.n	8006a6a <__ieee754_rem_pio2+0xb2>
 80069f8:	f7f9 fc66 	bl	80002c8 <__aeabi_dsub>
 80069fc:	45a8      	cmp	r8, r5
 80069fe:	4606      	mov	r6, r0
 8006a00:	460f      	mov	r7, r1
 8006a02:	d01a      	beq.n	8006a3a <__ieee754_rem_pio2+0x82>
 8006a04:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006ca8 <__ieee754_rem_pio2+0x2f0>)
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	f7f9 fc5d 	bl	80002c8 <__aeabi_dsub>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	460b      	mov	r3, r1
 8006a12:	4680      	mov	r8, r0
 8006a14:	4689      	mov	r9, r1
 8006a16:	4630      	mov	r0, r6
 8006a18:	4639      	mov	r1, r7
 8006a1a:	f7f9 fc55 	bl	80002c8 <__aeabi_dsub>
 8006a1e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006ca8 <__ieee754_rem_pio2+0x2f0>)
 8006a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a24:	f7f9 fc50 	bl	80002c8 <__aeabi_dsub>
 8006a28:	e9c4 8900 	strd	r8, r9, [r4]
 8006a2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006a30:	2501      	movs	r5, #1
 8006a32:	4628      	mov	r0, r5
 8006a34:	b00d      	add	sp, #52	@ 0x34
 8006a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3a:	a39d      	add	r3, pc, #628	@ (adr r3, 8006cb0 <__ieee754_rem_pio2+0x2f8>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 fc42 	bl	80002c8 <__aeabi_dsub>
 8006a44:	a39c      	add	r3, pc, #624	@ (adr r3, 8006cb8 <__ieee754_rem_pio2+0x300>)
 8006a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4a:	4606      	mov	r6, r0
 8006a4c:	460f      	mov	r7, r1
 8006a4e:	f7f9 fc3b 	bl	80002c8 <__aeabi_dsub>
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4680      	mov	r8, r0
 8006a58:	4689      	mov	r9, r1
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	4639      	mov	r1, r7
 8006a5e:	f7f9 fc33 	bl	80002c8 <__aeabi_dsub>
 8006a62:	a395      	add	r3, pc, #596	@ (adr r3, 8006cb8 <__ieee754_rem_pio2+0x300>)
 8006a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a68:	e7dc      	b.n	8006a24 <__ieee754_rem_pio2+0x6c>
 8006a6a:	f7f9 fc2f 	bl	80002cc <__adddf3>
 8006a6e:	45a8      	cmp	r8, r5
 8006a70:	4606      	mov	r6, r0
 8006a72:	460f      	mov	r7, r1
 8006a74:	d018      	beq.n	8006aa8 <__ieee754_rem_pio2+0xf0>
 8006a76:	a38c      	add	r3, pc, #560	@ (adr r3, 8006ca8 <__ieee754_rem_pio2+0x2f0>)
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f7f9 fc26 	bl	80002cc <__adddf3>
 8006a80:	4602      	mov	r2, r0
 8006a82:	460b      	mov	r3, r1
 8006a84:	4680      	mov	r8, r0
 8006a86:	4689      	mov	r9, r1
 8006a88:	4630      	mov	r0, r6
 8006a8a:	4639      	mov	r1, r7
 8006a8c:	f7f9 fc1c 	bl	80002c8 <__aeabi_dsub>
 8006a90:	a385      	add	r3, pc, #532	@ (adr r3, 8006ca8 <__ieee754_rem_pio2+0x2f0>)
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	f7f9 fc19 	bl	80002cc <__adddf3>
 8006a9a:	f04f 35ff 	mov.w	r5, #4294967295
 8006a9e:	e9c4 8900 	strd	r8, r9, [r4]
 8006aa2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006aa6:	e7c4      	b.n	8006a32 <__ieee754_rem_pio2+0x7a>
 8006aa8:	a381      	add	r3, pc, #516	@ (adr r3, 8006cb0 <__ieee754_rem_pio2+0x2f8>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f7f9 fc0d 	bl	80002cc <__adddf3>
 8006ab2:	a381      	add	r3, pc, #516	@ (adr r3, 8006cb8 <__ieee754_rem_pio2+0x300>)
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	4606      	mov	r6, r0
 8006aba:	460f      	mov	r7, r1
 8006abc:	f7f9 fc06 	bl	80002cc <__adddf3>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	4689      	mov	r9, r1
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	f7f9 fbfc 	bl	80002c8 <__aeabi_dsub>
 8006ad0:	a379      	add	r3, pc, #484	@ (adr r3, 8006cb8 <__ieee754_rem_pio2+0x300>)
 8006ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad6:	e7de      	b.n	8006a96 <__ieee754_rem_pio2+0xde>
 8006ad8:	4b82      	ldr	r3, [pc, #520]	@ (8006ce4 <__ieee754_rem_pio2+0x32c>)
 8006ada:	4598      	cmp	r8, r3
 8006adc:	f200 80d1 	bhi.w	8006c82 <__ieee754_rem_pio2+0x2ca>
 8006ae0:	f000 f966 	bl	8006db0 <fabs>
 8006ae4:	ec57 6b10 	vmov	r6, r7, d0
 8006ae8:	a375      	add	r3, pc, #468	@ (adr r3, 8006cc0 <__ieee754_rem_pio2+0x308>)
 8006aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aee:	4630      	mov	r0, r6
 8006af0:	4639      	mov	r1, r7
 8006af2:	f7f9 fda1 	bl	8000638 <__aeabi_dmul>
 8006af6:	4b7c      	ldr	r3, [pc, #496]	@ (8006ce8 <__ieee754_rem_pio2+0x330>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	f7f9 fbe7 	bl	80002cc <__adddf3>
 8006afe:	f7fa f835 	bl	8000b6c <__aeabi_d2iz>
 8006b02:	4605      	mov	r5, r0
 8006b04:	f7f9 fd2e 	bl	8000564 <__aeabi_i2d>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b10:	a363      	add	r3, pc, #396	@ (adr r3, 8006ca0 <__ieee754_rem_pio2+0x2e8>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f7f9 fd8f 	bl	8000638 <__aeabi_dmul>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4630      	mov	r0, r6
 8006b20:	4639      	mov	r1, r7
 8006b22:	f7f9 fbd1 	bl	80002c8 <__aeabi_dsub>
 8006b26:	a360      	add	r3, pc, #384	@ (adr r3, 8006ca8 <__ieee754_rem_pio2+0x2f0>)
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	4682      	mov	sl, r0
 8006b2e:	468b      	mov	fp, r1
 8006b30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b34:	f7f9 fd80 	bl	8000638 <__aeabi_dmul>
 8006b38:	2d1f      	cmp	r5, #31
 8006b3a:	4606      	mov	r6, r0
 8006b3c:	460f      	mov	r7, r1
 8006b3e:	dc0c      	bgt.n	8006b5a <__ieee754_rem_pio2+0x1a2>
 8006b40:	4b6a      	ldr	r3, [pc, #424]	@ (8006cec <__ieee754_rem_pio2+0x334>)
 8006b42:	1e6a      	subs	r2, r5, #1
 8006b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b48:	4543      	cmp	r3, r8
 8006b4a:	d006      	beq.n	8006b5a <__ieee754_rem_pio2+0x1a2>
 8006b4c:	4632      	mov	r2, r6
 8006b4e:	463b      	mov	r3, r7
 8006b50:	4650      	mov	r0, sl
 8006b52:	4659      	mov	r1, fp
 8006b54:	f7f9 fbb8 	bl	80002c8 <__aeabi_dsub>
 8006b58:	e00e      	b.n	8006b78 <__ieee754_rem_pio2+0x1c0>
 8006b5a:	463b      	mov	r3, r7
 8006b5c:	4632      	mov	r2, r6
 8006b5e:	4650      	mov	r0, sl
 8006b60:	4659      	mov	r1, fp
 8006b62:	f7f9 fbb1 	bl	80002c8 <__aeabi_dsub>
 8006b66:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006b6a:	9305      	str	r3, [sp, #20]
 8006b6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b70:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006b74:	2b10      	cmp	r3, #16
 8006b76:	dc02      	bgt.n	8006b7e <__ieee754_rem_pio2+0x1c6>
 8006b78:	e9c4 0100 	strd	r0, r1, [r4]
 8006b7c:	e039      	b.n	8006bf2 <__ieee754_rem_pio2+0x23a>
 8006b7e:	a34c      	add	r3, pc, #304	@ (adr r3, 8006cb0 <__ieee754_rem_pio2+0x2f8>)
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b88:	f7f9 fd56 	bl	8000638 <__aeabi_dmul>
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	460f      	mov	r7, r1
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4650      	mov	r0, sl
 8006b96:	4659      	mov	r1, fp
 8006b98:	f7f9 fb96 	bl	80002c8 <__aeabi_dsub>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4680      	mov	r8, r0
 8006ba2:	4689      	mov	r9, r1
 8006ba4:	4650      	mov	r0, sl
 8006ba6:	4659      	mov	r1, fp
 8006ba8:	f7f9 fb8e 	bl	80002c8 <__aeabi_dsub>
 8006bac:	4632      	mov	r2, r6
 8006bae:	463b      	mov	r3, r7
 8006bb0:	f7f9 fb8a 	bl	80002c8 <__aeabi_dsub>
 8006bb4:	a340      	add	r3, pc, #256	@ (adr r3, 8006cb8 <__ieee754_rem_pio2+0x300>)
 8006bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460f      	mov	r7, r1
 8006bbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bc2:	f7f9 fd39 	bl	8000638 <__aeabi_dmul>
 8006bc6:	4632      	mov	r2, r6
 8006bc8:	463b      	mov	r3, r7
 8006bca:	f7f9 fb7d 	bl	80002c8 <__aeabi_dsub>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4606      	mov	r6, r0
 8006bd4:	460f      	mov	r7, r1
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	4649      	mov	r1, r9
 8006bda:	f7f9 fb75 	bl	80002c8 <__aeabi_dsub>
 8006bde:	9a05      	ldr	r2, [sp, #20]
 8006be0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b31      	cmp	r3, #49	@ 0x31
 8006be8:	dc20      	bgt.n	8006c2c <__ieee754_rem_pio2+0x274>
 8006bea:	e9c4 0100 	strd	r0, r1, [r4]
 8006bee:	46c2      	mov	sl, r8
 8006bf0:	46cb      	mov	fp, r9
 8006bf2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8006bf6:	4650      	mov	r0, sl
 8006bf8:	4642      	mov	r2, r8
 8006bfa:	464b      	mov	r3, r9
 8006bfc:	4659      	mov	r1, fp
 8006bfe:	f7f9 fb63 	bl	80002c8 <__aeabi_dsub>
 8006c02:	463b      	mov	r3, r7
 8006c04:	4632      	mov	r2, r6
 8006c06:	f7f9 fb5f 	bl	80002c8 <__aeabi_dsub>
 8006c0a:	9b04      	ldr	r3, [sp, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006c12:	f6bf af0e 	bge.w	8006a32 <__ieee754_rem_pio2+0x7a>
 8006c16:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8006c1a:	6063      	str	r3, [r4, #4]
 8006c1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006c20:	f8c4 8000 	str.w	r8, [r4]
 8006c24:	60a0      	str	r0, [r4, #8]
 8006c26:	60e3      	str	r3, [r4, #12]
 8006c28:	426d      	negs	r5, r5
 8006c2a:	e702      	b.n	8006a32 <__ieee754_rem_pio2+0x7a>
 8006c2c:	a326      	add	r3, pc, #152	@ (adr r3, 8006cc8 <__ieee754_rem_pio2+0x310>)
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c36:	f7f9 fcff 	bl	8000638 <__aeabi_dmul>
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	460f      	mov	r7, r1
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	4640      	mov	r0, r8
 8006c44:	4649      	mov	r1, r9
 8006c46:	f7f9 fb3f 	bl	80002c8 <__aeabi_dsub>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4682      	mov	sl, r0
 8006c50:	468b      	mov	fp, r1
 8006c52:	4640      	mov	r0, r8
 8006c54:	4649      	mov	r1, r9
 8006c56:	f7f9 fb37 	bl	80002c8 <__aeabi_dsub>
 8006c5a:	4632      	mov	r2, r6
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	f7f9 fb33 	bl	80002c8 <__aeabi_dsub>
 8006c62:	a31b      	add	r3, pc, #108	@ (adr r3, 8006cd0 <__ieee754_rem_pio2+0x318>)
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	4606      	mov	r6, r0
 8006c6a:	460f      	mov	r7, r1
 8006c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c70:	f7f9 fce2 	bl	8000638 <__aeabi_dmul>
 8006c74:	4632      	mov	r2, r6
 8006c76:	463b      	mov	r3, r7
 8006c78:	f7f9 fb26 	bl	80002c8 <__aeabi_dsub>
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	460f      	mov	r7, r1
 8006c80:	e764      	b.n	8006b4c <__ieee754_rem_pio2+0x194>
 8006c82:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf0 <__ieee754_rem_pio2+0x338>)
 8006c84:	4598      	cmp	r8, r3
 8006c86:	d935      	bls.n	8006cf4 <__ieee754_rem_pio2+0x33c>
 8006c88:	4632      	mov	r2, r6
 8006c8a:	463b      	mov	r3, r7
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	4639      	mov	r1, r7
 8006c90:	f7f9 fb1a 	bl	80002c8 <__aeabi_dsub>
 8006c94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006c98:	e9c4 0100 	strd	r0, r1, [r4]
 8006c9c:	e69e      	b.n	80069dc <__ieee754_rem_pio2+0x24>
 8006c9e:	bf00      	nop
 8006ca0:	54400000 	.word	0x54400000
 8006ca4:	3ff921fb 	.word	0x3ff921fb
 8006ca8:	1a626331 	.word	0x1a626331
 8006cac:	3dd0b461 	.word	0x3dd0b461
 8006cb0:	1a600000 	.word	0x1a600000
 8006cb4:	3dd0b461 	.word	0x3dd0b461
 8006cb8:	2e037073 	.word	0x2e037073
 8006cbc:	3ba3198a 	.word	0x3ba3198a
 8006cc0:	6dc9c883 	.word	0x6dc9c883
 8006cc4:	3fe45f30 	.word	0x3fe45f30
 8006cc8:	2e000000 	.word	0x2e000000
 8006ccc:	3ba3198a 	.word	0x3ba3198a
 8006cd0:	252049c1 	.word	0x252049c1
 8006cd4:	397b839a 	.word	0x397b839a
 8006cd8:	3fe921fb 	.word	0x3fe921fb
 8006cdc:	4002d97b 	.word	0x4002d97b
 8006ce0:	3ff921fb 	.word	0x3ff921fb
 8006ce4:	413921fb 	.word	0x413921fb
 8006ce8:	3fe00000 	.word	0x3fe00000
 8006cec:	080076dc 	.word	0x080076dc
 8006cf0:	7fefffff 	.word	0x7fefffff
 8006cf4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8006cf8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8006cfc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8006d00:	4630      	mov	r0, r6
 8006d02:	460f      	mov	r7, r1
 8006d04:	f7f9 ff32 	bl	8000b6c <__aeabi_d2iz>
 8006d08:	f7f9 fc2c 	bl	8000564 <__aeabi_i2d>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4630      	mov	r0, r6
 8006d12:	4639      	mov	r1, r7
 8006d14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d18:	f7f9 fad6 	bl	80002c8 <__aeabi_dsub>
 8006d1c:	4b22      	ldr	r3, [pc, #136]	@ (8006da8 <__ieee754_rem_pio2+0x3f0>)
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f7f9 fc8a 	bl	8000638 <__aeabi_dmul>
 8006d24:	460f      	mov	r7, r1
 8006d26:	4606      	mov	r6, r0
 8006d28:	f7f9 ff20 	bl	8000b6c <__aeabi_d2iz>
 8006d2c:	f7f9 fc1a 	bl	8000564 <__aeabi_i2d>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	4630      	mov	r0, r6
 8006d36:	4639      	mov	r1, r7
 8006d38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006d3c:	f7f9 fac4 	bl	80002c8 <__aeabi_dsub>
 8006d40:	4b19      	ldr	r3, [pc, #100]	@ (8006da8 <__ieee754_rem_pio2+0x3f0>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	f7f9 fc78 	bl	8000638 <__aeabi_dmul>
 8006d48:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8006d4c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006d50:	f04f 0803 	mov.w	r8, #3
 8006d54:	2600      	movs	r6, #0
 8006d56:	2700      	movs	r7, #0
 8006d58:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8006d5c:	4632      	mov	r2, r6
 8006d5e:	463b      	mov	r3, r7
 8006d60:	46c2      	mov	sl, r8
 8006d62:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d66:	f7f9 fecf 	bl	8000b08 <__aeabi_dcmpeq>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	d1f4      	bne.n	8006d58 <__ieee754_rem_pio2+0x3a0>
 8006d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006dac <__ieee754_rem_pio2+0x3f4>)
 8006d70:	9301      	str	r3, [sp, #4]
 8006d72:	2302      	movs	r3, #2
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	462a      	mov	r2, r5
 8006d78:	4653      	mov	r3, sl
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	a806      	add	r0, sp, #24
 8006d7e:	f000 f81f 	bl	8006dc0 <__kernel_rem_pio2>
 8006d82:	9b04      	ldr	r3, [sp, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	4605      	mov	r5, r0
 8006d88:	f6bf ae53 	bge.w	8006a32 <__ieee754_rem_pio2+0x7a>
 8006d8c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006d90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006d94:	e9c4 2300 	strd	r2, r3, [r4]
 8006d98:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8006d9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006da0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006da4:	e740      	b.n	8006c28 <__ieee754_rem_pio2+0x270>
 8006da6:	bf00      	nop
 8006da8:	41700000 	.word	0x41700000
 8006dac:	0800775c 	.word	0x0800775c

08006db0 <fabs>:
 8006db0:	ec51 0b10 	vmov	r0, r1, d0
 8006db4:	4602      	mov	r2, r0
 8006db6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006dba:	ec43 2b10 	vmov	d0, r2, r3
 8006dbe:	4770      	bx	lr

08006dc0 <__kernel_rem_pio2>:
 8006dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	ed2d 8b02 	vpush	{d8}
 8006dc8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8006dcc:	f112 0f14 	cmn.w	r2, #20
 8006dd0:	9306      	str	r3, [sp, #24]
 8006dd2:	9104      	str	r1, [sp, #16]
 8006dd4:	4bc2      	ldr	r3, [pc, #776]	@ (80070e0 <__kernel_rem_pio2+0x320>)
 8006dd6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006dd8:	9008      	str	r0, [sp, #32]
 8006dda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	9b06      	ldr	r3, [sp, #24]
 8006de2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006de6:	bfa8      	it	ge
 8006de8:	1ed4      	subge	r4, r2, #3
 8006dea:	9305      	str	r3, [sp, #20]
 8006dec:	bfb2      	itee	lt
 8006dee:	2400      	movlt	r4, #0
 8006df0:	2318      	movge	r3, #24
 8006df2:	fb94 f4f3 	sdivge	r4, r4, r3
 8006df6:	f06f 0317 	mvn.w	r3, #23
 8006dfa:	fb04 3303 	mla	r3, r4, r3, r3
 8006dfe:	eb03 0b02 	add.w	fp, r3, r2
 8006e02:	9b00      	ldr	r3, [sp, #0]
 8006e04:	9a05      	ldr	r2, [sp, #20]
 8006e06:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 80070d0 <__kernel_rem_pio2+0x310>
 8006e0a:	eb03 0802 	add.w	r8, r3, r2
 8006e0e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006e10:	1aa7      	subs	r7, r4, r2
 8006e12:	ae20      	add	r6, sp, #128	@ 0x80
 8006e14:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006e18:	2500      	movs	r5, #0
 8006e1a:	4545      	cmp	r5, r8
 8006e1c:	dd12      	ble.n	8006e44 <__kernel_rem_pio2+0x84>
 8006e1e:	9b06      	ldr	r3, [sp, #24]
 8006e20:	aa20      	add	r2, sp, #128	@ 0x80
 8006e22:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8006e26:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8006e2a:	2700      	movs	r7, #0
 8006e2c:	9b00      	ldr	r3, [sp, #0]
 8006e2e:	429f      	cmp	r7, r3
 8006e30:	dc2e      	bgt.n	8006e90 <__kernel_rem_pio2+0xd0>
 8006e32:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 80070d0 <__kernel_rem_pio2+0x310>
 8006e36:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e3a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006e3e:	46a8      	mov	r8, r5
 8006e40:	2600      	movs	r6, #0
 8006e42:	e01b      	b.n	8006e7c <__kernel_rem_pio2+0xbc>
 8006e44:	42ef      	cmn	r7, r5
 8006e46:	d407      	bmi.n	8006e58 <__kernel_rem_pio2+0x98>
 8006e48:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006e4c:	f7f9 fb8a 	bl	8000564 <__aeabi_i2d>
 8006e50:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006e54:	3501      	adds	r5, #1
 8006e56:	e7e0      	b.n	8006e1a <__kernel_rem_pio2+0x5a>
 8006e58:	ec51 0b18 	vmov	r0, r1, d8
 8006e5c:	e7f8      	b.n	8006e50 <__kernel_rem_pio2+0x90>
 8006e5e:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8006e62:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006e66:	f7f9 fbe7 	bl	8000638 <__aeabi_dmul>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e72:	f7f9 fa2b 	bl	80002cc <__adddf3>
 8006e76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e7a:	3601      	adds	r6, #1
 8006e7c:	9b05      	ldr	r3, [sp, #20]
 8006e7e:	429e      	cmp	r6, r3
 8006e80:	dded      	ble.n	8006e5e <__kernel_rem_pio2+0x9e>
 8006e82:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e86:	3701      	adds	r7, #1
 8006e88:	ecaa 7b02 	vstmia	sl!, {d7}
 8006e8c:	3508      	adds	r5, #8
 8006e8e:	e7cd      	b.n	8006e2c <__kernel_rem_pio2+0x6c>
 8006e90:	9b00      	ldr	r3, [sp, #0]
 8006e92:	f8dd 8000 	ldr.w	r8, [sp]
 8006e96:	aa0c      	add	r2, sp, #48	@ 0x30
 8006e98:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006ea0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ea6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006eaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eac:	ab98      	add	r3, sp, #608	@ 0x260
 8006eae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006eb2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8006eb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006eba:	ac0c      	add	r4, sp, #48	@ 0x30
 8006ebc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006ebe:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8006ec2:	46a1      	mov	r9, r4
 8006ec4:	46c2      	mov	sl, r8
 8006ec6:	f1ba 0f00 	cmp.w	sl, #0
 8006eca:	dc77      	bgt.n	8006fbc <__kernel_rem_pio2+0x1fc>
 8006ecc:	4658      	mov	r0, fp
 8006ece:	ed9d 0b02 	vldr	d0, [sp, #8]
 8006ed2:	f000 fac5 	bl	8007460 <scalbn>
 8006ed6:	ec57 6b10 	vmov	r6, r7, d0
 8006eda:	2200      	movs	r2, #0
 8006edc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	4639      	mov	r1, r7
 8006ee4:	f7f9 fba8 	bl	8000638 <__aeabi_dmul>
 8006ee8:	ec41 0b10 	vmov	d0, r0, r1
 8006eec:	f000 fb34 	bl	8007558 <floor>
 8006ef0:	4b7c      	ldr	r3, [pc, #496]	@ (80070e4 <__kernel_rem_pio2+0x324>)
 8006ef2:	ec51 0b10 	vmov	r0, r1, d0
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f7f9 fb9e 	bl	8000638 <__aeabi_dmul>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	4630      	mov	r0, r6
 8006f02:	4639      	mov	r1, r7
 8006f04:	f7f9 f9e0 	bl	80002c8 <__aeabi_dsub>
 8006f08:	460f      	mov	r7, r1
 8006f0a:	4606      	mov	r6, r0
 8006f0c:	f7f9 fe2e 	bl	8000b6c <__aeabi_d2iz>
 8006f10:	9002      	str	r0, [sp, #8]
 8006f12:	f7f9 fb27 	bl	8000564 <__aeabi_i2d>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	4639      	mov	r1, r7
 8006f1e:	f7f9 f9d3 	bl	80002c8 <__aeabi_dsub>
 8006f22:	f1bb 0f00 	cmp.w	fp, #0
 8006f26:	4606      	mov	r6, r0
 8006f28:	460f      	mov	r7, r1
 8006f2a:	dd6c      	ble.n	8007006 <__kernel_rem_pio2+0x246>
 8006f2c:	f108 31ff 	add.w	r1, r8, #4294967295
 8006f30:	ab0c      	add	r3, sp, #48	@ 0x30
 8006f32:	9d02      	ldr	r5, [sp, #8]
 8006f34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006f38:	f1cb 0018 	rsb	r0, fp, #24
 8006f3c:	fa43 f200 	asr.w	r2, r3, r0
 8006f40:	4415      	add	r5, r2
 8006f42:	4082      	lsls	r2, r0
 8006f44:	1a9b      	subs	r3, r3, r2
 8006f46:	aa0c      	add	r2, sp, #48	@ 0x30
 8006f48:	9502      	str	r5, [sp, #8]
 8006f4a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006f4e:	f1cb 0217 	rsb	r2, fp, #23
 8006f52:	fa43 f902 	asr.w	r9, r3, r2
 8006f56:	f1b9 0f00 	cmp.w	r9, #0
 8006f5a:	dd64      	ble.n	8007026 <__kernel_rem_pio2+0x266>
 8006f5c:	9b02      	ldr	r3, [sp, #8]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	3301      	adds	r3, #1
 8006f62:	9302      	str	r3, [sp, #8]
 8006f64:	4615      	mov	r5, r2
 8006f66:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006f6a:	4590      	cmp	r8, r2
 8006f6c:	f300 80a1 	bgt.w	80070b2 <__kernel_rem_pio2+0x2f2>
 8006f70:	f1bb 0f00 	cmp.w	fp, #0
 8006f74:	dd07      	ble.n	8006f86 <__kernel_rem_pio2+0x1c6>
 8006f76:	f1bb 0f01 	cmp.w	fp, #1
 8006f7a:	f000 80c1 	beq.w	8007100 <__kernel_rem_pio2+0x340>
 8006f7e:	f1bb 0f02 	cmp.w	fp, #2
 8006f82:	f000 80c8 	beq.w	8007116 <__kernel_rem_pio2+0x356>
 8006f86:	f1b9 0f02 	cmp.w	r9, #2
 8006f8a:	d14c      	bne.n	8007026 <__kernel_rem_pio2+0x266>
 8006f8c:	4632      	mov	r2, r6
 8006f8e:	463b      	mov	r3, r7
 8006f90:	4955      	ldr	r1, [pc, #340]	@ (80070e8 <__kernel_rem_pio2+0x328>)
 8006f92:	2000      	movs	r0, #0
 8006f94:	f7f9 f998 	bl	80002c8 <__aeabi_dsub>
 8006f98:	4606      	mov	r6, r0
 8006f9a:	460f      	mov	r7, r1
 8006f9c:	2d00      	cmp	r5, #0
 8006f9e:	d042      	beq.n	8007026 <__kernel_rem_pio2+0x266>
 8006fa0:	4658      	mov	r0, fp
 8006fa2:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 80070d8 <__kernel_rem_pio2+0x318>
 8006fa6:	f000 fa5b 	bl	8007460 <scalbn>
 8006faa:	4630      	mov	r0, r6
 8006fac:	4639      	mov	r1, r7
 8006fae:	ec53 2b10 	vmov	r2, r3, d0
 8006fb2:	f7f9 f989 	bl	80002c8 <__aeabi_dsub>
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460f      	mov	r7, r1
 8006fba:	e034      	b.n	8007026 <__kernel_rem_pio2+0x266>
 8006fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80070ec <__kernel_rem_pio2+0x32c>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fc4:	f7f9 fb38 	bl	8000638 <__aeabi_dmul>
 8006fc8:	f7f9 fdd0 	bl	8000b6c <__aeabi_d2iz>
 8006fcc:	f7f9 faca 	bl	8000564 <__aeabi_i2d>
 8006fd0:	4b47      	ldr	r3, [pc, #284]	@ (80070f0 <__kernel_rem_pio2+0x330>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	4606      	mov	r6, r0
 8006fd6:	460f      	mov	r7, r1
 8006fd8:	f7f9 fb2e 	bl	8000638 <__aeabi_dmul>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fe4:	f7f9 f970 	bl	80002c8 <__aeabi_dsub>
 8006fe8:	f7f9 fdc0 	bl	8000b6c <__aeabi_d2iz>
 8006fec:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006ff0:	f849 0b04 	str.w	r0, [r9], #4
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	f7f9 f968 	bl	80002cc <__adddf3>
 8006ffc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007000:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007004:	e75f      	b.n	8006ec6 <__kernel_rem_pio2+0x106>
 8007006:	d107      	bne.n	8007018 <__kernel_rem_pio2+0x258>
 8007008:	f108 33ff 	add.w	r3, r8, #4294967295
 800700c:	aa0c      	add	r2, sp, #48	@ 0x30
 800700e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007012:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007016:	e79e      	b.n	8006f56 <__kernel_rem_pio2+0x196>
 8007018:	4b36      	ldr	r3, [pc, #216]	@ (80070f4 <__kernel_rem_pio2+0x334>)
 800701a:	2200      	movs	r2, #0
 800701c:	f7f9 fd92 	bl	8000b44 <__aeabi_dcmpge>
 8007020:	2800      	cmp	r0, #0
 8007022:	d143      	bne.n	80070ac <__kernel_rem_pio2+0x2ec>
 8007024:	4681      	mov	r9, r0
 8007026:	2200      	movs	r2, #0
 8007028:	2300      	movs	r3, #0
 800702a:	4630      	mov	r0, r6
 800702c:	4639      	mov	r1, r7
 800702e:	f7f9 fd6b 	bl	8000b08 <__aeabi_dcmpeq>
 8007032:	2800      	cmp	r0, #0
 8007034:	f000 80c1 	beq.w	80071ba <__kernel_rem_pio2+0x3fa>
 8007038:	f108 33ff 	add.w	r3, r8, #4294967295
 800703c:	2200      	movs	r2, #0
 800703e:	9900      	ldr	r1, [sp, #0]
 8007040:	428b      	cmp	r3, r1
 8007042:	da70      	bge.n	8007126 <__kernel_rem_pio2+0x366>
 8007044:	2a00      	cmp	r2, #0
 8007046:	f000 808b 	beq.w	8007160 <__kernel_rem_pio2+0x3a0>
 800704a:	f108 38ff 	add.w	r8, r8, #4294967295
 800704e:	ab0c      	add	r3, sp, #48	@ 0x30
 8007050:	f1ab 0b18 	sub.w	fp, fp, #24
 8007054:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0f6      	beq.n	800704a <__kernel_rem_pio2+0x28a>
 800705c:	4658      	mov	r0, fp
 800705e:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 80070d8 <__kernel_rem_pio2+0x318>
 8007062:	f000 f9fd 	bl	8007460 <scalbn>
 8007066:	f108 0301 	add.w	r3, r8, #1
 800706a:	00da      	lsls	r2, r3, #3
 800706c:	9205      	str	r2, [sp, #20]
 800706e:	ec55 4b10 	vmov	r4, r5, d0
 8007072:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007074:	f8df b074 	ldr.w	fp, [pc, #116]	@ 80070ec <__kernel_rem_pio2+0x32c>
 8007078:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800707c:	4646      	mov	r6, r8
 800707e:	f04f 0a00 	mov.w	sl, #0
 8007082:	2e00      	cmp	r6, #0
 8007084:	f280 80d1 	bge.w	800722a <__kernel_rem_pio2+0x46a>
 8007088:	4644      	mov	r4, r8
 800708a:	2c00      	cmp	r4, #0
 800708c:	f2c0 80ff 	blt.w	800728e <__kernel_rem_pio2+0x4ce>
 8007090:	4b19      	ldr	r3, [pc, #100]	@ (80070f8 <__kernel_rem_pio2+0x338>)
 8007092:	461f      	mov	r7, r3
 8007094:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007096:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800709a:	9306      	str	r3, [sp, #24]
 800709c:	f04f 0a00 	mov.w	sl, #0
 80070a0:	f04f 0b00 	mov.w	fp, #0
 80070a4:	2600      	movs	r6, #0
 80070a6:	eba8 0504 	sub.w	r5, r8, r4
 80070aa:	e0e4      	b.n	8007276 <__kernel_rem_pio2+0x4b6>
 80070ac:	f04f 0902 	mov.w	r9, #2
 80070b0:	e754      	b.n	8006f5c <__kernel_rem_pio2+0x19c>
 80070b2:	f854 3b04 	ldr.w	r3, [r4], #4
 80070b6:	bb0d      	cbnz	r5, 80070fc <__kernel_rem_pio2+0x33c>
 80070b8:	b123      	cbz	r3, 80070c4 <__kernel_rem_pio2+0x304>
 80070ba:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80070be:	f844 3c04 	str.w	r3, [r4, #-4]
 80070c2:	2301      	movs	r3, #1
 80070c4:	3201      	adds	r2, #1
 80070c6:	461d      	mov	r5, r3
 80070c8:	e74f      	b.n	8006f6a <__kernel_rem_pio2+0x1aa>
 80070ca:	bf00      	nop
 80070cc:	f3af 8000 	nop.w
	...
 80070dc:	3ff00000 	.word	0x3ff00000
 80070e0:	080078a8 	.word	0x080078a8
 80070e4:	40200000 	.word	0x40200000
 80070e8:	3ff00000 	.word	0x3ff00000
 80070ec:	3e700000 	.word	0x3e700000
 80070f0:	41700000 	.word	0x41700000
 80070f4:	3fe00000 	.word	0x3fe00000
 80070f8:	08007868 	.word	0x08007868
 80070fc:	1acb      	subs	r3, r1, r3
 80070fe:	e7de      	b.n	80070be <__kernel_rem_pio2+0x2fe>
 8007100:	f108 32ff 	add.w	r2, r8, #4294967295
 8007104:	ab0c      	add	r3, sp, #48	@ 0x30
 8007106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800710a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800710e:	a90c      	add	r1, sp, #48	@ 0x30
 8007110:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007114:	e737      	b.n	8006f86 <__kernel_rem_pio2+0x1c6>
 8007116:	f108 32ff 	add.w	r2, r8, #4294967295
 800711a:	ab0c      	add	r3, sp, #48	@ 0x30
 800711c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007120:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007124:	e7f3      	b.n	800710e <__kernel_rem_pio2+0x34e>
 8007126:	a90c      	add	r1, sp, #48	@ 0x30
 8007128:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800712c:	3b01      	subs	r3, #1
 800712e:	430a      	orrs	r2, r1
 8007130:	e785      	b.n	800703e <__kernel_rem_pio2+0x27e>
 8007132:	3401      	adds	r4, #1
 8007134:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007138:	2a00      	cmp	r2, #0
 800713a:	d0fa      	beq.n	8007132 <__kernel_rem_pio2+0x372>
 800713c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800713e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007142:	eb0d 0503 	add.w	r5, sp, r3
 8007146:	9b06      	ldr	r3, [sp, #24]
 8007148:	aa20      	add	r2, sp, #128	@ 0x80
 800714a:	4443      	add	r3, r8
 800714c:	f108 0701 	add.w	r7, r8, #1
 8007150:	3d98      	subs	r5, #152	@ 0x98
 8007152:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007156:	4444      	add	r4, r8
 8007158:	42bc      	cmp	r4, r7
 800715a:	da04      	bge.n	8007166 <__kernel_rem_pio2+0x3a6>
 800715c:	46a0      	mov	r8, r4
 800715e:	e6a2      	b.n	8006ea6 <__kernel_rem_pio2+0xe6>
 8007160:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007162:	2401      	movs	r4, #1
 8007164:	e7e6      	b.n	8007134 <__kernel_rem_pio2+0x374>
 8007166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007168:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800716c:	f7f9 f9fa 	bl	8000564 <__aeabi_i2d>
 8007170:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8007430 <__kernel_rem_pio2+0x670>
 8007174:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007178:	ed8d 7b02 	vstr	d7, [sp, #8]
 800717c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007180:	46b2      	mov	sl, r6
 8007182:	f04f 0800 	mov.w	r8, #0
 8007186:	9b05      	ldr	r3, [sp, #20]
 8007188:	4598      	cmp	r8, r3
 800718a:	dd05      	ble.n	8007198 <__kernel_rem_pio2+0x3d8>
 800718c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007190:	3701      	adds	r7, #1
 8007192:	eca5 7b02 	vstmia	r5!, {d7}
 8007196:	e7df      	b.n	8007158 <__kernel_rem_pio2+0x398>
 8007198:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800719c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80071a0:	f7f9 fa4a 	bl	8000638 <__aeabi_dmul>
 80071a4:	4602      	mov	r2, r0
 80071a6:	460b      	mov	r3, r1
 80071a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ac:	f7f9 f88e 	bl	80002cc <__adddf3>
 80071b0:	f108 0801 	add.w	r8, r8, #1
 80071b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b8:	e7e5      	b.n	8007186 <__kernel_rem_pio2+0x3c6>
 80071ba:	f1cb 0000 	rsb	r0, fp, #0
 80071be:	ec47 6b10 	vmov	d0, r6, r7
 80071c2:	f000 f94d 	bl	8007460 <scalbn>
 80071c6:	ec55 4b10 	vmov	r4, r5, d0
 80071ca:	4b9b      	ldr	r3, [pc, #620]	@ (8007438 <__kernel_rem_pio2+0x678>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	4620      	mov	r0, r4
 80071d0:	4629      	mov	r1, r5
 80071d2:	f7f9 fcb7 	bl	8000b44 <__aeabi_dcmpge>
 80071d6:	b300      	cbz	r0, 800721a <__kernel_rem_pio2+0x45a>
 80071d8:	4b98      	ldr	r3, [pc, #608]	@ (800743c <__kernel_rem_pio2+0x67c>)
 80071da:	2200      	movs	r2, #0
 80071dc:	4620      	mov	r0, r4
 80071de:	4629      	mov	r1, r5
 80071e0:	f7f9 fa2a 	bl	8000638 <__aeabi_dmul>
 80071e4:	f7f9 fcc2 	bl	8000b6c <__aeabi_d2iz>
 80071e8:	4606      	mov	r6, r0
 80071ea:	f7f9 f9bb 	bl	8000564 <__aeabi_i2d>
 80071ee:	4b92      	ldr	r3, [pc, #584]	@ (8007438 <__kernel_rem_pio2+0x678>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	f7f9 fa21 	bl	8000638 <__aeabi_dmul>
 80071f6:	460b      	mov	r3, r1
 80071f8:	4602      	mov	r2, r0
 80071fa:	4629      	mov	r1, r5
 80071fc:	4620      	mov	r0, r4
 80071fe:	f7f9 f863 	bl	80002c8 <__aeabi_dsub>
 8007202:	f7f9 fcb3 	bl	8000b6c <__aeabi_d2iz>
 8007206:	ab0c      	add	r3, sp, #48	@ 0x30
 8007208:	f10b 0b18 	add.w	fp, fp, #24
 800720c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007210:	f108 0801 	add.w	r8, r8, #1
 8007214:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8007218:	e720      	b.n	800705c <__kernel_rem_pio2+0x29c>
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 fca5 	bl	8000b6c <__aeabi_d2iz>
 8007222:	ab0c      	add	r3, sp, #48	@ 0x30
 8007224:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8007228:	e718      	b.n	800705c <__kernel_rem_pio2+0x29c>
 800722a:	ab0c      	add	r3, sp, #48	@ 0x30
 800722c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007230:	f7f9 f998 	bl	8000564 <__aeabi_i2d>
 8007234:	4622      	mov	r2, r4
 8007236:	462b      	mov	r3, r5
 8007238:	f7f9 f9fe 	bl	8000638 <__aeabi_dmul>
 800723c:	4652      	mov	r2, sl
 800723e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8007242:	465b      	mov	r3, fp
 8007244:	4620      	mov	r0, r4
 8007246:	4629      	mov	r1, r5
 8007248:	f7f9 f9f6 	bl	8000638 <__aeabi_dmul>
 800724c:	3e01      	subs	r6, #1
 800724e:	4604      	mov	r4, r0
 8007250:	460d      	mov	r5, r1
 8007252:	e716      	b.n	8007082 <__kernel_rem_pio2+0x2c2>
 8007254:	9906      	ldr	r1, [sp, #24]
 8007256:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800725a:	9106      	str	r1, [sp, #24]
 800725c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8007260:	f7f9 f9ea 	bl	8000638 <__aeabi_dmul>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4650      	mov	r0, sl
 800726a:	4659      	mov	r1, fp
 800726c:	f7f9 f82e 	bl	80002cc <__adddf3>
 8007270:	3601      	adds	r6, #1
 8007272:	4682      	mov	sl, r0
 8007274:	468b      	mov	fp, r1
 8007276:	9b00      	ldr	r3, [sp, #0]
 8007278:	429e      	cmp	r6, r3
 800727a:	dc01      	bgt.n	8007280 <__kernel_rem_pio2+0x4c0>
 800727c:	42ae      	cmp	r6, r5
 800727e:	dde9      	ble.n	8007254 <__kernel_rem_pio2+0x494>
 8007280:	ab48      	add	r3, sp, #288	@ 0x120
 8007282:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007286:	e9c5 ab00 	strd	sl, fp, [r5]
 800728a:	3c01      	subs	r4, #1
 800728c:	e6fd      	b.n	800708a <__kernel_rem_pio2+0x2ca>
 800728e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8007290:	2b02      	cmp	r3, #2
 8007292:	dc0b      	bgt.n	80072ac <__kernel_rem_pio2+0x4ec>
 8007294:	2b00      	cmp	r3, #0
 8007296:	dc35      	bgt.n	8007304 <__kernel_rem_pio2+0x544>
 8007298:	d059      	beq.n	800734e <__kernel_rem_pio2+0x58e>
 800729a:	9b02      	ldr	r3, [sp, #8]
 800729c:	f003 0007 	and.w	r0, r3, #7
 80072a0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80072a4:	ecbd 8b02 	vpop	{d8}
 80072a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ac:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d1f3      	bne.n	800729a <__kernel_rem_pio2+0x4da>
 80072b2:	9b05      	ldr	r3, [sp, #20]
 80072b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80072b8:	eb0d 0403 	add.w	r4, sp, r3
 80072bc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80072c0:	4625      	mov	r5, r4
 80072c2:	46c2      	mov	sl, r8
 80072c4:	f1ba 0f00 	cmp.w	sl, #0
 80072c8:	dc69      	bgt.n	800739e <__kernel_rem_pio2+0x5de>
 80072ca:	4645      	mov	r5, r8
 80072cc:	2d01      	cmp	r5, #1
 80072ce:	f300 8087 	bgt.w	80073e0 <__kernel_rem_pio2+0x620>
 80072d2:	9c05      	ldr	r4, [sp, #20]
 80072d4:	ab48      	add	r3, sp, #288	@ 0x120
 80072d6:	441c      	add	r4, r3
 80072d8:	2000      	movs	r0, #0
 80072da:	2100      	movs	r1, #0
 80072dc:	f1b8 0f01 	cmp.w	r8, #1
 80072e0:	f300 809c 	bgt.w	800741c <__kernel_rem_pio2+0x65c>
 80072e4:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80072e8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80072ec:	f1b9 0f00 	cmp.w	r9, #0
 80072f0:	f040 80a6 	bne.w	8007440 <__kernel_rem_pio2+0x680>
 80072f4:	9b04      	ldr	r3, [sp, #16]
 80072f6:	e9c3 5600 	strd	r5, r6, [r3]
 80072fa:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80072fe:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007302:	e7ca      	b.n	800729a <__kernel_rem_pio2+0x4da>
 8007304:	9d05      	ldr	r5, [sp, #20]
 8007306:	ab48      	add	r3, sp, #288	@ 0x120
 8007308:	441d      	add	r5, r3
 800730a:	4644      	mov	r4, r8
 800730c:	2000      	movs	r0, #0
 800730e:	2100      	movs	r1, #0
 8007310:	2c00      	cmp	r4, #0
 8007312:	da35      	bge.n	8007380 <__kernel_rem_pio2+0x5c0>
 8007314:	f1b9 0f00 	cmp.w	r9, #0
 8007318:	d038      	beq.n	800738c <__kernel_rem_pio2+0x5cc>
 800731a:	4602      	mov	r2, r0
 800731c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007320:	9c04      	ldr	r4, [sp, #16]
 8007322:	e9c4 2300 	strd	r2, r3, [r4]
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800732e:	f7f8 ffcb 	bl	80002c8 <__aeabi_dsub>
 8007332:	ad4a      	add	r5, sp, #296	@ 0x128
 8007334:	2401      	movs	r4, #1
 8007336:	45a0      	cmp	r8, r4
 8007338:	da2b      	bge.n	8007392 <__kernel_rem_pio2+0x5d2>
 800733a:	f1b9 0f00 	cmp.w	r9, #0
 800733e:	d002      	beq.n	8007346 <__kernel_rem_pio2+0x586>
 8007340:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007344:	4619      	mov	r1, r3
 8007346:	9b04      	ldr	r3, [sp, #16]
 8007348:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800734c:	e7a5      	b.n	800729a <__kernel_rem_pio2+0x4da>
 800734e:	9c05      	ldr	r4, [sp, #20]
 8007350:	ab48      	add	r3, sp, #288	@ 0x120
 8007352:	441c      	add	r4, r3
 8007354:	2000      	movs	r0, #0
 8007356:	2100      	movs	r1, #0
 8007358:	f1b8 0f00 	cmp.w	r8, #0
 800735c:	da09      	bge.n	8007372 <__kernel_rem_pio2+0x5b2>
 800735e:	f1b9 0f00 	cmp.w	r9, #0
 8007362:	d002      	beq.n	800736a <__kernel_rem_pio2+0x5aa>
 8007364:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007368:	4619      	mov	r1, r3
 800736a:	9b04      	ldr	r3, [sp, #16]
 800736c:	e9c3 0100 	strd	r0, r1, [r3]
 8007370:	e793      	b.n	800729a <__kernel_rem_pio2+0x4da>
 8007372:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007376:	f7f8 ffa9 	bl	80002cc <__adddf3>
 800737a:	f108 38ff 	add.w	r8, r8, #4294967295
 800737e:	e7eb      	b.n	8007358 <__kernel_rem_pio2+0x598>
 8007380:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007384:	f7f8 ffa2 	bl	80002cc <__adddf3>
 8007388:	3c01      	subs	r4, #1
 800738a:	e7c1      	b.n	8007310 <__kernel_rem_pio2+0x550>
 800738c:	4602      	mov	r2, r0
 800738e:	460b      	mov	r3, r1
 8007390:	e7c6      	b.n	8007320 <__kernel_rem_pio2+0x560>
 8007392:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8007396:	f7f8 ff99 	bl	80002cc <__adddf3>
 800739a:	3401      	adds	r4, #1
 800739c:	e7cb      	b.n	8007336 <__kernel_rem_pio2+0x576>
 800739e:	ed35 7b02 	vldmdb	r5!, {d7}
 80073a2:	ed8d 7b00 	vstr	d7, [sp]
 80073a6:	ed95 7b02 	vldr	d7, [r5, #8]
 80073aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073ae:	ec53 2b17 	vmov	r2, r3, d7
 80073b2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80073b6:	f7f8 ff89 	bl	80002cc <__adddf3>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	4606      	mov	r6, r0
 80073c0:	460f      	mov	r7, r1
 80073c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80073c6:	f7f8 ff7f 	bl	80002c8 <__aeabi_dsub>
 80073ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80073ce:	f7f8 ff7d 	bl	80002cc <__adddf3>
 80073d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073d6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80073da:	e9c5 6700 	strd	r6, r7, [r5]
 80073de:	e771      	b.n	80072c4 <__kernel_rem_pio2+0x504>
 80073e0:	ed34 7b02 	vldmdb	r4!, {d7}
 80073e4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80073e8:	ec51 0b17 	vmov	r0, r1, d7
 80073ec:	4652      	mov	r2, sl
 80073ee:	465b      	mov	r3, fp
 80073f0:	ed8d 7b00 	vstr	d7, [sp]
 80073f4:	f7f8 ff6a 	bl	80002cc <__adddf3>
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4606      	mov	r6, r0
 80073fe:	460f      	mov	r7, r1
 8007400:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007404:	f7f8 ff60 	bl	80002c8 <__aeabi_dsub>
 8007408:	4652      	mov	r2, sl
 800740a:	465b      	mov	r3, fp
 800740c:	f7f8 ff5e 	bl	80002cc <__adddf3>
 8007410:	3d01      	subs	r5, #1
 8007412:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007416:	e9c4 6700 	strd	r6, r7, [r4]
 800741a:	e757      	b.n	80072cc <__kernel_rem_pio2+0x50c>
 800741c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007420:	f7f8 ff54 	bl	80002cc <__adddf3>
 8007424:	f108 38ff 	add.w	r8, r8, #4294967295
 8007428:	e758      	b.n	80072dc <__kernel_rem_pio2+0x51c>
 800742a:	bf00      	nop
 800742c:	f3af 8000 	nop.w
	...
 8007438:	41700000 	.word	0x41700000
 800743c:	3e700000 	.word	0x3e700000
 8007440:	9b04      	ldr	r3, [sp, #16]
 8007442:	9a04      	ldr	r2, [sp, #16]
 8007444:	601d      	str	r5, [r3, #0]
 8007446:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800744a:	605c      	str	r4, [r3, #4]
 800744c:	609f      	str	r7, [r3, #8]
 800744e:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 8007452:	60d3      	str	r3, [r2, #12]
 8007454:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007458:	6110      	str	r0, [r2, #16]
 800745a:	6153      	str	r3, [r2, #20]
 800745c:	e71d      	b.n	800729a <__kernel_rem_pio2+0x4da>
 800745e:	bf00      	nop

08007460 <scalbn>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	ec55 4b10 	vmov	r4, r5, d0
 8007466:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800746a:	4606      	mov	r6, r0
 800746c:	462b      	mov	r3, r5
 800746e:	b991      	cbnz	r1, 8007496 <scalbn+0x36>
 8007470:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8007474:	4323      	orrs	r3, r4
 8007476:	d03b      	beq.n	80074f0 <scalbn+0x90>
 8007478:	4b33      	ldr	r3, [pc, #204]	@ (8007548 <scalbn+0xe8>)
 800747a:	4620      	mov	r0, r4
 800747c:	4629      	mov	r1, r5
 800747e:	2200      	movs	r2, #0
 8007480:	f7f9 f8da 	bl	8000638 <__aeabi_dmul>
 8007484:	4b31      	ldr	r3, [pc, #196]	@ (800754c <scalbn+0xec>)
 8007486:	429e      	cmp	r6, r3
 8007488:	4604      	mov	r4, r0
 800748a:	460d      	mov	r5, r1
 800748c:	da0f      	bge.n	80074ae <scalbn+0x4e>
 800748e:	a326      	add	r3, pc, #152	@ (adr r3, 8007528 <scalbn+0xc8>)
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	e01e      	b.n	80074d4 <scalbn+0x74>
 8007496:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800749a:	4291      	cmp	r1, r2
 800749c:	d10b      	bne.n	80074b6 <scalbn+0x56>
 800749e:	4622      	mov	r2, r4
 80074a0:	4620      	mov	r0, r4
 80074a2:	4629      	mov	r1, r5
 80074a4:	f7f8 ff12 	bl	80002cc <__adddf3>
 80074a8:	4604      	mov	r4, r0
 80074aa:	460d      	mov	r5, r1
 80074ac:	e020      	b.n	80074f0 <scalbn+0x90>
 80074ae:	460b      	mov	r3, r1
 80074b0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80074b4:	3936      	subs	r1, #54	@ 0x36
 80074b6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80074ba:	4296      	cmp	r6, r2
 80074bc:	dd0d      	ble.n	80074da <scalbn+0x7a>
 80074be:	2d00      	cmp	r5, #0
 80074c0:	a11b      	add	r1, pc, #108	@ (adr r1, 8007530 <scalbn+0xd0>)
 80074c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074c6:	da02      	bge.n	80074ce <scalbn+0x6e>
 80074c8:	a11b      	add	r1, pc, #108	@ (adr r1, 8007538 <scalbn+0xd8>)
 80074ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074ce:	a318      	add	r3, pc, #96	@ (adr r3, 8007530 <scalbn+0xd0>)
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	f7f9 f8b0 	bl	8000638 <__aeabi_dmul>
 80074d8:	e7e6      	b.n	80074a8 <scalbn+0x48>
 80074da:	1872      	adds	r2, r6, r1
 80074dc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80074e0:	428a      	cmp	r2, r1
 80074e2:	dcec      	bgt.n	80074be <scalbn+0x5e>
 80074e4:	2a00      	cmp	r2, #0
 80074e6:	dd06      	ble.n	80074f6 <scalbn+0x96>
 80074e8:	f36f 531e 	bfc	r3, #20, #11
 80074ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80074f0:	ec45 4b10 	vmov	d0, r4, r5
 80074f4:	bd70      	pop	{r4, r5, r6, pc}
 80074f6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80074fa:	da08      	bge.n	800750e <scalbn+0xae>
 80074fc:	2d00      	cmp	r5, #0
 80074fe:	a10a      	add	r1, pc, #40	@ (adr r1, 8007528 <scalbn+0xc8>)
 8007500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007504:	dac3      	bge.n	800748e <scalbn+0x2e>
 8007506:	a10e      	add	r1, pc, #56	@ (adr r1, 8007540 <scalbn+0xe0>)
 8007508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800750c:	e7bf      	b.n	800748e <scalbn+0x2e>
 800750e:	3236      	adds	r2, #54	@ 0x36
 8007510:	f36f 531e 	bfc	r3, #20, #11
 8007514:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007518:	4620      	mov	r0, r4
 800751a:	4b0d      	ldr	r3, [pc, #52]	@ (8007550 <scalbn+0xf0>)
 800751c:	4629      	mov	r1, r5
 800751e:	2200      	movs	r2, #0
 8007520:	e7d8      	b.n	80074d4 <scalbn+0x74>
 8007522:	bf00      	nop
 8007524:	f3af 8000 	nop.w
 8007528:	c2f8f359 	.word	0xc2f8f359
 800752c:	01a56e1f 	.word	0x01a56e1f
 8007530:	8800759c 	.word	0x8800759c
 8007534:	7e37e43c 	.word	0x7e37e43c
 8007538:	8800759c 	.word	0x8800759c
 800753c:	fe37e43c 	.word	0xfe37e43c
 8007540:	c2f8f359 	.word	0xc2f8f359
 8007544:	81a56e1f 	.word	0x81a56e1f
 8007548:	43500000 	.word	0x43500000
 800754c:	ffff3cb0 	.word	0xffff3cb0
 8007550:	3c900000 	.word	0x3c900000
 8007554:	00000000 	.word	0x00000000

08007558 <floor>:
 8007558:	ec51 0b10 	vmov	r0, r1, d0
 800755c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007568:	2e13      	cmp	r6, #19
 800756a:	460c      	mov	r4, r1
 800756c:	4605      	mov	r5, r0
 800756e:	4680      	mov	r8, r0
 8007570:	dc34      	bgt.n	80075dc <floor+0x84>
 8007572:	2e00      	cmp	r6, #0
 8007574:	da17      	bge.n	80075a6 <floor+0x4e>
 8007576:	a332      	add	r3, pc, #200	@ (adr r3, 8007640 <floor+0xe8>)
 8007578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757c:	f7f8 fea6 	bl	80002cc <__adddf3>
 8007580:	2200      	movs	r2, #0
 8007582:	2300      	movs	r3, #0
 8007584:	f7f9 fae8 	bl	8000b58 <__aeabi_dcmpgt>
 8007588:	b150      	cbz	r0, 80075a0 <floor+0x48>
 800758a:	2c00      	cmp	r4, #0
 800758c:	da55      	bge.n	800763a <floor+0xe2>
 800758e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007592:	432c      	orrs	r4, r5
 8007594:	2500      	movs	r5, #0
 8007596:	42ac      	cmp	r4, r5
 8007598:	4c2b      	ldr	r4, [pc, #172]	@ (8007648 <floor+0xf0>)
 800759a:	bf08      	it	eq
 800759c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80075a0:	4621      	mov	r1, r4
 80075a2:	4628      	mov	r0, r5
 80075a4:	e023      	b.n	80075ee <floor+0x96>
 80075a6:	4f29      	ldr	r7, [pc, #164]	@ (800764c <floor+0xf4>)
 80075a8:	4137      	asrs	r7, r6
 80075aa:	ea01 0307 	and.w	r3, r1, r7
 80075ae:	4303      	orrs	r3, r0
 80075b0:	d01d      	beq.n	80075ee <floor+0x96>
 80075b2:	a323      	add	r3, pc, #140	@ (adr r3, 8007640 <floor+0xe8>)
 80075b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b8:	f7f8 fe88 	bl	80002cc <__adddf3>
 80075bc:	2200      	movs	r2, #0
 80075be:	2300      	movs	r3, #0
 80075c0:	f7f9 faca 	bl	8000b58 <__aeabi_dcmpgt>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d0eb      	beq.n	80075a0 <floor+0x48>
 80075c8:	2c00      	cmp	r4, #0
 80075ca:	bfbe      	ittt	lt
 80075cc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80075d0:	4133      	asrlt	r3, r6
 80075d2:	18e4      	addlt	r4, r4, r3
 80075d4:	ea24 0407 	bic.w	r4, r4, r7
 80075d8:	2500      	movs	r5, #0
 80075da:	e7e1      	b.n	80075a0 <floor+0x48>
 80075dc:	2e33      	cmp	r6, #51	@ 0x33
 80075de:	dd0a      	ble.n	80075f6 <floor+0x9e>
 80075e0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80075e4:	d103      	bne.n	80075ee <floor+0x96>
 80075e6:	4602      	mov	r2, r0
 80075e8:	460b      	mov	r3, r1
 80075ea:	f7f8 fe6f 	bl	80002cc <__adddf3>
 80075ee:	ec41 0b10 	vmov	d0, r0, r1
 80075f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075f6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80075fa:	f04f 37ff 	mov.w	r7, #4294967295
 80075fe:	40df      	lsrs	r7, r3
 8007600:	4207      	tst	r7, r0
 8007602:	d0f4      	beq.n	80075ee <floor+0x96>
 8007604:	a30e      	add	r3, pc, #56	@ (adr r3, 8007640 <floor+0xe8>)
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	f7f8 fe5f 	bl	80002cc <__adddf3>
 800760e:	2200      	movs	r2, #0
 8007610:	2300      	movs	r3, #0
 8007612:	f7f9 faa1 	bl	8000b58 <__aeabi_dcmpgt>
 8007616:	2800      	cmp	r0, #0
 8007618:	d0c2      	beq.n	80075a0 <floor+0x48>
 800761a:	2c00      	cmp	r4, #0
 800761c:	da0a      	bge.n	8007634 <floor+0xdc>
 800761e:	2e14      	cmp	r6, #20
 8007620:	d101      	bne.n	8007626 <floor+0xce>
 8007622:	3401      	adds	r4, #1
 8007624:	e006      	b.n	8007634 <floor+0xdc>
 8007626:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800762a:	2301      	movs	r3, #1
 800762c:	40b3      	lsls	r3, r6
 800762e:	441d      	add	r5, r3
 8007630:	4545      	cmp	r5, r8
 8007632:	d3f6      	bcc.n	8007622 <floor+0xca>
 8007634:	ea25 0507 	bic.w	r5, r5, r7
 8007638:	e7b2      	b.n	80075a0 <floor+0x48>
 800763a:	2500      	movs	r5, #0
 800763c:	462c      	mov	r4, r5
 800763e:	e7af      	b.n	80075a0 <floor+0x48>
 8007640:	8800759c 	.word	0x8800759c
 8007644:	7e37e43c 	.word	0x7e37e43c
 8007648:	bff00000 	.word	0xbff00000
 800764c:	000fffff 	.word	0x000fffff

08007650 <_init>:
 8007650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007652:	bf00      	nop
 8007654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007656:	bc08      	pop	{r3}
 8007658:	469e      	mov	lr, r3
 800765a:	4770      	bx	lr

0800765c <_fini>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	bf00      	nop
 8007660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007662:	bc08      	pop	{r3}
 8007664:	469e      	mov	lr, r3
 8007666:	4770      	bx	lr
