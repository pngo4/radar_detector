
radar_detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005860  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005a30  08005a30  00006a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa4  08005aa4  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005aa4  08005aa4  00006aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005aac  08005aac  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aac  08005aac  00006aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ab0  08005ab0  00006ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005ab4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000060  08005b14  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08005b14  00007334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010959  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002533  00000000  00000000  000179e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00019f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc9  00000000  00000000  0001ae30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022aa4  00000000  00000000  0001b9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012177  00000000  00000000  0003e49d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3160  00000000  00000000  00050614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123774  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004478  00000000  00000000  001237b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00127c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a18 	.word	0x08005a18

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005a18 	.word	0x08005a18

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <get_median>:
uint32_t store_millis;
uint32_t value1 = 0; //first measured value
uint32_t value2 = 0; //second measured value
uint16_t distance = 0; //in cm

static uint32_t get_median(uint32_t* values, uint8_t size) {
 80005ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005f0:	b089      	sub	sp, #36	@ 0x24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	460b      	mov	r3, r1
 80005f8:	70fb      	strb	r3, [r7, #3]
 80005fa:	466b      	mov	r3, sp
 80005fc:	461e      	mov	r6, r3
	uint32_t sorted[size];
 80005fe:	78f9      	ldrb	r1, [r7, #3]
 8000600:	460b      	mov	r3, r1
 8000602:	3b01      	subs	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	b2cb      	uxtb	r3, r1
 8000608:	2200      	movs	r2, #0
 800060a:	4698      	mov	r8, r3
 800060c:	4691      	mov	r9, r2
 800060e:	f04f 0200 	mov.w	r2, #0
 8000612:	f04f 0300 	mov.w	r3, #0
 8000616:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800061a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800061e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000622:	b2cb      	uxtb	r3, r1
 8000624:	2200      	movs	r2, #0
 8000626:	461c      	mov	r4, r3
 8000628:	4615      	mov	r5, r2
 800062a:	f04f 0200 	mov.w	r2, #0
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	016b      	lsls	r3, r5, #5
 8000634:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000638:	0162      	lsls	r2, r4, #5
 800063a:	460b      	mov	r3, r1
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3307      	adds	r3, #7
 8000640:	08db      	lsrs	r3, r3, #3
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	ebad 0d03 	sub.w	sp, sp, r3
 8000648:	466b      	mov	r3, sp
 800064a:	3303      	adds	r3, #3
 800064c:	089b      	lsrs	r3, r3, #2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	613b      	str	r3, [r7, #16]
	memcpy(sorted, values, size * sizeof(uint32_t));
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	461a      	mov	r2, r3
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	6938      	ldr	r0, [r7, #16]
 800065c:	f004 fd92 	bl	8005184 <memcpy>

	//bubble sort

	for(int i = 0; i < size - 1; i++) {
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
 8000664:	e029      	b.n	80006ba <get_median+0xce>
		for (int j = i + 1; j < size; j++) {
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	3301      	adds	r3, #1
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	e01e      	b.n	80006ac <get_median+0xc0>
			if(sorted[i] > sorted[j]) {
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	69fa      	ldr	r2, [r7, #28]
 8000672:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	69b9      	ldr	r1, [r7, #24]
 800067a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800067e:	429a      	cmp	r2, r3
 8000680:	d911      	bls.n	80006a6 <get_median+0xba>
				uint32_t tmp = sorted[i];
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	69fa      	ldr	r2, [r7, #28]
 8000686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800068a:	60fb      	str	r3, [r7, #12]
				sorted[i] = sorted[j];
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	69ba      	ldr	r2, [r7, #24]
 8000690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	69fa      	ldr	r2, [r7, #28]
 8000698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				sorted[j] = tmp;
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	69ba      	ldr	r2, [r7, #24]
 80006a0:	68f9      	ldr	r1, [r7, #12]
 80006a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = i + 1; j < size; j++) {
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	3301      	adds	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	69ba      	ldr	r2, [r7, #24]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbdc      	blt.n	800066e <get_median+0x82>
	for(int i = 0; i < size - 1; i++) {
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	3301      	adds	r3, #1
 80006b8:	61fb      	str	r3, [r7, #28]
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	3b01      	subs	r3, #1
 80006be:	69fa      	ldr	r2, [r7, #28]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbd0      	blt.n	8000666 <get_median+0x7a>
			}
		}
	}
	return sorted[size/2]; // median
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	085b      	lsrs	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006d2:	46b5      	mov	sp, r6
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3724      	adds	r7, #36	@ 0x24
 80006d8:	46bd      	mov	sp, r7
 80006da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080006e0 <median_filter>:

uint32_t median_filter(uint32_t new_value) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

	//reject bad data, spec for HCSR04 is around 20 cm to 400 cm
	if(new_value < 5 || new_value > 400) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d903      	bls.n	80006f6 <median_filter+0x16>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80006f4:	d90d      	bls.n	8000712 <median_filter+0x32>
		return get_median(dist_buffer, buffer_filled ? MEDIAN_FILTER_SIZE : dist_index);
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <median_filter+0x80>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <median_filter+0x24>
 80006fe:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <median_filter+0x84>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	e000      	b.n	8000706 <median_filter+0x26>
 8000704:	2307      	movs	r3, #7
 8000706:	4619      	mov	r1, r3
 8000708:	4817      	ldr	r0, [pc, #92]	@ (8000768 <median_filter+0x88>)
 800070a:	f7ff ff6f 	bl	80005ec <get_median>
 800070e:	4603      	mov	r3, r0
 8000710:	e021      	b.n	8000756 <median_filter+0x76>
	}

	dist_buffer[dist_index++] = new_value;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <median_filter+0x84>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	b2d1      	uxtb	r1, r2
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <median_filter+0x84>)
 800071c:	7011      	strb	r1, [r2, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <median_filter+0x88>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(dist_index >= MEDIAN_FILTER_SIZE) {
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <median_filter+0x84>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b06      	cmp	r3, #6
 800072e:	d905      	bls.n	800073c <median_filter+0x5c>
		dist_index = 0;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <median_filter+0x84>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
		buffer_filled = 1;
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <median_filter+0x80>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
	}

	return get_median(dist_buffer, buffer_filled ? MEDIAN_FILTER_SIZE : dist_index);
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <median_filter+0x80>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <median_filter+0x6a>
 8000744:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <median_filter+0x84>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	e000      	b.n	800074c <median_filter+0x6c>
 800074a:	2307      	movs	r3, #7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <median_filter+0x88>)
 8000750:	f7ff ff4c 	bl	80005ec <get_median>
 8000754:	4603      	mov	r3, r0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000099 	.word	0x20000099
 8000764:	20000098 	.word	0x20000098
 8000768:	2000007c 	.word	0x2000007c

0800076c <HCR04_init>:

void HCR04_init(TIM_HandleTypeDef *tim) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(tim);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f002 fea7 	bl	80034c8 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000780:	4803      	ldr	r0, [pc, #12]	@ (8000790 <HCR04_init+0x24>)
 8000782:	f001 fd73 	bl	800226c <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020000 	.word	0x40020000

08000794 <HCSR04_read>:


uint16_t HCSR04_read(TIM_HandleTypeDef *tim) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

	//set for 10 uS
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a2:	4831      	ldr	r0, [pc, #196]	@ (8000868 <HCSR04_read+0xd4>)
 80007a4:	f001 fd62 	bl	800226c <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(tim, 0);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(tim) < 10); //wait for 10 uS
 80007b0:	bf00      	nop
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b8:	2b09      	cmp	r3, #9
 80007ba:	d9fa      	bls.n	80007b2 <HCSR04_read+0x1e>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); //set back to low
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007c2:	4829      	ldr	r0, [pc, #164]	@ (8000868 <HCSR04_read+0xd4>)
 80007c4:	f001 fd52 	bl	800226c <HAL_GPIO_WritePin>

	//now reading starts
	store_millis = HAL_GetTick(); //use tick to avoid infinite while loop, stores current time
 80007c8:	f001 fa62 	bl	8001c90 <HAL_GetTick>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a27      	ldr	r2, [pc, #156]	@ (800086c <HCSR04_read+0xd8>)
 80007d0:	6013      	str	r3, [r2, #0]
	//wait for echo pin to go HIGH
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET) {
 80007d2:	e009      	b.n	80007e8 <HCSR04_read+0x54>
		if((HAL_GetTick() - store_millis) > 100) return 0; //timeout
 80007d4:	f001 fa5c 	bl	8001c90 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	4b24      	ldr	r3, [pc, #144]	@ (800086c <HCSR04_read+0xd8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	2b64      	cmp	r3, #100	@ 0x64
 80007e2:	d901      	bls.n	80007e8 <HCSR04_read+0x54>
 80007e4:	2300      	movs	r3, #0
 80007e6:	e03a      	b.n	800085e <HCSR04_read+0xca>
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET) {
 80007e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007ec:	481e      	ldr	r0, [pc, #120]	@ (8000868 <HCSR04_read+0xd4>)
 80007ee:	f001 fd25 	bl	800223c <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0ed      	beq.n	80007d4 <HCSR04_read+0x40>
	}

	value1 = __HAL_TIM_GET_COUNTER(tim);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <HCSR04_read+0xdc>)
 8000800:	6013      	str	r3, [r2, #0]

	store_millis = HAL_GetTick();//stores current time
 8000802:	f001 fa45 	bl	8001c90 <HAL_GetTick>
 8000806:	4603      	mov	r3, r0
 8000808:	4a18      	ldr	r2, [pc, #96]	@ (800086c <HCSR04_read+0xd8>)
 800080a:	6013      	str	r3, [r2, #0]
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) {
 800080c:	e009      	b.n	8000822 <HCSR04_read+0x8e>
		if((HAL_GetTick() - store_millis) > 80) return 0; // timeout
 800080e:	f001 fa3f 	bl	8001c90 <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <HCSR04_read+0xd8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	2b50      	cmp	r3, #80	@ 0x50
 800081c:	d901      	bls.n	8000822 <HCSR04_read+0x8e>
 800081e:	2300      	movs	r3, #0
 8000820:	e01d      	b.n	800085e <HCSR04_read+0xca>
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) {
 8000822:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000826:	4810      	ldr	r0, [pc, #64]	@ (8000868 <HCSR04_read+0xd4>)
 8000828:	f001 fd08 	bl	800223c <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d0ed      	beq.n	800080e <HCSR04_read+0x7a>
	}
	value2 = __HAL_TIM_GET_COUNTER(tim);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000838:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <HCSR04_read+0xe0>)
 800083a:	6013      	str	r3, [r2, #0]

	// distance = (value2 - value1) / 58;
	distance = (value2 - value1) / 58;
 800083c:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <HCSR04_read+0xe0>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HCSR04_read+0xdc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	4a0c      	ldr	r2, [pc, #48]	@ (8000878 <HCSR04_read+0xe4>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	095b      	lsrs	r3, r3, #5
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <HCSR04_read+0xe8>)
 8000852:	801a      	strh	r2, [r3, #0]

	HAL_Delay(50);
 8000854:	2032      	movs	r0, #50	@ 0x32
 8000856:	f001 fa27 	bl	8001ca8 <HAL_Delay>

	return distance;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <HCSR04_read+0xe8>)
 800085c:	881b      	ldrh	r3, [r3, #0]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020000 	.word	0x40020000
 800086c:	2000009c 	.word	0x2000009c
 8000870:	200000a0 	.word	0x200000a0
 8000874:	200000a4 	.word	0x200000a4
 8000878:	8d3dcb09 	.word	0x8d3dcb09
 800087c:	200000a8 	.word	0x200000a8

08000880 <ILI9341_SPI_Init>:

static SPI_HandleTypeDef *ili9341_spi;

/* Initialize SPI */
void ILI9341_SPI_Init(SPI_HandleTypeDef *spi_handle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

	ili9341_spi = spi_handle;
 8000888:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <ILI9341_SPI_Init+0x20>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800088e:	2200      	movs	r2, #0
 8000890:	2110      	movs	r1, #16
 8000892:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <ILI9341_SPI_Init+0x24>)
 8000894:	f001 fcea 	bl	800226c <HAL_GPIO_WritePin>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000ac 	.word	0x200000ac
 80008a4:	40020000 	.word	0x40020000

080008a8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(ili9341_spi, &SPI_Data, 1, 1);
 80008b2:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <ILI9341_SPI_Send+0x20>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	1df9      	adds	r1, r7, #7
 80008b8:	2301      	movs	r3, #1
 80008ba:	2201      	movs	r2, #1
 80008bc:	f002 fb93 	bl	8002fe6 <HAL_SPI_Transmit>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000ac 	.word	0x200000ac

080008cc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2110      	movs	r1, #16
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <ILI9341_Write_Command+0x3c>)
 80008dc:	f001 fcc6 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e6:	4809      	ldr	r0, [pc, #36]	@ (800090c <ILI9341_Write_Command+0x40>)
 80008e8:	f001 fcc0 	bl	800226c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ffda 	bl	80008a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <ILI9341_Write_Command+0x3c>)
 80008fa:	f001 fcb7 	bl	800226c <HAL_GPIO_WritePin>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40020000 	.word	0x40020000
 800090c:	40020800 	.word	0x40020800

08000910 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000920:	480a      	ldr	r0, [pc, #40]	@ (800094c <ILI9341_Write_Data+0x3c>)
 8000922:	f001 fca3 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2110      	movs	r1, #16
 800092a:	4809      	ldr	r0, [pc, #36]	@ (8000950 <ILI9341_Write_Data+0x40>)
 800092c:	f001 fc9e 	bl	800226c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ffb8 	bl	80008a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2110      	movs	r1, #16
 800093c:	4804      	ldr	r0, [pc, #16]	@ (8000950 <ILI9341_Write_Data+0x40>)
 800093e:	f001 fc95 	bl	800226c <HAL_GPIO_WritePin>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020800 	.word	0x40020800
 8000950:	40020000 	.word	0x40020000

08000954 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4604      	mov	r4, r0
 800095c:	4608      	mov	r0, r1
 800095e:	4611      	mov	r1, r2
 8000960:	461a      	mov	r2, r3
 8000962:	4623      	mov	r3, r4
 8000964:	80fb      	strh	r3, [r7, #6]
 8000966:	4603      	mov	r3, r0
 8000968:	80bb      	strh	r3, [r7, #4]
 800096a:	460b      	mov	r3, r1
 800096c:	807b      	strh	r3, [r7, #2]
 800096e:	4613      	mov	r3, r2
 8000970:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000972:	202a      	movs	r0, #42	@ 0x2a
 8000974:	f7ff ffaa 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	b29b      	uxth	r3, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ffc5 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffc0 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ffb9 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ffb4 	bl	8000910 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80009a8:	202b      	movs	r0, #43	@ 0x2b
 80009aa:	f7ff ff8f 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80009ae:	88bb      	ldrh	r3, [r7, #4]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ffaa 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80009bc:	88bb      	ldrh	r3, [r7, #4]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ffa5 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80009c6:	883b      	ldrh	r3, [r7, #0]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff9e 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80009d4:	883b      	ldrh	r3, [r7, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff99 	bl	8000910 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80009de:	202c      	movs	r0, #44	@ 0x2c
 80009e0:	f7ff ff74 	bl	80008cc <ILI9341_Write_Command>
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2180      	movs	r1, #128	@ 0x80
 80009f4:	480a      	ldr	r0, [pc, #40]	@ (8000a20 <ILI9341_Reset+0x34>)
 80009f6:	f001 fc39 	bl	800226c <HAL_GPIO_WritePin>
HAL_Delay(200);
 80009fa:	20c8      	movs	r0, #200	@ 0xc8
 80009fc:	f001 f954 	bl	8001ca8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2110      	movs	r1, #16
 8000a04:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <ILI9341_Reset+0x38>)
 8000a06:	f001 fc31 	bl	800226c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000a0a:	20c8      	movs	r0, #200	@ 0xc8
 8000a0c:	f001 f94c 	bl	8001ca8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000a10:	2201      	movs	r2, #1
 8000a12:	2180      	movs	r1, #128	@ 0x80
 8000a14:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <ILI9341_Reset+0x34>)
 8000a16:	f001 fc29 	bl	800226c <HAL_GPIO_WritePin>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020000 	.word	0x40020000

08000a28 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000a36:	2036      	movs	r0, #54	@ 0x36
 8000a38:	f7ff ff48 	bl	80008cc <ILI9341_Write_Command>
HAL_Delay(1);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f001 f933 	bl	8001ca8 <HAL_Delay>
	
switch(screen_rotation) 
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d837      	bhi.n	8000ab8 <ILI9341_Set_Rotation+0x90>
 8000a48:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <ILI9341_Set_Rotation+0x28>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000a61 	.word	0x08000a61
 8000a54:	08000a77 	.word	0x08000a77
 8000a58:	08000a8d 	.word	0x08000a8d
 8000a5c:	08000aa3 	.word	0x08000aa3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000a60:	2048      	movs	r0, #72	@ 0x48
 8000a62:	f7ff ff55 	bl	8000910 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000a66:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <ILI9341_Set_Rotation+0x9c>)
 8000a68:	22f0      	movs	r2, #240	@ 0xf0
 8000a6a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <ILI9341_Set_Rotation+0xa0>)
 8000a6e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a72:	801a      	strh	r2, [r3, #0]
			break;
 8000a74:	e021      	b.n	8000aba <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000a76:	2028      	movs	r0, #40	@ 0x28
 8000a78:	f7ff ff4a 	bl	8000910 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <ILI9341_Set_Rotation+0x9c>)
 8000a7e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a82:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000a84:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <ILI9341_Set_Rotation+0xa0>)
 8000a86:	22f0      	movs	r2, #240	@ 0xf0
 8000a88:	801a      	strh	r2, [r3, #0]
			break;
 8000a8a:	e016      	b.n	8000aba <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000a8c:	2088      	movs	r0, #136	@ 0x88
 8000a8e:	f7ff ff3f 	bl	8000910 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <ILI9341_Set_Rotation+0x9c>)
 8000a94:	22f0      	movs	r2, #240	@ 0xf0
 8000a96:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000a98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <ILI9341_Set_Rotation+0xa0>)
 8000a9a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a9e:	801a      	strh	r2, [r3, #0]
			break;
 8000aa0:	e00b      	b.n	8000aba <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000aa2:	20e8      	movs	r0, #232	@ 0xe8
 8000aa4:	f7ff ff34 	bl	8000910 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <ILI9341_Set_Rotation+0x9c>)
 8000aaa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000aae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <ILI9341_Set_Rotation+0xa0>)
 8000ab2:	22f0      	movs	r2, #240	@ 0xf0
 8000ab4:	801a      	strh	r2, [r3, #0]
			break;
 8000ab6:	e000      	b.n	8000aba <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000ab8:	bf00      	nop
	}
}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000002 	.word	0x20000002
 8000ac8:	20000000 	.word	0x20000000

08000acc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2180      	movs	r1, #128	@ 0x80
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <ILI9341_Enable+0x14>)
 8000ad6:	f001 fbc9 	bl	800226c <HAL_GPIO_WritePin>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(SPI_HandleTypeDef *spi_handle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

ILI9341_Enable();
 8000aec:	f7ff ffee 	bl	8000acc <ILI9341_Enable>
ILI9341_SPI_Init(spi_handle);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fec5 	bl	8000880 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000af6:	f7ff ff79 	bl	80009ec <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff fee6 	bl	80008cc <ILI9341_Write_Command>
HAL_Delay(1000);
 8000b00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b04:	f001 f8d0 	bl	8001ca8 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000b08:	20cb      	movs	r0, #203	@ 0xcb
 8000b0a:	f7ff fedf 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000b0e:	2039      	movs	r0, #57	@ 0x39
 8000b10:	f7ff fefe 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000b14:	202c      	movs	r0, #44	@ 0x2c
 8000b16:	f7ff fefb 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fef8 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000b20:	2034      	movs	r0, #52	@ 0x34
 8000b22:	f7ff fef5 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000b26:	2002      	movs	r0, #2
 8000b28:	f7ff fef2 	bl	8000910 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000b2c:	20cf      	movs	r0, #207	@ 0xcf
 8000b2e:	f7ff fecd 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff feec 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000b38:	20c1      	movs	r0, #193	@ 0xc1
 8000b3a:	f7ff fee9 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000b3e:	2030      	movs	r0, #48	@ 0x30
 8000b40:	f7ff fee6 	bl	8000910 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000b44:	20e8      	movs	r0, #232	@ 0xe8
 8000b46:	f7ff fec1 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000b4a:	2085      	movs	r0, #133	@ 0x85
 8000b4c:	f7ff fee0 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fedd 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000b56:	2078      	movs	r0, #120	@ 0x78
 8000b58:	f7ff feda 	bl	8000910 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000b5c:	20ea      	movs	r0, #234	@ 0xea
 8000b5e:	f7ff feb5 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff fed4 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fed1 	bl	8000910 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000b6e:	20ed      	movs	r0, #237	@ 0xed
 8000b70:	f7ff feac 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000b74:	2064      	movs	r0, #100	@ 0x64
 8000b76:	f7ff fecb 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f7ff fec8 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000b80:	2012      	movs	r0, #18
 8000b82:	f7ff fec5 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000b86:	2081      	movs	r0, #129	@ 0x81
 8000b88:	f7ff fec2 	bl	8000910 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000b8c:	20f7      	movs	r0, #247	@ 0xf7
 8000b8e:	f7ff fe9d 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000b92:	2020      	movs	r0, #32
 8000b94:	f7ff febc 	bl	8000910 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000b98:	20c0      	movs	r0, #192	@ 0xc0
 8000b9a:	f7ff fe97 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000b9e:	2023      	movs	r0, #35	@ 0x23
 8000ba0:	f7ff feb6 	bl	8000910 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000ba4:	20c1      	movs	r0, #193	@ 0xc1
 8000ba6:	f7ff fe91 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000baa:	2010      	movs	r0, #16
 8000bac:	f7ff feb0 	bl	8000910 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000bb0:	20c5      	movs	r0, #197	@ 0xc5
 8000bb2:	f7ff fe8b 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000bb6:	203e      	movs	r0, #62	@ 0x3e
 8000bb8:	f7ff feaa 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000bbc:	2028      	movs	r0, #40	@ 0x28
 8000bbe:	f7ff fea7 	bl	8000910 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000bc2:	20c7      	movs	r0, #199	@ 0xc7
 8000bc4:	f7ff fe82 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000bc8:	2086      	movs	r0, #134	@ 0x86
 8000bca:	f7ff fea1 	bl	8000910 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000bce:	2036      	movs	r0, #54	@ 0x36
 8000bd0:	f7ff fe7c 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000bd4:	2048      	movs	r0, #72	@ 0x48
 8000bd6:	f7ff fe9b 	bl	8000910 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000bda:	203a      	movs	r0, #58	@ 0x3a
 8000bdc:	f7ff fe76 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000be0:	2055      	movs	r0, #85	@ 0x55
 8000be2:	f7ff fe95 	bl	8000910 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000be6:	20b1      	movs	r0, #177	@ 0xb1
 8000be8:	f7ff fe70 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fe8f 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000bf2:	2018      	movs	r0, #24
 8000bf4:	f7ff fe8c 	bl	8000910 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000bf8:	20b6      	movs	r0, #182	@ 0xb6
 8000bfa:	f7ff fe67 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000bfe:	2008      	movs	r0, #8
 8000c00:	f7ff fe86 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000c04:	2082      	movs	r0, #130	@ 0x82
 8000c06:	f7ff fe83 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000c0a:	2027      	movs	r0, #39	@ 0x27
 8000c0c:	f7ff fe80 	bl	8000910 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000c10:	20f2      	movs	r0, #242	@ 0xf2
 8000c12:	f7ff fe5b 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fe7a 	bl	8000910 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000c1c:	2026      	movs	r0, #38	@ 0x26
 8000c1e:	f7ff fe55 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff fe74 	bl	8000910 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000c28:	20e0      	movs	r0, #224	@ 0xe0
 8000c2a:	f7ff fe4f 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f7ff fe6e 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000c34:	2031      	movs	r0, #49	@ 0x31
 8000c36:	f7ff fe6b 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000c3a:	202b      	movs	r0, #43	@ 0x2b
 8000c3c:	f7ff fe68 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000c40:	200c      	movs	r0, #12
 8000c42:	f7ff fe65 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000c46:	200e      	movs	r0, #14
 8000c48:	f7ff fe62 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000c4c:	2008      	movs	r0, #8
 8000c4e:	f7ff fe5f 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000c52:	204e      	movs	r0, #78	@ 0x4e
 8000c54:	f7ff fe5c 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000c58:	20f1      	movs	r0, #241	@ 0xf1
 8000c5a:	f7ff fe59 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000c5e:	2037      	movs	r0, #55	@ 0x37
 8000c60:	f7ff fe56 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000c64:	2007      	movs	r0, #7
 8000c66:	f7ff fe53 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000c6a:	2010      	movs	r0, #16
 8000c6c:	f7ff fe50 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f7ff fe4d 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000c76:	200e      	movs	r0, #14
 8000c78:	f7ff fe4a 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000c7c:	2009      	movs	r0, #9
 8000c7e:	f7ff fe47 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fe44 	bl	8000910 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000c88:	20e1      	movs	r0, #225	@ 0xe1
 8000c8a:	f7ff fe1f 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff fe3e 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000c94:	200e      	movs	r0, #14
 8000c96:	f7ff fe3b 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000c9a:	2014      	movs	r0, #20
 8000c9c:	f7ff fe38 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f7ff fe35 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000ca6:	2011      	movs	r0, #17
 8000ca8:	f7ff fe32 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000cac:	2007      	movs	r0, #7
 8000cae:	f7ff fe2f 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000cb2:	2031      	movs	r0, #49	@ 0x31
 8000cb4:	f7ff fe2c 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000cb8:	20c1      	movs	r0, #193	@ 0xc1
 8000cba:	f7ff fe29 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000cbe:	2048      	movs	r0, #72	@ 0x48
 8000cc0:	f7ff fe26 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000cc4:	2008      	movs	r0, #8
 8000cc6:	f7ff fe23 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000cca:	200f      	movs	r0, #15
 8000ccc:	f7ff fe20 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000cd0:	200c      	movs	r0, #12
 8000cd2:	f7ff fe1d 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000cd6:	2031      	movs	r0, #49	@ 0x31
 8000cd8:	f7ff fe1a 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000cdc:	2036      	movs	r0, #54	@ 0x36
 8000cde:	f7ff fe17 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f7ff fe14 	bl	8000910 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000ce8:	2011      	movs	r0, #17
 8000cea:	f7ff fdef 	bl	80008cc <ILI9341_Write_Command>
HAL_Delay(120);
 8000cee:	2078      	movs	r0, #120	@ 0x78
 8000cf0:	f000 ffda 	bl	8001ca8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000cf4:	2029      	movs	r0, #41	@ 0x29
 8000cf6:	f7ff fde9 	bl	80008cc <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fe94 	bl	8000a28 <ILI9341_Set_Rotation>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d0c:	b08d      	sub	sp, #52	@ 0x34
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	6039      	str	r1, [r7, #0]
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	466b      	mov	r3, sp
 8000d18:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d26:	d202      	bcs.n	8000d2e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d2c:	e002      	b.n	8000d34 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000d2e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d3a:	4840      	ldr	r0, [pc, #256]	@ (8000e3c <ILI9341_Draw_Colour_Burst+0x134>)
 8000d3c:	f001 fa96 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2110      	movs	r1, #16
 8000d44:	483e      	ldr	r0, [pc, #248]	@ (8000e40 <ILI9341_Draw_Colour_Burst+0x138>)
 8000d46:	f001 fa91 	bl	800226c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8000d54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000d56:	460b      	mov	r3, r1
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	4699      	mov	r9, r3
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d76:	2300      	movs	r3, #0
 8000d78:	460c      	mov	r4, r1
 8000d7a:	461d      	mov	r5, r3
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	00eb      	lsls	r3, r5, #3
 8000d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d8a:	00e2      	lsls	r2, r4, #3
 8000d8c:	1dcb      	adds	r3, r1, #7
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	ebad 0d03 	sub.w	sp, sp, r3
 8000d96:	466b      	mov	r3, sp
 8000d98:	3300      	adds	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000da0:	e00e      	b.n	8000dc0 <ILI9341_Draw_Colour_Burst+0xb8>
	{
		burst_buffer[j] = 	chifted;
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da6:	4413      	add	r3, r2
 8000da8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000dac:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db0:	3301      	adds	r3, #1
 8000db2:	88fa      	ldrh	r2, [r7, #6]
 8000db4:	b2d1      	uxtb	r1, r2
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d3ec      	bcc.n	8000da2 <ILI9341_Draw_Colour_Burst+0x9a>
	}

uint32_t Sending_Size = Size*2;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ddc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000de0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000de2:	fb01 f202 	mul.w	r2, r1, r2
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d011      	beq.n	8000e14 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000df4:	e00a      	b.n	8000e0c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(ili9341_spi, (unsigned char *)burst_buffer, Buffer_Size, 10);
 8000df6:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <ILI9341_Draw_Colour_Burst+0x13c>)
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	230a      	movs	r3, #10
 8000e00:	69b9      	ldr	r1, [r7, #24]
 8000e02:	f002 f8f0 	bl	8002fe6 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e08:	3301      	adds	r3, #1
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3f0      	bcc.n	8000df6 <ILI9341_Draw_Colour_Burst+0xee>
		}
}

//REMAINDER!
HAL_SPI_Transmit(ili9341_spi, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <ILI9341_Draw_Colour_Burst+0x13c>)
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	69b9      	ldr	r1, [r7, #24]
 8000e20:	f002 f8e1 	bl	8002fe6 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2110      	movs	r1, #16
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <ILI9341_Draw_Colour_Burst+0x138>)
 8000e2a:	f001 fa1f 	bl	800226c <HAL_GPIO_WritePin>
 8000e2e:	46b5      	mov	sp, r6
}
 8000e30:	bf00      	nop
 8000e32:	3734      	adds	r7, #52	@ 0x34
 8000e34:	46bd      	mov	sp, r7
 8000e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	200000ac 	.word	0x200000ac

08000e48 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <ILI9341_Fill_Screen+0x44>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <ILI9341_Fill_Screen+0x48>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff fd77 	bl	8000954 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <ILI9341_Fill_Screen+0x44>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <ILI9341_Fill_Screen+0x48>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff42 	bl	8000d08 <ILI9341_Draw_Colour_Burst>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000002 	.word	0x20000002
 8000e90:	20000000 	.word	0x20000000

08000e94 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	80bb      	strh	r3, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000ea6:	4b60      	ldr	r3, [pc, #384]	@ (8001028 <ILI9341_Draw_Pixel+0x194>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	f080 80b5 	bcs.w	800101e <ILI9341_Draw_Pixel+0x18a>
 8000eb4:	4b5d      	ldr	r3, [pc, #372]	@ (800102c <ILI9341_Draw_Pixel+0x198>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	88ba      	ldrh	r2, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f080 80ae 	bcs.w	800101e <ILI9341_Draw_Pixel+0x18a>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec8:	4859      	ldr	r0, [pc, #356]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000eca:	f001 f9cf 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	4858      	ldr	r0, [pc, #352]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000ed4:	f001 f9ca 	bl	800226c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000ed8:	202a      	movs	r0, #42	@ 0x2a
 8000eda:	f7ff fce5 	bl	80008a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ee4:	4852      	ldr	r0, [pc, #328]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000ee6:	f001 f9c1 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000eea:	2201      	movs	r2, #1
 8000eec:	2110      	movs	r1, #16
 8000eee:	4851      	ldr	r0, [pc, #324]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000ef0:	f001 f9bc 	bl	800226c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	484e      	ldr	r0, [pc, #312]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000efa:	f001 f9b7 	bl	800226c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	753b      	strb	r3, [r7, #20]
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	757b      	strb	r3, [r7, #21]
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	3301      	adds	r3, #1
 8000f12:	121b      	asrs	r3, r3, #8
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	75bb      	strb	r3, [r7, #22]
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(ili9341_spi, Temp_Buffer, 4, 1);
 8000f22:	4b45      	ldr	r3, [pc, #276]	@ (8001038 <ILI9341_Draw_Pixel+0x1a4>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f107 0114 	add.w	r1, r7, #20
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	f002 f85a 	bl	8002fe6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2110      	movs	r1, #16
 8000f36:	483f      	ldr	r0, [pc, #252]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000f38:	f001 f998 	bl	800226c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f42:	483b      	ldr	r0, [pc, #236]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000f44:	f001 f992 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4839      	ldr	r0, [pc, #228]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000f4e:	f001 f98d 	bl	800226c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000f52:	202b      	movs	r0, #43	@ 0x2b
 8000f54:	f7ff fca8 	bl	80008a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f5e:	4834      	ldr	r0, [pc, #208]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000f60:	f001 f984 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000f64:	2201      	movs	r2, #1
 8000f66:	2110      	movs	r1, #16
 8000f68:	4832      	ldr	r0, [pc, #200]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000f6a:	f001 f97f 	bl	800226c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	4830      	ldr	r0, [pc, #192]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000f74:	f001 f97a 	bl	800226c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	743b      	strb	r3, [r7, #16]
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	747b      	strb	r3, [r7, #17]
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	121b      	asrs	r3, r3, #8
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	74bb      	strb	r3, [r7, #18]
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(ili9341_spi, Temp_Buffer1, 4, 1);
 8000f9c:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <ILI9341_Draw_Pixel+0x1a4>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f107 0110 	add.w	r1, r7, #16
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	f002 f81d 	bl	8002fe6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4820      	ldr	r0, [pc, #128]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000fb2:	f001 f95b 	bl	800226c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fbc:	481c      	ldr	r0, [pc, #112]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000fbe:	f001 f955 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	481b      	ldr	r0, [pc, #108]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000fc8:	f001 f950 	bl	800226c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000fcc:	202c      	movs	r0, #44	@ 0x2c
 8000fce:	f7ff fc6b 	bl	80008a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd8:	4815      	ldr	r0, [pc, #84]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000fda:	f001 f947 	bl	800226c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	4814      	ldr	r0, [pc, #80]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000fe4:	f001 f942 	bl	800226c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2110      	movs	r1, #16
 8000fec:	4811      	ldr	r0, [pc, #68]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000fee:	f001 f93d 	bl	800226c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	733b      	strb	r3, [r7, #12]
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(ili9341_spi, Temp_Buffer2, 2, 1);
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <ILI9341_Draw_Pixel+0x1a4>)
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	f107 010c 	add.w	r1, r7, #12
 800100a:	2301      	movs	r3, #1
 800100c:	2202      	movs	r2, #2
 800100e:	f001 ffea 	bl	8002fe6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2110      	movs	r1, #16
 8001016:	4807      	ldr	r0, [pc, #28]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8001018:	f001 f928 	bl	800226c <HAL_GPIO_WritePin>
 800101c:	e000      	b.n	8001020 <ILI9341_Draw_Pixel+0x18c>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800101e:	bf00      	nop
	
}
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000002 	.word	0x20000002
 800102c:	20000000 	.word	0x20000000
 8001030:	40020800 	.word	0x40020800
 8001034:	40020000 	.word	0x40020000
 8001038:	200000ac 	.word	0x200000ac

0800103c <ILI9341_Draw_Vertical_Line>:
ILI9341_Draw_Colour_Burst(Colour, Width);
}

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4604      	mov	r4, r0
 8001044:	4608      	mov	r0, r1
 8001046:	4611      	mov	r1, r2
 8001048:	461a      	mov	r2, r3
 800104a:	4623      	mov	r3, r4
 800104c:	80fb      	strh	r3, [r7, #6]
 800104e:	4603      	mov	r3, r0
 8001050:	80bb      	strh	r3, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	807b      	strh	r3, [r7, #2]
 8001056:	4613      	mov	r3, r2
 8001058:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800105a:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <ILI9341_Draw_Vertical_Line+0x80>)
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	b29b      	uxth	r3, r3
 8001060:	88fa      	ldrh	r2, [r7, #6]
 8001062:	429a      	cmp	r2, r3
 8001064:	d225      	bcs.n	80010b2 <ILI9341_Draw_Vertical_Line+0x76>
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <ILI9341_Draw_Vertical_Line+0x84>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	88ba      	ldrh	r2, [r7, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	d21f      	bcs.n	80010b2 <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8001072:	88ba      	ldrh	r2, [r7, #4]
 8001074:	887b      	ldrh	r3, [r7, #2]
 8001076:	4413      	add	r3, r2
 8001078:	4a11      	ldr	r2, [pc, #68]	@ (80010c0 <ILI9341_Draw_Vertical_Line+0x84>)
 800107a:	8812      	ldrh	r2, [r2, #0]
 800107c:	b292      	uxth	r2, r2
 800107e:	4293      	cmp	r3, r2
 8001080:	dd05      	ble.n	800108e <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <ILI9341_Draw_Vertical_Line+0x84>)
 8001084:	881b      	ldrh	r3, [r3, #0]
 8001086:	b29a      	uxth	r2, r3
 8001088:	88bb      	ldrh	r3, [r7, #4]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 800108e:	88ba      	ldrh	r2, [r7, #4]
 8001090:	887b      	ldrh	r3, [r7, #2]
 8001092:	4413      	add	r3, r2
 8001094:	b29b      	uxth	r3, r3
 8001096:	3b01      	subs	r3, #1
 8001098:	b29b      	uxth	r3, r3
 800109a:	88fa      	ldrh	r2, [r7, #6]
 800109c:	88b9      	ldrh	r1, [r7, #4]
 800109e:	88f8      	ldrh	r0, [r7, #6]
 80010a0:	f7ff fc58 	bl	8000954 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80010a4:	887a      	ldrh	r2, [r7, #2]
 80010a6:	883b      	ldrh	r3, [r7, #0]
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fe2c 	bl	8000d08 <ILI9341_Draw_Colour_Burst>
 80010b0:	e000      	b.n	80010b4 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80010b2:	bf00      	nop
}
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000002 	.word	0x20000002
 80010c0:	20000000 	.word	0x20000000

080010c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c4:	b5b0      	push	{r4, r5, r7, lr}
 80010c6:	b08e      	sub	sp, #56	@ 0x38
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	const char connection_msg[] = "UART to PC success \n";
 80010ca:	4b44      	ldr	r3, [pc, #272]	@ (80011dc <main+0x118>)
 80010cc:	f107 0418 	add.w	r4, r7, #24
 80010d0:	461d      	mov	r5, r3
 80010d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010da:	6020      	str	r0, [r4, #0]
 80010dc:	3404      	adds	r4, #4
 80010de:	7021      	strb	r1, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e0:	f000 fd70 	bl	8001bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 f888 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e8:	f000 fa3c 	bl	8001564 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010ec:	f000 fa10 	bl	8001510 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80010f0:	f000 f998 	bl	8001424 <MX_TIM2_Init>
  MX_TIM1_Init();
 80010f4:	f000 f922 	bl	800133c <MX_TIM1_Init>
  MX_SPI1_Init();
 80010f8:	f000 f8ea 	bl	80012d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2,(const uint8_t*) connection_msg , strlen(connection_msg), TIMEOUT);
 80010fc:	f107 0118 	add.w	r1, r7, #24
 8001100:	230f      	movs	r3, #15
 8001102:	2214      	movs	r2, #20
 8001104:	4836      	ldr	r0, [pc, #216]	@ (80011e0 <main+0x11c>)
 8001106:	f003 fc2b 	bl	8004960 <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800110a:	2100      	movs	r1, #0
 800110c:	4835      	ldr	r0, [pc, #212]	@ (80011e4 <main+0x120>)
 800110e:	f002 fa9d 	bl	800364c <HAL_TIM_PWM_Start>
  HCR04_init(&htim1);
 8001112:	4835      	ldr	r0, [pc, #212]	@ (80011e8 <main+0x124>)
 8001114:	f7ff fb2a 	bl	800076c <HCR04_init>
  ILI9341_Init(&hspi1);
 8001118:	4834      	ldr	r0, [pc, #208]	@ (80011ec <main+0x128>)
 800111a:	f7ff fce3 	bl	8000ae4 <ILI9341_Init>

  ILI9341_Fill_Screen(RED);
 800111e:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001122:	f7ff fe91 	bl	8000e48 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 8001126:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800112a:	f000 fdbd 	bl	8001ca8 <HAL_Delay>

  ILI9341_Fill_Screen(GREEN);
 800112e:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8001132:	f7ff fe89 	bl	8000e48 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 8001136:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800113a:	f000 fdb5 	bl	8001ca8 <HAL_Delay>

  ILI9341_Fill_Screen(BLUE);
 800113e:	201f      	movs	r0, #31
 8001140:	f7ff fe82 	bl	8000e48 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 8001144:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001148:	f000 fdae 	bl	8001ca8 <HAL_Delay>

  ILI9341_Fill_Screen(BLACK);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff fe7b 	bl	8000e48 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 8001152:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001156:	f000 fda7 	bl	8001ca8 <HAL_Delay>

  // Draw a single WHITE pixel at (10, 10)
  ILI9341_Draw_Pixel(10, 10, 0xFFFF);
 800115a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800115e:	210a      	movs	r1, #10
 8001160:	200a      	movs	r0, #10
 8001162:	f7ff fe97 	bl	8000e94 <ILI9341_Draw_Pixel>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(button_state == 0) {
 8001166:	4b22      	ldr	r3, [pc, #136]	@ (80011f0 <main+0x12c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1fb      	bne.n	8001166 <main+0xa2>
		  for(uint16_t angle = 0; angle <= 180; angle +=2) {
 800116e:	2300      	movs	r3, #0
 8001170:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001172:	e02e      	b.n	80011d2 <main+0x10e>
				 set_servo_angle(&htim2, TIM_CHANNEL_1, angle);
 8001174:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001176:	b2db      	uxtb	r3, r3
 8001178:	461a      	mov	r2, r3
 800117a:	2100      	movs	r1, #0
 800117c:	4819      	ldr	r0, [pc, #100]	@ (80011e4 <main+0x120>)
 800117e:	f000 fadf 	bl	8001740 <set_servo_angle>
				 uint16_t distance = HCSR04_read(&htim1);
 8001182:	4819      	ldr	r0, [pc, #100]	@ (80011e8 <main+0x124>)
 8001184:	f7ff fb06 	bl	8000794 <HCSR04_read>
 8001188:	4603      	mov	r3, r0
 800118a:	86bb      	strh	r3, [r7, #52]	@ 0x34
				 uint32_t filtered = median_filter(distance);
 800118c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff faa6 	bl	80006e0 <median_filter>
 8001194:	6338      	str	r0, [r7, #48]	@ 0x30
				 sprintf(transmit_distance_msg, "Dist: %lu cm \r\n", filtered);
 8001196:	463b      	mov	r3, r7
 8001198:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800119a:	4916      	ldr	r1, [pc, #88]	@ (80011f4 <main+0x130>)
 800119c:	4618      	mov	r0, r3
 800119e:	f003 ff9b 	bl	80050d8 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*)transmit_distance_msg, strlen(transmit_distance_msg), TIMEOUT);
 80011a2:	463b      	mov	r3, r7
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f833 	bl	8000210 <strlen>
 80011aa:	4603      	mov	r3, r0
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4639      	mov	r1, r7
 80011b0:	230f      	movs	r3, #15
 80011b2:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <main+0x11c>)
 80011b4:	f003 fbd4 	bl	8004960 <HAL_UART_Transmit>
				 HAL_Delay(35);
 80011b8:	2023      	movs	r0, #35	@ 0x23
 80011ba:	f000 fd75 	bl	8001ca8 <HAL_Delay>
				 ILI9341_Draw_Vertical_Line(angle, 10, 50, CYAN);
 80011be:	8ef8      	ldrh	r0, [r7, #54]	@ 0x36
 80011c0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80011c4:	2232      	movs	r2, #50	@ 0x32
 80011c6:	210a      	movs	r1, #10
 80011c8:	f7ff ff38 	bl	800103c <ILI9341_Draw_Vertical_Line>
		  for(uint16_t angle = 0; angle <= 180; angle +=2) {
 80011cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80011ce:	3302      	adds	r3, #2
 80011d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80011d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80011d4:	2bb4      	cmp	r3, #180	@ 0xb4
 80011d6:	d9cd      	bls.n	8001174 <main+0xb0>
	  if(button_state == 0) {
 80011d8:	e7c5      	b.n	8001166 <main+0xa2>
 80011da:	bf00      	nop
 80011dc:	08005a40 	.word	0x08005a40
 80011e0:	20000198 	.word	0x20000198
 80011e4:	20000150 	.word	0x20000150
 80011e8:	20000108 	.word	0x20000108
 80011ec:	200000b0 	.word	0x200000b0
 80011f0:	200001e0 	.word	0x200001e0
 80011f4:	08005a30 	.word	0x08005a30

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	@ 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2234      	movs	r2, #52	@ 0x34
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f003 ff88 	bl	800511c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <SystemClock_Config+0xd0>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001224:	4a28      	ldr	r2, [pc, #160]	@ (80012c8 <SystemClock_Config+0xd0>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	@ 0x40
 800122c:	4b26      	ldr	r3, [pc, #152]	@ (80012c8 <SystemClock_Config+0xd0>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001238:	2300      	movs	r3, #0
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	4b23      	ldr	r3, [pc, #140]	@ (80012cc <SystemClock_Config+0xd4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001244:	4a21      	ldr	r2, [pc, #132]	@ (80012cc <SystemClock_Config+0xd4>)
 8001246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <SystemClock_Config+0xd4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001254:	603b      	str	r3, [r7, #0]
 8001256:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001258:	2302      	movs	r3, #2
 800125a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001260:	2310      	movs	r3, #16
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001264:	2302      	movs	r3, #2
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001268:	2300      	movs	r3, #0
 800126a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800126c:	2308      	movs	r3, #8
 800126e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001270:	2354      	movs	r3, #84	@ 0x54
 8001272:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001274:	2302      	movs	r3, #2
 8001276:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800127c:	2302      	movs	r3, #2
 800127e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4618      	mov	r0, r3
 8001286:	f001 fb87 	bl	8002998 <HAL_RCC_OscConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001290:	f000 fa50 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001294:	230f      	movs	r3, #15
 8001296:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001298:	2302      	movs	r3, #2
 800129a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012aa:	f107 0308 	add.w	r3, r7, #8
 80012ae:	2102      	movs	r1, #2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f001 f827 	bl	8002304 <HAL_RCC_ClockConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80012bc:	f000 fa3a 	bl	8001734 <Error_Handler>
  }
}
 80012c0:	bf00      	nop
 80012c2:	3750      	adds	r7, #80	@ 0x50
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40007000 	.word	0x40007000

080012d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012d4:	4b17      	ldr	r3, [pc, #92]	@ (8001334 <MX_SPI1_Init+0x64>)
 80012d6:	4a18      	ldr	r2, [pc, #96]	@ (8001338 <MX_SPI1_Init+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b16      	ldr	r3, [pc, #88]	@ (8001334 <MX_SPI1_Init+0x64>)
 80012dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <MX_SPI1_Init+0x64>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <MX_SPI1_Init+0x64>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ee:	4b11      	ldr	r3, [pc, #68]	@ (8001334 <MX_SPI1_Init+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001334 <MX_SPI1_Init+0x64>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <MX_SPI1_Init+0x64>)
 80012fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001300:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <MX_SPI1_Init+0x64>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001308:	4b0a      	ldr	r3, [pc, #40]	@ (8001334 <MX_SPI1_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <MX_SPI1_Init+0x64>)
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001314:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <MX_SPI1_Init+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <MX_SPI1_Init+0x64>)
 800131c:	220a      	movs	r2, #10
 800131e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001320:	4804      	ldr	r0, [pc, #16]	@ (8001334 <MX_SPI1_Init+0x64>)
 8001322:	f001 fdd7 	bl	8002ed4 <HAL_SPI_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800132c:	f000 fa02 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200000b0 	.word	0x200000b0
 8001338:	40013000 	.word	0x40013000

0800133c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	f107 0310 	add.w	r3, r7, #16
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800135a:	463b      	mov	r3, r7
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001366:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <MX_TIM1_Init+0xe0>)
 8001368:	4a2d      	ldr	r2, [pc, #180]	@ (8001420 <MX_TIM1_Init+0xe4>)
 800136a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800136c:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <MX_TIM1_Init+0xe0>)
 800136e:	2253      	movs	r2, #83	@ 0x53
 8001370:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b2a      	ldr	r3, [pc, #168]	@ (800141c <MX_TIM1_Init+0xe0>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001378:	4b28      	ldr	r3, [pc, #160]	@ (800141c <MX_TIM1_Init+0xe0>)
 800137a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800137e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b26      	ldr	r3, [pc, #152]	@ (800141c <MX_TIM1_Init+0xe0>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001386:	4b25      	ldr	r3, [pc, #148]	@ (800141c <MX_TIM1_Init+0xe0>)
 8001388:	2200      	movs	r2, #0
 800138a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138c:	4b23      	ldr	r3, [pc, #140]	@ (800141c <MX_TIM1_Init+0xe0>)
 800138e:	2200      	movs	r2, #0
 8001390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001392:	4822      	ldr	r0, [pc, #136]	@ (800141c <MX_TIM1_Init+0xe0>)
 8001394:	f002 f848 	bl	8003428 <HAL_TIM_Base_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800139e:	f000 f9c9 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a8:	f107 0318 	add.w	r3, r7, #24
 80013ac:	4619      	mov	r1, r3
 80013ae:	481b      	ldr	r0, [pc, #108]	@ (800141c <MX_TIM1_Init+0xe0>)
 80013b0:	f002 fcbc 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80013ba:	f000 f9bb 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80013be:	4817      	ldr	r0, [pc, #92]	@ (800141c <MX_TIM1_Init+0xe0>)
 80013c0:	f002 fa0c 	bl	80037dc <HAL_TIM_IC_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80013ca:	f000 f9b3 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	480f      	ldr	r0, [pc, #60]	@ (800141c <MX_TIM1_Init+0xe0>)
 80013de:	f003 f9df 	bl	80047a0 <HAL_TIMEx_MasterConfigSynchronization>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80013e8:	f000 f9a4 	bl	8001734 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013ec:	2300      	movs	r3, #0
 80013ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013f0:	2301      	movs	r3, #1
 80013f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	4806      	ldr	r0, [pc, #24]	@ (800141c <MX_TIM1_Init+0xe0>)
 8001404:	f002 fb33 	bl	8003a6e <HAL_TIM_IC_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800140e:	f000 f991 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	3728      	adds	r7, #40	@ 0x28
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000108 	.word	0x20000108
 8001420:	40010000 	.word	0x40010000

08001424 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08e      	sub	sp, #56	@ 0x38
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001438:	f107 0320 	add.w	r3, r7, #32
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
 8001450:	615a      	str	r2, [r3, #20]
 8001452:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001454:	4b2d      	ldr	r3, [pc, #180]	@ (800150c <MX_TIM2_Init+0xe8>)
 8001456:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800145a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800145c:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <MX_TIM2_Init+0xe8>)
 800145e:	22c7      	movs	r2, #199	@ 0xc7
 8001460:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001462:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <MX_TIM2_Init+0xe8>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <MX_TIM2_Init+0xe8>)
 800146a:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 800146e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001470:	4b26      	ldr	r3, [pc, #152]	@ (800150c <MX_TIM2_Init+0xe8>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001476:	4b25      	ldr	r3, [pc, #148]	@ (800150c <MX_TIM2_Init+0xe8>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800147c:	4823      	ldr	r0, [pc, #140]	@ (800150c <MX_TIM2_Init+0xe8>)
 800147e:	f001 ffd3 	bl	8003428 <HAL_TIM_Base_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001488:	f000 f954 	bl	8001734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001492:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001496:	4619      	mov	r1, r3
 8001498:	481c      	ldr	r0, [pc, #112]	@ (800150c <MX_TIM2_Init+0xe8>)
 800149a:	f002 fc47 	bl	8003d2c <HAL_TIM_ConfigClockSource>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014a4:	f000 f946 	bl	8001734 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014a8:	4818      	ldr	r0, [pc, #96]	@ (800150c <MX_TIM2_Init+0xe8>)
 80014aa:	f002 f875 	bl	8003598 <HAL_TIM_PWM_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014b4:	f000 f93e 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	4619      	mov	r1, r3
 80014c6:	4811      	ldr	r0, [pc, #68]	@ (800150c <MX_TIM2_Init+0xe8>)
 80014c8:	f003 f96a 	bl	80047a0 <HAL_TIMEx_MasterConfigSynchronization>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014d2:	f000 f92f 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d6:	2360      	movs	r3, #96	@ 0x60
 80014d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	4619      	mov	r1, r3
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <MX_TIM2_Init+0xe8>)
 80014ee:	f002 fb5b 	bl	8003ba8 <HAL_TIM_PWM_ConfigChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80014f8:	f000 f91c 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014fc:	4803      	ldr	r0, [pc, #12]	@ (800150c <MX_TIM2_Init+0xe8>)
 80014fe:	f000 fa2d 	bl	800195c <HAL_TIM_MspPostInit>

}
 8001502:	bf00      	nop
 8001504:	3738      	adds	r7, #56	@ 0x38
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000150 	.word	0x20000150

08001510 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <MX_USART2_UART_Init+0x50>)
 8001518:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 800151c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001520:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b08      	ldr	r3, [pc, #32]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	@ (800155c <MX_USART2_UART_Init+0x4c>)
 8001548:	f003 f9ba 	bl	80048c0 <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001552:	f000 f8ef 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000198 	.word	0x20000198
 8001560:	40004400 	.word	0x40004400

08001564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b4f      	ldr	r3, [pc, #316]	@ (80016bc <MX_GPIO_Init+0x158>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a4e      	ldr	r2, [pc, #312]	@ (80016bc <MX_GPIO_Init+0x158>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b4c      	ldr	r3, [pc, #304]	@ (80016bc <MX_GPIO_Init+0x158>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b48      	ldr	r3, [pc, #288]	@ (80016bc <MX_GPIO_Init+0x158>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a47      	ldr	r2, [pc, #284]	@ (80016bc <MX_GPIO_Init+0x158>)
 80015a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b45      	ldr	r3, [pc, #276]	@ (80016bc <MX_GPIO_Init+0x158>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b41      	ldr	r3, [pc, #260]	@ (80016bc <MX_GPIO_Init+0x158>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a40      	ldr	r2, [pc, #256]	@ (80016bc <MX_GPIO_Init+0x158>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b3e      	ldr	r3, [pc, #248]	@ (80016bc <MX_GPIO_Init+0x158>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b3a      	ldr	r3, [pc, #232]	@ (80016bc <MX_GPIO_Init+0x158>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a39      	ldr	r2, [pc, #228]	@ (80016bc <MX_GPIO_Init+0x158>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b37      	ldr	r3, [pc, #220]	@ (80016bc <MX_GPIO_Init+0x158>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2110      	movs	r1, #16
 80015ee:	4834      	ldr	r0, [pc, #208]	@ (80016c0 <MX_GPIO_Init+0x15c>)
 80015f0:	f000 fe3c 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_RESET_Pin|SPI1_DC_Pin, GPIO_PIN_RESET);
 80015f4:	2200      	movs	r2, #0
 80015f6:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80015fa:	4832      	ldr	r0, [pc, #200]	@ (80016c4 <MX_GPIO_Init+0x160>)
 80015fc:	f000 fe36 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001606:	482e      	ldr	r0, [pc, #184]	@ (80016c0 <MX_GPIO_Init+0x15c>)
 8001608:	f000 fe30 	bl	800226c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800160c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001612:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4828      	ldr	r0, [pc, #160]	@ (80016c4 <MX_GPIO_Init+0x160>)
 8001624:	f000 fc76 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001628:	2310      	movs	r3, #16
 800162a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162c:	2301      	movs	r3, #1
 800162e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	4619      	mov	r1, r3
 800163e:	4820      	ldr	r0, [pc, #128]	@ (80016c0 <MX_GPIO_Init+0x15c>)
 8001640:	f000 fc68 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RESET_Pin SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_RESET_Pin|SPI1_DC_Pin;
 8001644:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001648:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164a:	2301      	movs	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4819      	ldr	r0, [pc, #100]	@ (80016c4 <MX_GPIO_Init+0x160>)
 800165e:	f000 fc59 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001662:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001668:	2300      	movs	r3, #0
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4812      	ldr	r0, [pc, #72]	@ (80016c0 <MX_GPIO_Init+0x15c>)
 8001678:	f000 fc4c 	bl	8001f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800167c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	480a      	ldr	r0, [pc, #40]	@ (80016c0 <MX_GPIO_Init+0x15c>)
 8001696:	f000 fc3d 	bl	8001f14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2100      	movs	r1, #0
 800169e:	2028      	movs	r0, #40	@ 0x28
 80016a0:	f000 fc01 	bl	8001ea6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016a4:	2028      	movs	r0, #40	@ 0x28
 80016a6:	f000 fc1a 	bl	8001ede <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //start with LED on
 80016aa:	2201      	movs	r2, #1
 80016ac:	2120      	movs	r1, #32
 80016ae:	4804      	ldr	r0, [pc, #16]	@ (80016c0 <MX_GPIO_Init+0x15c>)
 80016b0:	f000 fddc 	bl	800226c <HAL_GPIO_WritePin>

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	@ 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020800 	.word	0x40020800

080016c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) //blue pushbutton pin
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80016d8:	d122      	bne.n	8001720 <HAL_GPIO_EXTI_Callback+0x58>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80016da:	2120      	movs	r1, #32
 80016dc:	4812      	ldr	r0, [pc, #72]	@ (8001728 <HAL_GPIO_EXTI_Callback+0x60>)
 80016de:	f000 fdde 	bl	800229e <HAL_GPIO_TogglePin>

		if(button_state == 0) {
 80016e2:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_GPIO_EXTI_Callback+0x64>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d109      	bne.n	80016fe <HAL_GPIO_EXTI_Callback+0x36>
			__HAL_RCC_TIM2_CLK_DISABLE(); // pause
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_GPIO_EXTI_Callback+0x68>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	4a10      	ldr	r2, [pc, #64]	@ (8001730 <HAL_GPIO_EXTI_Callback+0x68>)
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	6413      	str	r3, [r2, #64]	@ 0x40
			button_state = 1;
 80016f6:	4b0d      	ldr	r3, [pc, #52]	@ (800172c <HAL_GPIO_EXTI_Callback+0x64>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
		} else {
			__HAL_RCC_TIM2_CLK_ENABLE();
			button_state = 0;
		}
	}
}
 80016fc:	e010      	b.n	8001720 <HAL_GPIO_EXTI_Callback+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_GPIO_EXTI_Callback+0x68>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <HAL_GPIO_EXTI_Callback+0x68>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6413      	str	r3, [r2, #64]	@ 0x40
 800170e:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_GPIO_EXTI_Callback+0x68>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
			button_state = 0;
 800171a:	4b04      	ldr	r3, [pc, #16]	@ (800172c <HAL_GPIO_EXTI_Callback+0x64>)
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
}
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40020000 	.word	0x40020000
 800172c:	200001e0 	.word	0x200001e0
 8001730:	40023800 	.word	0x40023800

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <Error_Handler+0x8>

08001740 <set_servo_angle>:
 */
#include "stm32f4xx_hal.h"
#include "servo.h"

void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	4613      	mov	r3, r2
 800174c:	71fb      	strb	r3, [r7, #7]
	//map angle (0-180) to pulse width (210-1050 counts)
	uint32_t pulse_length = 210 + (angle * (1050 - 210) / 180);
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8001754:	fb02 f303 	mul.w	r3, r2, r3
 8001758:	4a15      	ldr	r2, [pc, #84]	@ (80017b0 <set_servo_angle+0x70>)
 800175a:	fb82 1203 	smull	r1, r2, r2, r3
 800175e:	441a      	add	r2, r3
 8001760:	11d2      	asrs	r2, r2, #7
 8001762:	17db      	asrs	r3, r3, #31
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	33d2      	adds	r3, #210	@ 0xd2
 8001768:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d104      	bne.n	800177a <set_servo_angle+0x3a>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001778:	e013      	b.n	80017a2 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b04      	cmp	r3, #4
 800177e:	d104      	bne.n	800178a <set_servo_angle+0x4a>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001788:	e00b      	b.n	80017a2 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b08      	cmp	r3, #8
 800178e:	d104      	bne.n	800179a <set_servo_angle+0x5a>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001798:	e003      	b.n	80017a2 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80017a2:	bf00      	nop
 80017a4:	371c      	adds	r7, #28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	b60b60b7 	.word	0xb60b60b7

080017b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_MspInit+0x4c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001800 <HAL_MspInit+0x4c>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_MspInit+0x4c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_MspInit+0x4c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	4a08      	ldr	r2, [pc, #32]	@ (8001800 <HAL_MspInit+0x4c>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_MspInit+0x4c>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017f2:	2007      	movs	r0, #7
 80017f4:	f000 fb4c 	bl	8001e90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40023800 	.word	0x40023800

08001804 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	@ 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <HAL_SPI_MspInit+0x84>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d12b      	bne.n	800187e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	4b18      	ldr	r3, [pc, #96]	@ (800188c <HAL_SPI_MspInit+0x88>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182e:	4a17      	ldr	r2, [pc, #92]	@ (800188c <HAL_SPI_MspInit+0x88>)
 8001830:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001834:	6453      	str	r3, [r2, #68]	@ 0x44
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <HAL_SPI_MspInit+0x88>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	4b11      	ldr	r3, [pc, #68]	@ (800188c <HAL_SPI_MspInit+0x88>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a10      	ldr	r2, [pc, #64]	@ (800188c <HAL_SPI_MspInit+0x88>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b0e      	ldr	r3, [pc, #56]	@ (800188c <HAL_SPI_MspInit+0x88>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800185e:	23e0      	movs	r3, #224	@ 0xe0
 8001860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001862:	2302      	movs	r3, #2
 8001864:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800186e:	2305      	movs	r3, #5
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	@ (8001890 <HAL_SPI_MspInit+0x8c>)
 800187a:	f000 fb4b 	bl	8001f14 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800187e:	bf00      	nop
 8001880:	3728      	adds	r7, #40	@ 0x28
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40013000 	.word	0x40013000
 800188c:	40023800 	.word	0x40023800
 8001890:	40020000 	.word	0x40020000

08001894 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	@ 0x28
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a27      	ldr	r2, [pc, #156]	@ (8001950 <HAL_TIM_Base_MspInit+0xbc>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d135      	bne.n	8001922 <HAL_TIM_Base_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
 80018ba:	4b26      	ldr	r3, [pc, #152]	@ (8001954 <HAL_TIM_Base_MspInit+0xc0>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	4a25      	ldr	r2, [pc, #148]	@ (8001954 <HAL_TIM_Base_MspInit+0xc0>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c6:	4b23      	ldr	r3, [pc, #140]	@ (8001954 <HAL_TIM_Base_MspInit+0xc0>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
 80018d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
 80018d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001954 <HAL_TIM_Base_MspInit+0xc0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a1e      	ldr	r2, [pc, #120]	@ (8001954 <HAL_TIM_Base_MspInit+0xc0>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <HAL_TIM_Base_MspInit+0xc0>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001900:	2301      	movs	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4813      	ldr	r0, [pc, #76]	@ (8001958 <HAL_TIM_Base_MspInit+0xc4>)
 800190c:	f000 fb02 	bl	8001f14 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	201b      	movs	r0, #27
 8001916:	f000 fac6 	bl	8001ea6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800191a:	201b      	movs	r0, #27
 800191c:	f000 fadf 	bl	8001ede <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001920:	e012      	b.n	8001948 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800192a:	d10d      	bne.n	8001948 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <HAL_TIM_Base_MspInit+0xc0>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	4a07      	ldr	r2, [pc, #28]	@ (8001954 <HAL_TIM_Base_MspInit+0xc0>)
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6413      	str	r3, [r2, #64]	@ 0x40
 800193c:	4b05      	ldr	r3, [pc, #20]	@ (8001954 <HAL_TIM_Base_MspInit+0xc0>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001940:	f003 0301 	and.w	r3, r3, #1
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	@ 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40010000 	.word	0x40010000
 8001954:	40023800 	.word	0x40023800
 8001958:	40020000 	.word	0x40020000

0800195c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	609a      	str	r2, [r3, #8]
 8001970:	60da      	str	r2, [r3, #12]
 8001972:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800197c:	d11d      	bne.n	80019ba <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <HAL_TIM_MspPostInit+0x68>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	4a0f      	ldr	r2, [pc, #60]	@ (80019c4 <HAL_TIM_MspPostInit+0x68>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	@ 0x30
 800198e:	4b0d      	ldr	r3, [pc, #52]	@ (80019c4 <HAL_TIM_MspPostInit+0x68>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_Pin;
 800199a:	2301      	movs	r3, #1
 800199c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019aa:	2301      	movs	r3, #1
 80019ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM2_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <HAL_TIM_MspPostInit+0x6c>)
 80019b6:	f000 faad 	bl	8001f14 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019ba:	bf00      	nop
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40020000 	.word	0x40020000

080019cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	@ 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a19      	ldr	r2, [pc, #100]	@ (8001a50 <HAL_UART_MspInit+0x84>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d12b      	bne.n	8001a46 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b18      	ldr	r3, [pc, #96]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a10      	ldr	r2, [pc, #64]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <HAL_UART_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a26:	230c      	movs	r3, #12
 8001a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a36:	2307      	movs	r3, #7
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <HAL_UART_MspInit+0x8c>)
 8001a42:	f000 fa67 	bl	8001f14 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a46:	bf00      	nop
 8001a48:	3728      	adds	r7, #40	@ 0x28
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40004400 	.word	0x40004400
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020000 	.word	0x40020000

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a60:	bf00      	nop
 8001a62:	e7fd      	b.n	8001a60 <NMI_Handler+0x4>

08001a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a68:	bf00      	nop
 8001a6a:	e7fd      	b.n	8001a68 <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <MemManage_Handler+0x4>

08001a74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <BusFault_Handler+0x4>

08001a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <UsageFault_Handler+0x4>

08001a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr

08001a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr

08001aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab2:	f000 f8d9 	bl	8001c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
	...

08001abc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <TIM1_CC_IRQHandler+0x10>)
 8001ac2:	f001 fee4 	bl	800388e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000108 	.word	0x20000108

08001ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001ad4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001ad8:	f000 fbfc 	bl	80022d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae8:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <_sbrk+0x5c>)
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <_sbrk+0x60>)
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	4b13      	ldr	r3, [pc, #76]	@ (8001b44 <_sbrk+0x64>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001afc:	4b11      	ldr	r3, [pc, #68]	@ (8001b44 <_sbrk+0x64>)
 8001afe:	4a12      	ldr	r2, [pc, #72]	@ (8001b48 <_sbrk+0x68>)
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4b10      	ldr	r3, [pc, #64]	@ (8001b44 <_sbrk+0x64>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d207      	bcs.n	8001b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b10:	f003 fb0c 	bl	800512c <__errno>
 8001b14:	4603      	mov	r3, r0
 8001b16:	220c      	movs	r2, #12
 8001b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	e009      	b.n	8001b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <_sbrk+0x64>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b26:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <_sbrk+0x64>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a05      	ldr	r2, [pc, #20]	@ (8001b44 <_sbrk+0x64>)
 8001b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b32:	68fb      	ldr	r3, [r7, #12]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20020000 	.word	0x20020000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	200001e4 	.word	0x200001e4
 8001b48:	20000338 	.word	0x20000338

08001b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b50:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <SystemInit+0x20>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b56:	4a05      	ldr	r2, [pc, #20]	@ (8001b6c <SystemInit+0x20>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b74:	f7ff ffea 	bl	8001b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b78:	480c      	ldr	r0, [pc, #48]	@ (8001bac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b7a:	490d      	ldr	r1, [pc, #52]	@ (8001bb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b80:	e002      	b.n	8001b88 <LoopCopyDataInit>

08001b82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b86:	3304      	adds	r3, #4

08001b88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b8c:	d3f9      	bcc.n	8001b82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b90:	4c0a      	ldr	r4, [pc, #40]	@ (8001bbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b94:	e001      	b.n	8001b9a <LoopFillZerobss>

08001b96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b98:	3204      	adds	r2, #4

08001b9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b9c:	d3fb      	bcc.n	8001b96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b9e:	f003 facb 	bl	8005138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba2:	f7ff fa8f 	bl	80010c4 <main>
  bx  lr    
 8001ba6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ba8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb0:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001bb4:	08005ab4 	.word	0x08005ab4
  ldr r2, =_sbss
 8001bb8:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001bbc:	20000334 	.word	0x20000334

08001bc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc0:	e7fe      	b.n	8001bc0 <ADC_IRQHandler>
	...

08001bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <HAL_Init+0x40>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001c04 <HAL_Init+0x40>)
 8001bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <HAL_Init+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <HAL_Init+0x40>)
 8001bda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be0:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <HAL_Init+0x40>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a07      	ldr	r2, [pc, #28]	@ (8001c04 <HAL_Init+0x40>)
 8001be6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bec:	2003      	movs	r0, #3
 8001bee:	f000 f94f 	bl	8001e90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f000 f808 	bl	8001c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf8:	f7ff fddc 	bl	80017b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023c00 	.word	0x40023c00

08001c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_InitTick+0x54>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_InitTick+0x58>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f967 	bl	8001efa <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00e      	b.n	8001c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b0f      	cmp	r3, #15
 8001c3a:	d80a      	bhi.n	8001c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f000 f92f 	bl	8001ea6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c48:	4a06      	ldr	r2, [pc, #24]	@ (8001c64 <HAL_InitTick+0x5c>)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e000      	b.n	8001c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000004 	.word	0x20000004
 8001c60:	2000000c 	.word	0x2000000c
 8001c64:	20000008 	.word	0x20000008

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	2000000c 	.word	0x2000000c
 8001c8c:	200001e8 	.word	0x200001e8

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	200001e8 	.word	0x200001e8

08001ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb0:	f7ff ffee 	bl	8001c90 <HAL_GetTick>
 8001cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc0:	d005      	beq.n	8001cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_Delay+0x44>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4413      	add	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cce:	bf00      	nop
 8001cd0:	f7ff ffde 	bl	8001c90 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	68fa      	ldr	r2, [r7, #12]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d8f7      	bhi.n	8001cd0 <HAL_Delay+0x28>
  {
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	2000000c 	.word	0x2000000c

08001cf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d22:	4a04      	ldr	r2, [pc, #16]	@ (8001d34 <__NVIC_SetPriorityGrouping+0x44>)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	60d3      	str	r3, [r2, #12]
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d3c:	4b04      	ldr	r3, [pc, #16]	@ (8001d50 <__NVIC_GetPriorityGrouping+0x18>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	f003 0307 	and.w	r3, r3, #7
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	db0b      	blt.n	8001d7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	f003 021f 	and.w	r2, r3, #31
 8001d6c:	4907      	ldr	r1, [pc, #28]	@ (8001d8c <__NVIC_EnableIRQ+0x38>)
 8001d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	2001      	movs	r0, #1
 8001d76:	fa00 f202 	lsl.w	r2, r0, r2
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	@ (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	@ (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	@ 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	@ 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e5c:	d301      	bcc.n	8001e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e00f      	b.n	8001e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e62:	4a0a      	ldr	r2, [pc, #40]	@ (8001e8c <SysTick_Config+0x40>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	f7ff ff8e 	bl	8001d90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e74:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <SysTick_Config+0x40>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e7a:	4b04      	ldr	r3, [pc, #16]	@ (8001e8c <SysTick_Config+0x40>)
 8001e7c:	2207      	movs	r2, #7
 8001e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	e000e010 	.word	0xe000e010

08001e90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff29 	bl	8001cf0 <__NVIC_SetPriorityGrouping>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb8:	f7ff ff3e 	bl	8001d38 <__NVIC_GetPriorityGrouping>
 8001ebc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	68b9      	ldr	r1, [r7, #8]
 8001ec2:	6978      	ldr	r0, [r7, #20]
 8001ec4:	f7ff ff8e 	bl	8001de4 <NVIC_EncodePriority>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff5d 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ed6:	bf00      	nop
 8001ed8:	3718      	adds	r7, #24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b082      	sub	sp, #8
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff31 	bl	8001d54 <__NVIC_EnableIRQ>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ffa2 	bl	8001e4c <SysTick_Config>
 8001f08:	4603      	mov	r3, r0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b089      	sub	sp, #36	@ 0x24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
 8001f2e:	e165      	b.n	80021fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4013      	ands	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 8154 	bne.w	80021f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f003 0303 	and.w	r3, r3, #3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d005      	beq.n	8001f66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d130      	bne.n	8001fc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	091b      	lsrs	r3, r3, #4
 8001fb2:	f003 0201 	and.w	r2, r3, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d017      	beq.n	8002004 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	2203      	movs	r2, #3
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d123      	bne.n	8002058 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	08da      	lsrs	r2, r3, #3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3208      	adds	r2, #8
 8002018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	220f      	movs	r2, #15
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4013      	ands	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	08da      	lsrs	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	3208      	adds	r2, #8
 8002052:	69b9      	ldr	r1, [r7, #24]
 8002054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 0203 	and.w	r2, r3, #3
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80ae 	beq.w	80021f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b5d      	ldr	r3, [pc, #372]	@ (8002214 <HAL_GPIO_Init+0x300>)
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002214 <HAL_GPIO_Init+0x300>)
 80020a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002214 <HAL_GPIO_Init+0x300>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020b6:	4a58      	ldr	r2, [pc, #352]	@ (8002218 <HAL_GPIO_Init+0x304>)
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	3302      	adds	r3, #2
 80020be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	220f      	movs	r2, #15
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43db      	mvns	r3, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4013      	ands	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4f      	ldr	r2, [pc, #316]	@ (800221c <HAL_GPIO_Init+0x308>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d025      	beq.n	800212e <HAL_GPIO_Init+0x21a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4e      	ldr	r2, [pc, #312]	@ (8002220 <HAL_GPIO_Init+0x30c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01f      	beq.n	800212a <HAL_GPIO_Init+0x216>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4d      	ldr	r2, [pc, #308]	@ (8002224 <HAL_GPIO_Init+0x310>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d019      	beq.n	8002126 <HAL_GPIO_Init+0x212>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002228 <HAL_GPIO_Init+0x314>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d013      	beq.n	8002122 <HAL_GPIO_Init+0x20e>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4a4b      	ldr	r2, [pc, #300]	@ (800222c <HAL_GPIO_Init+0x318>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d00d      	beq.n	800211e <HAL_GPIO_Init+0x20a>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4a4a      	ldr	r2, [pc, #296]	@ (8002230 <HAL_GPIO_Init+0x31c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d007      	beq.n	800211a <HAL_GPIO_Init+0x206>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4a49      	ldr	r2, [pc, #292]	@ (8002234 <HAL_GPIO_Init+0x320>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d101      	bne.n	8002116 <HAL_GPIO_Init+0x202>
 8002112:	2306      	movs	r3, #6
 8002114:	e00c      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 8002116:	2307      	movs	r3, #7
 8002118:	e00a      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 800211a:	2305      	movs	r3, #5
 800211c:	e008      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 800211e:	2304      	movs	r3, #4
 8002120:	e006      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 8002122:	2303      	movs	r3, #3
 8002124:	e004      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 8002126:	2302      	movs	r3, #2
 8002128:	e002      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_GPIO_Init+0x21c>
 800212e:	2300      	movs	r3, #0
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	f002 0203 	and.w	r2, r2, #3
 8002136:	0092      	lsls	r2, r2, #2
 8002138:	4093      	lsls	r3, r2
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002140:	4935      	ldr	r1, [pc, #212]	@ (8002218 <HAL_GPIO_Init+0x304>)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	3302      	adds	r3, #2
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800214e:	4b3a      	ldr	r3, [pc, #232]	@ (8002238 <HAL_GPIO_Init+0x324>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002172:	4a31      	ldr	r2, [pc, #196]	@ (8002238 <HAL_GPIO_Init+0x324>)
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002178:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <HAL_GPIO_Init+0x324>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800219c:	4a26      	ldr	r2, [pc, #152]	@ (8002238 <HAL_GPIO_Init+0x324>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a2:	4b25      	ldr	r3, [pc, #148]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	43db      	mvns	r3, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4013      	ands	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4013      	ands	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d003      	beq.n	80021f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f0:	4a11      	ldr	r2, [pc, #68]	@ (8002238 <HAL_GPIO_Init+0x324>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3301      	adds	r3, #1
 80021fa:	61fb      	str	r3, [r7, #28]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	2b0f      	cmp	r3, #15
 8002200:	f67f ae96 	bls.w	8001f30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002204:	bf00      	nop
 8002206:	bf00      	nop
 8002208:	3724      	adds	r7, #36	@ 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	40013800 	.word	0x40013800
 800221c:	40020000 	.word	0x40020000
 8002220:	40020400 	.word	0x40020400
 8002224:	40020800 	.word	0x40020800
 8002228:	40020c00 	.word	0x40020c00
 800222c:	40021000 	.word	0x40021000
 8002230:	40021400 	.word	0x40021400
 8002234:	40021800 	.word	0x40021800
 8002238:	40013c00 	.word	0x40013c00

0800223c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	460b      	mov	r3, r1
 8002246:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002254:	2301      	movs	r3, #1
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e001      	b.n	800225e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800225e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
 8002278:	4613      	mov	r3, r2
 800227a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800227c:	787b      	ldrb	r3, [r7, #1]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002282:	887a      	ldrh	r2, [r7, #2]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002288:	e003      	b.n	8002292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	041a      	lsls	r2, r3, #16
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	619a      	str	r2, [r3, #24]
}
 8002292:	bf00      	nop
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800229e:	b480      	push	{r7}
 80022a0:	b085      	sub	sp, #20
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
 80022a6:	460b      	mov	r3, r1
 80022a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022b0:	887a      	ldrh	r2, [r7, #2]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4013      	ands	r3, r2
 80022b6:	041a      	lsls	r2, r3, #16
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	43d9      	mvns	r1, r3
 80022bc:	887b      	ldrh	r3, [r7, #2]
 80022be:	400b      	ands	r3, r1
 80022c0:	431a      	orrs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	619a      	str	r2, [r3, #24]
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022de:	4b08      	ldr	r3, [pc, #32]	@ (8002300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022e0:	695a      	ldr	r2, [r3, #20]
 80022e2:	88fb      	ldrh	r3, [r7, #6]
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ea:	4a05      	ldr	r2, [pc, #20]	@ (8002300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022ec:	88fb      	ldrh	r3, [r7, #6]
 80022ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7ff f9e8 	bl	80016c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40013c00 	.word	0x40013c00

08002304 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0cc      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b68      	ldr	r3, [pc, #416]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d90c      	bls.n	8002340 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b65      	ldr	r3, [pc, #404]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	4a58      	ldr	r2, [pc, #352]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800235e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002362:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	4a52      	ldr	r2, [pc, #328]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800237a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d044      	beq.n	8002424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d119      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d003      	beq.n	80023c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d107      	bne.n	80023d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c2:	4b3f      	ldr	r3, [pc, #252]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023d2:	4b3b      	ldr	r3, [pc, #236]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e067      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023e2:	4b37      	ldr	r3, [pc, #220]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 0203 	bic.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4934      	ldr	r1, [pc, #208]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f4:	f7ff fc4c 	bl	8001c90 <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	e00a      	b.n	8002412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023fc:	f7ff fc48 	bl	8001c90 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800240a:	4293      	cmp	r3, r2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e04f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002412:	4b2b      	ldr	r3, [pc, #172]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 020c 	and.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d1eb      	bne.n	80023fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002424:	4b25      	ldr	r3, [pc, #148]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d20c      	bcs.n	800244c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002432:	4b22      	ldr	r3, [pc, #136]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002476:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f855 	bl	8002538 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490a      	ldr	r1, [pc, #40]	@ (80024c4 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	@ (80024c8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	@ (80024cc <HAL_RCC_ClockConfig+0x1c8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fbac 	bl	8001c08 <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40023c00 	.word	0x40023c00
 80024c0:	40023800 	.word	0x40023800
 80024c4:	08005a58 	.word	0x08005a58
 80024c8:	20000004 	.word	0x20000004
 80024cc:	20000008 	.word	0x20000008

080024d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d4:	4b03      	ldr	r3, [pc, #12]	@ (80024e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	20000004 	.word	0x20000004

080024e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024ec:	f7ff fff0 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 80024f0:	4602      	mov	r2, r0
 80024f2:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	0a9b      	lsrs	r3, r3, #10
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	4903      	ldr	r1, [pc, #12]	@ (800250c <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fe:	5ccb      	ldrb	r3, [r1, r3]
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40023800 	.word	0x40023800
 800250c:	08005a68 	.word	0x08005a68

08002510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002514:	f7ff ffdc 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	0b5b      	lsrs	r3, r3, #13
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4903      	ldr	r1, [pc, #12]	@ (8002534 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	08005a68 	.word	0x08005a68

08002538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800253c:	b0ae      	sub	sp, #184	@ 0xb8
 800253e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255e:	4bcb      	ldr	r3, [pc, #812]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b0c      	cmp	r3, #12
 8002568:	f200 8206 	bhi.w	8002978 <HAL_RCC_GetSysClockFreq+0x440>
 800256c:	a201      	add	r2, pc, #4	@ (adr r2, 8002574 <HAL_RCC_GetSysClockFreq+0x3c>)
 800256e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002572:	bf00      	nop
 8002574:	080025a9 	.word	0x080025a9
 8002578:	08002979 	.word	0x08002979
 800257c:	08002979 	.word	0x08002979
 8002580:	08002979 	.word	0x08002979
 8002584:	080025b1 	.word	0x080025b1
 8002588:	08002979 	.word	0x08002979
 800258c:	08002979 	.word	0x08002979
 8002590:	08002979 	.word	0x08002979
 8002594:	080025b9 	.word	0x080025b9
 8002598:	08002979 	.word	0x08002979
 800259c:	08002979 	.word	0x08002979
 80025a0:	08002979 	.word	0x08002979
 80025a4:	080027a9 	.word	0x080027a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a8:	4bb9      	ldr	r3, [pc, #740]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x358>)
 80025aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025ae:	e1e7      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b0:	4bb8      	ldr	r3, [pc, #736]	@ (8002894 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025b6:	e1e3      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b8:	4bb4      	ldr	r3, [pc, #720]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c4:	4bb1      	ldr	r3, [pc, #708]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d071      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d0:	4bae      	ldr	r3, [pc, #696]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	099b      	lsrs	r3, r3, #6
 80025d6:	2200      	movs	r2, #0
 80025d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80025dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80025e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80025e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80025f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025f6:	4622      	mov	r2, r4
 80025f8:	462b      	mov	r3, r5
 80025fa:	f04f 0000 	mov.w	r0, #0
 80025fe:	f04f 0100 	mov.w	r1, #0
 8002602:	0159      	lsls	r1, r3, #5
 8002604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002608:	0150      	lsls	r0, r2, #5
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4621      	mov	r1, r4
 8002610:	1a51      	subs	r1, r2, r1
 8002612:	6439      	str	r1, [r7, #64]	@ 0x40
 8002614:	4629      	mov	r1, r5
 8002616:	eb63 0301 	sbc.w	r3, r3, r1
 800261a:	647b      	str	r3, [r7, #68]	@ 0x44
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002628:	4649      	mov	r1, r9
 800262a:	018b      	lsls	r3, r1, #6
 800262c:	4641      	mov	r1, r8
 800262e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002632:	4641      	mov	r1, r8
 8002634:	018a      	lsls	r2, r1, #6
 8002636:	4641      	mov	r1, r8
 8002638:	1a51      	subs	r1, r2, r1
 800263a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800263c:	4649      	mov	r1, r9
 800263e:	eb63 0301 	sbc.w	r3, r3, r1
 8002642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002650:	4649      	mov	r1, r9
 8002652:	00cb      	lsls	r3, r1, #3
 8002654:	4641      	mov	r1, r8
 8002656:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800265a:	4641      	mov	r1, r8
 800265c:	00ca      	lsls	r2, r1, #3
 800265e:	4610      	mov	r0, r2
 8002660:	4619      	mov	r1, r3
 8002662:	4603      	mov	r3, r0
 8002664:	4622      	mov	r2, r4
 8002666:	189b      	adds	r3, r3, r2
 8002668:	633b      	str	r3, [r7, #48]	@ 0x30
 800266a:	462b      	mov	r3, r5
 800266c:	460a      	mov	r2, r1
 800266e:	eb42 0303 	adc.w	r3, r2, r3
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
 8002674:	f04f 0200 	mov.w	r2, #0
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002680:	4629      	mov	r1, r5
 8002682:	024b      	lsls	r3, r1, #9
 8002684:	4621      	mov	r1, r4
 8002686:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800268a:	4621      	mov	r1, r4
 800268c:	024a      	lsls	r2, r1, #9
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002696:	2200      	movs	r2, #0
 8002698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800269c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80026a4:	f7fd fe0c 	bl	80002c0 <__aeabi_uldivmod>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4613      	mov	r3, r2
 80026ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026b2:	e067      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b4:	4b75      	ldr	r3, [pc, #468]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	2200      	movs	r2, #0
 80026bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80026c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80026c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026ce:	2300      	movs	r3, #0
 80026d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80026d6:	4622      	mov	r2, r4
 80026d8:	462b      	mov	r3, r5
 80026da:	f04f 0000 	mov.w	r0, #0
 80026de:	f04f 0100 	mov.w	r1, #0
 80026e2:	0159      	lsls	r1, r3, #5
 80026e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e8:	0150      	lsls	r0, r2, #5
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4621      	mov	r1, r4
 80026f0:	1a51      	subs	r1, r2, r1
 80026f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80026f4:	4629      	mov	r1, r5
 80026f6:	eb63 0301 	sbc.w	r3, r3, r1
 80026fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002708:	4649      	mov	r1, r9
 800270a:	018b      	lsls	r3, r1, #6
 800270c:	4641      	mov	r1, r8
 800270e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002712:	4641      	mov	r1, r8
 8002714:	018a      	lsls	r2, r1, #6
 8002716:	4641      	mov	r1, r8
 8002718:	ebb2 0a01 	subs.w	sl, r2, r1
 800271c:	4649      	mov	r1, r9
 800271e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800272e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002732:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002736:	4692      	mov	sl, r2
 8002738:	469b      	mov	fp, r3
 800273a:	4623      	mov	r3, r4
 800273c:	eb1a 0303 	adds.w	r3, sl, r3
 8002740:	623b      	str	r3, [r7, #32]
 8002742:	462b      	mov	r3, r5
 8002744:	eb4b 0303 	adc.w	r3, fp, r3
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002756:	4629      	mov	r1, r5
 8002758:	028b      	lsls	r3, r1, #10
 800275a:	4621      	mov	r1, r4
 800275c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002760:	4621      	mov	r1, r4
 8002762:	028a      	lsls	r2, r1, #10
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800276c:	2200      	movs	r2, #0
 800276e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002770:	677a      	str	r2, [r7, #116]	@ 0x74
 8002772:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002776:	f7fd fda3 	bl	80002c0 <__aeabi_uldivmod>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4613      	mov	r3, r2
 8002780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002784:	4b41      	ldr	r3, [pc, #260]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	0c1b      	lsrs	r3, r3, #16
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	3301      	adds	r3, #1
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002796:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800279a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800279e:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027a6:	e0eb      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a8:	4b38      	ldr	r3, [pc, #224]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b4:	4b35      	ldr	r3, [pc, #212]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d06b      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027c0:	4b32      	ldr	r3, [pc, #200]	@ (800288c <HAL_RCC_GetSysClockFreq+0x354>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	2200      	movs	r2, #0
 80027c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80027cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80027d4:	2300      	movs	r3, #0
 80027d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80027d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80027dc:	4622      	mov	r2, r4
 80027de:	462b      	mov	r3, r5
 80027e0:	f04f 0000 	mov.w	r0, #0
 80027e4:	f04f 0100 	mov.w	r1, #0
 80027e8:	0159      	lsls	r1, r3, #5
 80027ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ee:	0150      	lsls	r0, r2, #5
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4621      	mov	r1, r4
 80027f6:	1a51      	subs	r1, r2, r1
 80027f8:	61b9      	str	r1, [r7, #24]
 80027fa:	4629      	mov	r1, r5
 80027fc:	eb63 0301 	sbc.w	r3, r3, r1
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800280e:	4659      	mov	r1, fp
 8002810:	018b      	lsls	r3, r1, #6
 8002812:	4651      	mov	r1, sl
 8002814:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002818:	4651      	mov	r1, sl
 800281a:	018a      	lsls	r2, r1, #6
 800281c:	4651      	mov	r1, sl
 800281e:	ebb2 0801 	subs.w	r8, r2, r1
 8002822:	4659      	mov	r1, fp
 8002824:	eb63 0901 	sbc.w	r9, r3, r1
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002834:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002838:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800283c:	4690      	mov	r8, r2
 800283e:	4699      	mov	r9, r3
 8002840:	4623      	mov	r3, r4
 8002842:	eb18 0303 	adds.w	r3, r8, r3
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	462b      	mov	r3, r5
 800284a:	eb49 0303 	adc.w	r3, r9, r3
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800285c:	4629      	mov	r1, r5
 800285e:	024b      	lsls	r3, r1, #9
 8002860:	4621      	mov	r1, r4
 8002862:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002866:	4621      	mov	r1, r4
 8002868:	024a      	lsls	r2, r1, #9
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002872:	2200      	movs	r2, #0
 8002874:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002876:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002878:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800287c:	f7fd fd20 	bl	80002c0 <__aeabi_uldivmod>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4613      	mov	r3, r2
 8002886:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800288a:	e065      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x420>
 800288c:	40023800 	.word	0x40023800
 8002890:	00f42400 	.word	0x00f42400
 8002894:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002898:	4b3d      	ldr	r3, [pc, #244]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x458>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	099b      	lsrs	r3, r3, #6
 800289e:	2200      	movs	r2, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	4611      	mov	r1, r2
 80028a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80028aa:	2300      	movs	r3, #0
 80028ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80028ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80028b2:	4642      	mov	r2, r8
 80028b4:	464b      	mov	r3, r9
 80028b6:	f04f 0000 	mov.w	r0, #0
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	0159      	lsls	r1, r3, #5
 80028c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c4:	0150      	lsls	r0, r2, #5
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4641      	mov	r1, r8
 80028cc:	1a51      	subs	r1, r2, r1
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	4649      	mov	r1, r9
 80028d2:	eb63 0301 	sbc.w	r3, r3, r1
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028e4:	4659      	mov	r1, fp
 80028e6:	018b      	lsls	r3, r1, #6
 80028e8:	4651      	mov	r1, sl
 80028ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ee:	4651      	mov	r1, sl
 80028f0:	018a      	lsls	r2, r1, #6
 80028f2:	4651      	mov	r1, sl
 80028f4:	1a54      	subs	r4, r2, r1
 80028f6:	4659      	mov	r1, fp
 80028f8:	eb63 0501 	sbc.w	r5, r3, r1
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	00eb      	lsls	r3, r5, #3
 8002906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800290a:	00e2      	lsls	r2, r4, #3
 800290c:	4614      	mov	r4, r2
 800290e:	461d      	mov	r5, r3
 8002910:	4643      	mov	r3, r8
 8002912:	18e3      	adds	r3, r4, r3
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	464b      	mov	r3, r9
 8002918:	eb45 0303 	adc.w	r3, r5, r3
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800292a:	4629      	mov	r1, r5
 800292c:	028b      	lsls	r3, r1, #10
 800292e:	4621      	mov	r1, r4
 8002930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002934:	4621      	mov	r1, r4
 8002936:	028a      	lsls	r2, r1, #10
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002940:	2200      	movs	r2, #0
 8002942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002944:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002946:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800294a:	f7fd fcb9 	bl	80002c0 <__aeabi_uldivmod>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4613      	mov	r3, r2
 8002954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002958:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x458>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	0f1b      	lsrs	r3, r3, #28
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800296a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002976:	e003      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x45c>)
 800297a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800297e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002984:	4618      	mov	r0, r3
 8002986:	37b8      	adds	r7, #184	@ 0xb8
 8002988:	46bd      	mov	sp, r7
 800298a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	00f42400 	.word	0x00f42400

08002998 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e28d      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8083 	beq.w	8002abe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029b8:	4b94      	ldr	r3, [pc, #592]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d019      	beq.n	80029f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029c4:	4b91      	ldr	r3, [pc, #580]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d106      	bne.n	80029de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029d0:	4b8e      	ldr	r3, [pc, #568]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029dc:	d00c      	beq.n	80029f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029de:	4b8b      	ldr	r3, [pc, #556]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029e6:	2b0c      	cmp	r3, #12
 80029e8:	d112      	bne.n	8002a10 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ea:	4b88      	ldr	r3, [pc, #544]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029f6:	d10b      	bne.n	8002a10 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f8:	4b84      	ldr	r3, [pc, #528]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d05b      	beq.n	8002abc <HAL_RCC_OscConfig+0x124>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d157      	bne.n	8002abc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e25a      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a18:	d106      	bne.n	8002a28 <HAL_RCC_OscConfig+0x90>
 8002a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a7b      	ldr	r2, [pc, #492]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	e01d      	b.n	8002a64 <HAL_RCC_OscConfig+0xcc>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a30:	d10c      	bne.n	8002a4c <HAL_RCC_OscConfig+0xb4>
 8002a32:	4b76      	ldr	r3, [pc, #472]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a75      	ldr	r2, [pc, #468]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	4b73      	ldr	r3, [pc, #460]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a72      	ldr	r2, [pc, #456]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	e00b      	b.n	8002a64 <HAL_RCC_OscConfig+0xcc>
 8002a4c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a6e      	ldr	r2, [pc, #440]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4b6c      	ldr	r3, [pc, #432]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a6b      	ldr	r2, [pc, #428]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7ff f910 	bl	8001c90 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a74:	f7ff f90c 	bl	8001c90 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b64      	cmp	r3, #100	@ 0x64
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e21f      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	4b61      	ldr	r3, [pc, #388]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0xdc>
 8002a92:	e014      	b.n	8002abe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a94:	f7ff f8fc 	bl	8001c90 <HAL_GetTick>
 8002a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a9c:	f7ff f8f8 	bl	8001c90 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b64      	cmp	r3, #100	@ 0x64
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e20b      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	4b57      	ldr	r3, [pc, #348]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x104>
 8002aba:	e000      	b.n	8002abe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d06f      	beq.n	8002baa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002aca:	4b50      	ldr	r3, [pc, #320]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f003 030c 	and.w	r3, r3, #12
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d017      	beq.n	8002b06 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ad6:	4b4d      	ldr	r3, [pc, #308]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d105      	bne.n	8002aee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00b      	beq.n	8002b06 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aee:	4b47      	ldr	r3, [pc, #284]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002af6:	2b0c      	cmp	r3, #12
 8002af8:	d11c      	bne.n	8002b34 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afa:	4b44      	ldr	r3, [pc, #272]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b06:	4b41      	ldr	r3, [pc, #260]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x186>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1d3      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	4937      	ldr	r1, [pc, #220]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	e03a      	b.n	8002baa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d020      	beq.n	8002b7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3c:	4b34      	ldr	r3, [pc, #208]	@ (8002c10 <HAL_RCC_OscConfig+0x278>)
 8002b3e:	2201      	movs	r2, #1
 8002b40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7ff f8a5 	bl	8001c90 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4a:	f7ff f8a1 	bl	8001c90 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e1b4      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b5c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b68:	4b28      	ldr	r3, [pc, #160]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4925      	ldr	r1, [pc, #148]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	600b      	str	r3, [r1, #0]
 8002b7c:	e015      	b.n	8002baa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7e:	4b24      	ldr	r3, [pc, #144]	@ (8002c10 <HAL_RCC_OscConfig+0x278>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b84:	f7ff f884 	bl	8001c90 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8a:	e008      	b.n	8002b9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8c:	f7ff f880 	bl	8001c90 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d901      	bls.n	8002b9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	e193      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d036      	beq.n	8002c24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d016      	beq.n	8002bec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bbe:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_RCC_OscConfig+0x27c>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc4:	f7ff f864 	bl	8001c90 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bcc:	f7ff f860 	bl	8001c90 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e173      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bde:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_RCC_OscConfig+0x274>)
 8002be0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x234>
 8002bea:	e01b      	b.n	8002c24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bec:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf2:	f7ff f84d 	bl	8001c90 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf8:	e00e      	b.n	8002c18 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfa:	f7ff f849 	bl	8001c90 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d907      	bls.n	8002c18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e15c      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	42470000 	.word	0x42470000
 8002c14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c18:	4b8a      	ldr	r3, [pc, #552]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ea      	bne.n	8002bfa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0304 	and.w	r3, r3, #4
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8097 	beq.w	8002d60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c36:	4b83      	ldr	r3, [pc, #524]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10f      	bne.n	8002c62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	4b7f      	ldr	r3, [pc, #508]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c52:	4b7c      	ldr	r3, [pc, #496]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c62:	4b79      	ldr	r3, [pc, #484]	@ (8002e48 <HAL_RCC_OscConfig+0x4b0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d118      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6e:	4b76      	ldr	r3, [pc, #472]	@ (8002e48 <HAL_RCC_OscConfig+0x4b0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a75      	ldr	r2, [pc, #468]	@ (8002e48 <HAL_RCC_OscConfig+0x4b0>)
 8002c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7a:	f7ff f809 	bl	8001c90 <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c82:	f7ff f805 	bl	8001c90 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e118      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c94:	4b6c      	ldr	r3, [pc, #432]	@ (8002e48 <HAL_RCC_OscConfig+0x4b0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x31e>
 8002ca8:	4b66      	ldr	r3, [pc, #408]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	4a65      	ldr	r2, [pc, #404]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	f043 0301 	orr.w	r3, r3, #1
 8002cb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb4:	e01c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x358>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x340>
 8002cbe:	4b61      	ldr	r3, [pc, #388]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	4a60      	ldr	r2, [pc, #384]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cca:	4b5e      	ldr	r3, [pc, #376]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cce:	4a5d      	ldr	r2, [pc, #372]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x358>
 8002cd8:	4b5a      	ldr	r3, [pc, #360]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	4a59      	ldr	r2, [pc, #356]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cde:	f023 0301 	bic.w	r3, r3, #1
 8002ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce4:	4b57      	ldr	r3, [pc, #348]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce8:	4a56      	ldr	r2, [pc, #344]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002cea:	f023 0304 	bic.w	r3, r3, #4
 8002cee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d015      	beq.n	8002d24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf8:	f7fe ffca 	bl	8001c90 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfe:	e00a      	b.n	8002d16 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe ffc6 	bl	8001c90 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e0d7      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d16:	4b4b      	ldr	r3, [pc, #300]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ee      	beq.n	8002d00 <HAL_RCC_OscConfig+0x368>
 8002d22:	e014      	b.n	8002d4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe ffb4 	bl	8001c90 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d2c:	f7fe ffb0 	bl	8001c90 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e0c1      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d42:	4b40      	ldr	r3, [pc, #256]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1ee      	bne.n	8002d2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d4e:	7dfb      	ldrb	r3, [r7, #23]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d54:	4b3b      	ldr	r3, [pc, #236]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d58:	4a3a      	ldr	r2, [pc, #232]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002d5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f000 80ad 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6a:	4b36      	ldr	r3, [pc, #216]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d060      	beq.n	8002e38 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d145      	bne.n	8002e0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7e:	4b33      	ldr	r3, [pc, #204]	@ (8002e4c <HAL_RCC_OscConfig+0x4b4>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe ff84 	bl	8001c90 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8c:	f7fe ff80 	bl	8001c90 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e093      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9e:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69da      	ldr	r2, [r3, #28]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db8:	019b      	lsls	r3, r3, #6
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	041b      	lsls	r3, r3, #16
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dcc:	061b      	lsls	r3, r3, #24
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd4:	071b      	lsls	r3, r3, #28
 8002dd6:	491b      	ldr	r1, [pc, #108]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e4c <HAL_RCC_OscConfig+0x4b4>)
 8002dde:	2201      	movs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de2:	f7fe ff55 	bl	8001c90 <HAL_GetTick>
 8002de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de8:	e008      	b.n	8002dfc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dea:	f7fe ff51 	bl	8001c90 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d901      	bls.n	8002dfc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e064      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dfc:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x452>
 8002e08:	e05c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0a:	4b10      	ldr	r3, [pc, #64]	@ (8002e4c <HAL_RCC_OscConfig+0x4b4>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e10:	f7fe ff3e 	bl	8001c90 <HAL_GetTick>
 8002e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe ff3a 	bl	8001c90 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e04d      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_OscConfig+0x4ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x480>
 8002e36:	e045      	b.n	8002ec4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d107      	bne.n	8002e50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e040      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40007000 	.word	0x40007000
 8002e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e50:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed0 <HAL_RCC_OscConfig+0x538>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d030      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d129      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d122      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e80:	4013      	ands	r3, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d119      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e96:	085b      	lsrs	r3, r3, #1
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d10f      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d001      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800

08002ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e07b      	b.n	8002fde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d108      	bne.n	8002f00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ef6:	d009      	beq.n	8002f0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	61da      	str	r2, [r3, #28]
 8002efe:	e005      	b.n	8002f0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fc6c 	bl	8001804 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f90:	ea42 0103 	orr.w	r1, r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	f003 0104 	and.w	r1, r3, #4
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	f003 0210 	and.w	r2, r3, #16
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	430a      	orrs	r2, r1
 8002fbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b088      	sub	sp, #32
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ff6:	f7fe fe4b 	bl	8001c90 <HAL_GetTick>
 8002ffa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d001      	beq.n	8003010 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800300c:	2302      	movs	r3, #2
 800300e:	e12a      	b.n	8003266 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_SPI_Transmit+0x36>
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e122      	b.n	8003266 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_SPI_Transmit+0x48>
 800302a:	2302      	movs	r3, #2
 800302c:	e11b      	b.n	8003266 <HAL_SPI_Transmit+0x280>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2203      	movs	r2, #3
 800303a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	88fa      	ldrh	r2, [r7, #6]
 800304e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	88fa      	ldrh	r2, [r7, #6]
 8003054:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800307c:	d10f      	bne.n	800309e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800308c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800309c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a8:	2b40      	cmp	r3, #64	@ 0x40
 80030aa:	d007      	beq.n	80030bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030c4:	d152      	bne.n	800316c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d002      	beq.n	80030d4 <HAL_SPI_Transmit+0xee>
 80030ce:	8b7b      	ldrh	r3, [r7, #26]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d145      	bne.n	8003160 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	881a      	ldrh	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	1c9a      	adds	r2, r3, #2
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030f8:	e032      	b.n	8003160 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b02      	cmp	r3, #2
 8003106:	d112      	bne.n	800312e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310c:	881a      	ldrh	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003122:	b29b      	uxth	r3, r3
 8003124:	3b01      	subs	r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800312c:	e018      	b.n	8003160 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800312e:	f7fe fdaf 	bl	8001c90 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d803      	bhi.n	8003146 <HAL_SPI_Transmit+0x160>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d102      	bne.n	800314c <HAL_SPI_Transmit+0x166>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d109      	bne.n	8003160 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e082      	b.n	8003266 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1c7      	bne.n	80030fa <HAL_SPI_Transmit+0x114>
 800316a:	e053      	b.n	8003214 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d002      	beq.n	800317a <HAL_SPI_Transmit+0x194>
 8003174:	8b7b      	ldrh	r3, [r7, #26]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d147      	bne.n	800320a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	330c      	adds	r3, #12
 8003184:	7812      	ldrb	r2, [r2, #0]
 8003186:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003196:	b29b      	uxth	r3, r3
 8003198:	3b01      	subs	r3, #1
 800319a:	b29a      	uxth	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031a0:	e033      	b.n	800320a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d113      	bne.n	80031d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	7812      	ldrb	r2, [r2, #0]
 80031bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	1c5a      	adds	r2, r3, #1
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80031d6:	e018      	b.n	800320a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031d8:	f7fe fd5a 	bl	8001c90 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d803      	bhi.n	80031f0 <HAL_SPI_Transmit+0x20a>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ee:	d102      	bne.n	80031f6 <HAL_SPI_Transmit+0x210>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d109      	bne.n	800320a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e02d      	b.n	8003266 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1c6      	bne.n	80031a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	6839      	ldr	r1, [r7, #0]
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f8b1 	bl	8003380 <SPI_EndRxTxTransaction>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10a      	bne.n	8003248 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003264:	2300      	movs	r3, #0
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b088      	sub	sp, #32
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003280:	f7fe fd06 	bl	8001c90 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	4413      	add	r3, r2
 800328e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003290:	f7fe fcfe 	bl	8001c90 <HAL_GetTick>
 8003294:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003296:	4b39      	ldr	r3, [pc, #228]	@ (800337c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	015b      	lsls	r3, r3, #5
 800329c:	0d1b      	lsrs	r3, r3, #20
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	fb02 f303 	mul.w	r3, r2, r3
 80032a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032a6:	e055      	b.n	8003354 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ae:	d051      	beq.n	8003354 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80032b0:	f7fe fcee 	bl	8001c90 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d902      	bls.n	80032c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d13d      	bne.n	8003342 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80032d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032de:	d111      	bne.n	8003304 <SPI_WaitFlagStateUntilTimeout+0x94>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032e8:	d004      	beq.n	80032f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f2:	d107      	bne.n	8003304 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003302:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003308:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800330c:	d10f      	bne.n	800332e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800332c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e018      	b.n	8003374 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d102      	bne.n	800334e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
 800334c:	e002      	b.n	8003354 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	3b01      	subs	r3, #1
 8003352:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	4013      	ands	r3, r2
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	429a      	cmp	r2, r3
 8003362:	bf0c      	ite	eq
 8003364:	2301      	moveq	r3, #1
 8003366:	2300      	movne	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	461a      	mov	r2, r3
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	429a      	cmp	r2, r3
 8003370:	d19a      	bne.n	80032a8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	20000004 	.word	0x20000004

08003380 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af02      	add	r7, sp, #8
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	60b9      	str	r1, [r7, #8]
 800338a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2201      	movs	r2, #1
 8003394:	2102      	movs	r1, #2
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff ff6a 	bl	8003270 <SPI_WaitFlagStateUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e032      	b.n	8003418 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003420 <SPI_EndRxTxTransaction+0xa0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003424 <SPI_EndRxTxTransaction+0xa4>)
 80033b8:	fba2 2303 	umull	r2, r3, r2, r3
 80033bc:	0d5b      	lsrs	r3, r3, #21
 80033be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033d0:	d112      	bne.n	80033f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2200      	movs	r2, #0
 80033da:	2180      	movs	r1, #128	@ 0x80
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7ff ff47 	bl	8003270 <SPI_WaitFlagStateUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d016      	beq.n	8003416 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e00f      	b.n	8003418 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	3b01      	subs	r3, #1
 8003402:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b80      	cmp	r3, #128	@ 0x80
 8003410:	d0f2      	beq.n	80033f8 <SPI_EndRxTxTransaction+0x78>
 8003412:	e000      	b.n	8003416 <SPI_EndRxTxTransaction+0x96>
        break;
 8003414:	bf00      	nop
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000004 	.word	0x20000004
 8003424:	165e9f81 	.word	0x165e9f81

08003428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e041      	b.n	80034be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe fa20 	bl	8001894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	4619      	mov	r1, r3
 8003466:	4610      	mov	r0, r2
 8003468:	f000 fd5a 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
	...

080034c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d001      	beq.n	80034e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e046      	b.n	800356e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a23      	ldr	r2, [pc, #140]	@ (800357c <HAL_TIM_Base_Start+0xb4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d022      	beq.n	8003538 <HAL_TIM_Base_Start+0x70>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fa:	d01d      	beq.n	8003538 <HAL_TIM_Base_Start+0x70>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a1f      	ldr	r2, [pc, #124]	@ (8003580 <HAL_TIM_Base_Start+0xb8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d018      	beq.n	8003538 <HAL_TIM_Base_Start+0x70>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a1e      	ldr	r2, [pc, #120]	@ (8003584 <HAL_TIM_Base_Start+0xbc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_TIM_Base_Start+0x70>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a1c      	ldr	r2, [pc, #112]	@ (8003588 <HAL_TIM_Base_Start+0xc0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_TIM_Base_Start+0x70>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a1b      	ldr	r2, [pc, #108]	@ (800358c <HAL_TIM_Base_Start+0xc4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_TIM_Base_Start+0x70>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a19      	ldr	r2, [pc, #100]	@ (8003590 <HAL_TIM_Base_Start+0xc8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_TIM_Base_Start+0x70>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a18      	ldr	r2, [pc, #96]	@ (8003594 <HAL_TIM_Base_Start+0xcc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d111      	bne.n	800355c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b06      	cmp	r3, #6
 8003548:	d010      	beq.n	800356c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355a:	e007      	b.n	800356c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3714      	adds	r7, #20
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
 800357a:	bf00      	nop
 800357c:	40010000 	.word	0x40010000
 8003580:	40000400 	.word	0x40000400
 8003584:	40000800 	.word	0x40000800
 8003588:	40000c00 	.word	0x40000c00
 800358c:	40010400 	.word	0x40010400
 8003590:	40014000 	.word	0x40014000
 8003594:	40001800 	.word	0x40001800

08003598 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e041      	b.n	800362e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d106      	bne.n	80035c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f839 	bl	8003636 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3304      	adds	r3, #4
 80035d4:	4619      	mov	r1, r3
 80035d6:	4610      	mov	r0, r2
 80035d8:	f000 fca2 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d109      	bne.n	8003670 <HAL_TIM_PWM_Start+0x24>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b01      	cmp	r3, #1
 8003666:	bf14      	ite	ne
 8003668:	2301      	movne	r3, #1
 800366a:	2300      	moveq	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	e022      	b.n	80036b6 <HAL_TIM_PWM_Start+0x6a>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b04      	cmp	r3, #4
 8003674:	d109      	bne.n	800368a <HAL_TIM_PWM_Start+0x3e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b01      	cmp	r3, #1
 8003680:	bf14      	ite	ne
 8003682:	2301      	movne	r3, #1
 8003684:	2300      	moveq	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	e015      	b.n	80036b6 <HAL_TIM_PWM_Start+0x6a>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d109      	bne.n	80036a4 <HAL_TIM_PWM_Start+0x58>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003696:	b2db      	uxtb	r3, r3
 8003698:	2b01      	cmp	r3, #1
 800369a:	bf14      	ite	ne
 800369c:	2301      	movne	r3, #1
 800369e:	2300      	moveq	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	e008      	b.n	80036b6 <HAL_TIM_PWM_Start+0x6a>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e07c      	b.n	80037b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0x82>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036cc:	e013      	b.n	80036f6 <HAL_TIM_PWM_Start+0xaa>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b04      	cmp	r3, #4
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0x92>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036dc:	e00b      	b.n	80036f6 <HAL_TIM_PWM_Start+0xaa>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start+0xa2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036ec:	e003      	b.n	80036f6 <HAL_TIM_PWM_Start+0xaa>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2201      	movs	r2, #1
 80036fc:	6839      	ldr	r1, [r7, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 f828 	bl	8004754 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a2d      	ldr	r2, [pc, #180]	@ (80037c0 <HAL_TIM_PWM_Start+0x174>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d004      	beq.n	8003718 <HAL_TIM_PWM_Start+0xcc>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a2c      	ldr	r2, [pc, #176]	@ (80037c4 <HAL_TIM_PWM_Start+0x178>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d101      	bne.n	800371c <HAL_TIM_PWM_Start+0xd0>
 8003718:	2301      	movs	r3, #1
 800371a:	e000      	b.n	800371e <HAL_TIM_PWM_Start+0xd2>
 800371c:	2300      	movs	r3, #0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d007      	beq.n	8003732 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a22      	ldr	r2, [pc, #136]	@ (80037c0 <HAL_TIM_PWM_Start+0x174>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d022      	beq.n	8003782 <HAL_TIM_PWM_Start+0x136>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003744:	d01d      	beq.n	8003782 <HAL_TIM_PWM_Start+0x136>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1f      	ldr	r2, [pc, #124]	@ (80037c8 <HAL_TIM_PWM_Start+0x17c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d018      	beq.n	8003782 <HAL_TIM_PWM_Start+0x136>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1d      	ldr	r2, [pc, #116]	@ (80037cc <HAL_TIM_PWM_Start+0x180>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <HAL_TIM_PWM_Start+0x136>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a1c      	ldr	r2, [pc, #112]	@ (80037d0 <HAL_TIM_PWM_Start+0x184>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_TIM_PWM_Start+0x136>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a16      	ldr	r2, [pc, #88]	@ (80037c4 <HAL_TIM_PWM_Start+0x178>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_TIM_PWM_Start+0x136>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a18      	ldr	r2, [pc, #96]	@ (80037d4 <HAL_TIM_PWM_Start+0x188>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_TIM_PWM_Start+0x136>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a16      	ldr	r2, [pc, #88]	@ (80037d8 <HAL_TIM_PWM_Start+0x18c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d111      	bne.n	80037a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d010      	beq.n	80037b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a4:	e007      	b.n	80037b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40010000 	.word	0x40010000
 80037c4:	40010400 	.word	0x40010400
 80037c8:	40000400 	.word	0x40000400
 80037cc:	40000800 	.word	0x40000800
 80037d0:	40000c00 	.word	0x40000c00
 80037d4:	40014000 	.word	0x40014000
 80037d8:	40001800 	.word	0x40001800

080037dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e041      	b.n	8003872 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f839 	bl	800387a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3304      	adds	r3, #4
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f000 fb80 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01b      	beq.n	80038f2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0202 	mvn.w	r2, #2
 80038c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fb02 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 80038de:	e005      	b.n	80038ec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 faf4 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fb05 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01b      	beq.n	800393e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f06f 0204 	mvn.w	r2, #4
 800390e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fadc 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 800392a:	e005      	b.n	8003938 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 face 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fadf 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d020      	beq.n	800398a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0308 	and.w	r3, r3, #8
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01b      	beq.n	800398a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f06f 0208 	mvn.w	r2, #8
 800395a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2204      	movs	r2, #4
 8003960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fab6 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 8003976:	e005      	b.n	8003984 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 faa8 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 fab9 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b00      	cmp	r3, #0
 8003992:	d020      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b00      	cmp	r3, #0
 800399c:	d01b      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f06f 0210 	mvn.w	r2, #16
 80039a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2208      	movs	r2, #8
 80039ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fa90 	bl	8003ee2 <HAL_TIM_IC_CaptureCallback>
 80039c2:	e005      	b.n	80039d0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 fa82 	bl	8003ece <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fa93 	bl	8003ef6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00c      	beq.n	80039fa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d007      	beq.n	80039fa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f06f 0201 	mvn.w	r2, #1
 80039f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 fa60 	bl	8003eba <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00c      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d007      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 ff47 	bl	80048ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00c      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d007      	beq.n	8003a42 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fa64 	bl	8003f0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d00c      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d007      	beq.n	8003a66 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f06f 0220 	mvn.w	r2, #32
 8003a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 ff19 	bl	8004898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a66:	bf00      	nop
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e088      	b.n	8003b9e <HAL_TIM_IC_ConfigChannel+0x130>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d11b      	bne.n	8003ad2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003aaa:	f000 fc8f 	bl	80043cc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699a      	ldr	r2, [r3, #24]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 020c 	bic.w	r2, r2, #12
 8003abc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6999      	ldr	r1, [r3, #24]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	619a      	str	r2, [r3, #24]
 8003ad0:	e060      	b.n	8003b94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d11c      	bne.n	8003b12 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003ae8:	f000 fd13 	bl	8004512 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003afa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6999      	ldr	r1, [r3, #24]
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	021a      	lsls	r2, r3, #8
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	619a      	str	r2, [r3, #24]
 8003b10:	e040      	b.n	8003b94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b08      	cmp	r3, #8
 8003b16:	d11b      	bne.n	8003b50 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003b28:	f000 fd60 	bl	80045ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69da      	ldr	r2, [r3, #28]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 020c 	bic.w	r2, r2, #12
 8003b3a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69d9      	ldr	r1, [r3, #28]
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	61da      	str	r2, [r3, #28]
 8003b4e:	e021      	b.n	8003b94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d11c      	bne.n	8003b90 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003b66:	f000 fd7d 	bl	8004664 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	69da      	ldr	r2, [r3, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003b78:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69d9      	ldr	r1, [r3, #28]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	021a      	lsls	r2, r3, #8
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	61da      	str	r2, [r3, #28]
 8003b8e:	e001      	b.n	8003b94 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
	...

08003ba8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	e0ae      	b.n	8003d24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b0c      	cmp	r3, #12
 8003bd2:	f200 809f 	bhi.w	8003d14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003c11 	.word	0x08003c11
 8003be0:	08003d15 	.word	0x08003d15
 8003be4:	08003d15 	.word	0x08003d15
 8003be8:	08003d15 	.word	0x08003d15
 8003bec:	08003c51 	.word	0x08003c51
 8003bf0:	08003d15 	.word	0x08003d15
 8003bf4:	08003d15 	.word	0x08003d15
 8003bf8:	08003d15 	.word	0x08003d15
 8003bfc:	08003c93 	.word	0x08003c93
 8003c00:	08003d15 	.word	0x08003d15
 8003c04:	08003d15 	.word	0x08003d15
 8003c08:	08003d15 	.word	0x08003d15
 8003c0c:	08003cd3 	.word	0x08003cd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fa28 	bl	800406c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0208 	orr.w	r2, r2, #8
 8003c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f022 0204 	bic.w	r2, r2, #4
 8003c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6999      	ldr	r1, [r3, #24]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	691a      	ldr	r2, [r3, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	619a      	str	r2, [r3, #24]
      break;
 8003c4e:	e064      	b.n	8003d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fa78 	bl	800414c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	699a      	ldr	r2, [r3, #24]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6999      	ldr	r1, [r3, #24]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	021a      	lsls	r2, r3, #8
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	619a      	str	r2, [r3, #24]
      break;
 8003c90:	e043      	b.n	8003d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68b9      	ldr	r1, [r7, #8]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 facd 	bl	8004238 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0208 	orr.w	r2, r2, #8
 8003cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69da      	ldr	r2, [r3, #28]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0204 	bic.w	r2, r2, #4
 8003cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69d9      	ldr	r1, [r3, #28]
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	691a      	ldr	r2, [r3, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	61da      	str	r2, [r3, #28]
      break;
 8003cd0:	e023      	b.n	8003d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68b9      	ldr	r1, [r7, #8]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f000 fb21 	bl	8004320 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69da      	ldr	r2, [r3, #28]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69d9      	ldr	r1, [r3, #28]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	021a      	lsls	r2, r3, #8
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	61da      	str	r2, [r3, #28]
      break;
 8003d12:	e002      	b.n	8003d1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	75fb      	strb	r3, [r7, #23]
      break;
 8003d18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_TIM_ConfigClockSource+0x1c>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e0b4      	b.n	8003eb2 <HAL_TIM_ConfigClockSource+0x186>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2202      	movs	r2, #2
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d80:	d03e      	beq.n	8003e00 <HAL_TIM_ConfigClockSource+0xd4>
 8003d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d86:	f200 8087 	bhi.w	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8e:	f000 8086 	beq.w	8003e9e <HAL_TIM_ConfigClockSource+0x172>
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d96:	d87f      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b70      	cmp	r3, #112	@ 0x70
 8003d9a:	d01a      	beq.n	8003dd2 <HAL_TIM_ConfigClockSource+0xa6>
 8003d9c:	2b70      	cmp	r3, #112	@ 0x70
 8003d9e:	d87b      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	2b60      	cmp	r3, #96	@ 0x60
 8003da2:	d050      	beq.n	8003e46 <HAL_TIM_ConfigClockSource+0x11a>
 8003da4:	2b60      	cmp	r3, #96	@ 0x60
 8003da6:	d877      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003da8:	2b50      	cmp	r3, #80	@ 0x50
 8003daa:	d03c      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0xfa>
 8003dac:	2b50      	cmp	r3, #80	@ 0x50
 8003dae:	d873      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003db0:	2b40      	cmp	r3, #64	@ 0x40
 8003db2:	d058      	beq.n	8003e66 <HAL_TIM_ConfigClockSource+0x13a>
 8003db4:	2b40      	cmp	r3, #64	@ 0x40
 8003db6:	d86f      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b30      	cmp	r3, #48	@ 0x30
 8003dba:	d064      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dbc:	2b30      	cmp	r3, #48	@ 0x30
 8003dbe:	d86b      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b20      	cmp	r3, #32
 8003dc2:	d060      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d867      	bhi.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d05c      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d05a      	beq.n	8003e86 <HAL_TIM_ConfigClockSource+0x15a>
 8003dd0:	e062      	b.n	8003e98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003de2:	f000 fc97 	bl	8004714 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	609a      	str	r2, [r3, #8]
      break;
 8003dfe:	e04f      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e10:	f000 fc80 	bl	8004714 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e22:	609a      	str	r2, [r3, #8]
      break;
 8003e24:	e03c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e32:	461a      	mov	r2, r3
 8003e34:	f000 fb3e 	bl	80044b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2150      	movs	r1, #80	@ 0x50
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f000 fc4d 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8003e44:	e02c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e52:	461a      	mov	r2, r3
 8003e54:	f000 fb9a 	bl	800458c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2160      	movs	r1, #96	@ 0x60
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fc3d 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8003e64:	e01c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e72:	461a      	mov	r2, r3
 8003e74:	f000 fb1e 	bl	80044b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2140      	movs	r1, #64	@ 0x40
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fc2d 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8003e84:	e00c      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4610      	mov	r0, r2
 8003e92:	f000 fc24 	bl	80046de <TIM_ITRx_SetConfig>
      break;
 8003e96:	e003      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e9c:	e000      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3710      	adds	r7, #16
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b083      	sub	sp, #12
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	b083      	sub	sp, #12
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
	...

08003f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a43      	ldr	r2, [pc, #268]	@ (8004040 <TIM_Base_SetConfig+0x120>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d013      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f3e:	d00f      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a40      	ldr	r2, [pc, #256]	@ (8004044 <TIM_Base_SetConfig+0x124>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00b      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a3f      	ldr	r2, [pc, #252]	@ (8004048 <TIM_Base_SetConfig+0x128>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a3e      	ldr	r2, [pc, #248]	@ (800404c <TIM_Base_SetConfig+0x12c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <TIM_Base_SetConfig+0x40>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a3d      	ldr	r2, [pc, #244]	@ (8004050 <TIM_Base_SetConfig+0x130>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d108      	bne.n	8003f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a32      	ldr	r2, [pc, #200]	@ (8004040 <TIM_Base_SetConfig+0x120>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d02b      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f80:	d027      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a2f      	ldr	r2, [pc, #188]	@ (8004044 <TIM_Base_SetConfig+0x124>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d023      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004048 <TIM_Base_SetConfig+0x128>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d01f      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a2d      	ldr	r2, [pc, #180]	@ (800404c <TIM_Base_SetConfig+0x12c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d01b      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a2c      	ldr	r2, [pc, #176]	@ (8004050 <TIM_Base_SetConfig+0x130>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d017      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8004054 <TIM_Base_SetConfig+0x134>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d013      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a2a      	ldr	r2, [pc, #168]	@ (8004058 <TIM_Base_SetConfig+0x138>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00f      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a29      	ldr	r2, [pc, #164]	@ (800405c <TIM_Base_SetConfig+0x13c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d00b      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a28      	ldr	r2, [pc, #160]	@ (8004060 <TIM_Base_SetConfig+0x140>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d007      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a27      	ldr	r2, [pc, #156]	@ (8004064 <TIM_Base_SetConfig+0x144>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d003      	beq.n	8003fd2 <TIM_Base_SetConfig+0xb2>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a26      	ldr	r2, [pc, #152]	@ (8004068 <TIM_Base_SetConfig+0x148>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d108      	bne.n	8003fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a0e      	ldr	r2, [pc, #56]	@ (8004040 <TIM_Base_SetConfig+0x120>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_Base_SetConfig+0xf2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a10      	ldr	r2, [pc, #64]	@ (8004050 <TIM_Base_SetConfig+0x130>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d103      	bne.n	800401a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691a      	ldr	r2, [r3, #16]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f043 0204 	orr.w	r2, r3, #4
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]
}
 8004032:	bf00      	nop
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	40010000 	.word	0x40010000
 8004044:	40000400 	.word	0x40000400
 8004048:	40000800 	.word	0x40000800
 800404c:	40000c00 	.word	0x40000c00
 8004050:	40010400 	.word	0x40010400
 8004054:	40014000 	.word	0x40014000
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800
 8004060:	40001800 	.word	0x40001800
 8004064:	40001c00 	.word	0x40001c00
 8004068:	40002000 	.word	0x40002000

0800406c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f023 0201 	bic.w	r2, r3, #1
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	699b      	ldr	r3, [r3, #24]
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800409a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f023 0303 	bic.w	r3, r3, #3
 80040a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f023 0302 	bic.w	r3, r3, #2
 80040b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	697a      	ldr	r2, [r7, #20]
 80040bc:	4313      	orrs	r3, r2
 80040be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a20      	ldr	r2, [pc, #128]	@ (8004144 <TIM_OC1_SetConfig+0xd8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_OC1_SetConfig+0x64>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004148 <TIM_OC1_SetConfig+0xdc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d10c      	bne.n	80040ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0308 	bic.w	r3, r3, #8
 80040d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	4313      	orrs	r3, r2
 80040e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f023 0304 	bic.w	r3, r3, #4
 80040e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a15      	ldr	r2, [pc, #84]	@ (8004144 <TIM_OC1_SetConfig+0xd8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d003      	beq.n	80040fa <TIM_OC1_SetConfig+0x8e>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a14      	ldr	r2, [pc, #80]	@ (8004148 <TIM_OC1_SetConfig+0xdc>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d111      	bne.n	800411e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	621a      	str	r2, [r3, #32]
}
 8004138:	bf00      	nop
 800413a:	371c      	adds	r7, #28
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40010000 	.word	0x40010000
 8004148:	40010400 	.word	0x40010400

0800414c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b480      	push	{r7}
 800414e:	b087      	sub	sp, #28
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f023 0210 	bic.w	r2, r3, #16
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	021b      	lsls	r3, r3, #8
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	4313      	orrs	r3, r2
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f023 0320 	bic.w	r3, r3, #32
 8004196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a22      	ldr	r2, [pc, #136]	@ (8004230 <TIM_OC2_SetConfig+0xe4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_OC2_SetConfig+0x68>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a21      	ldr	r2, [pc, #132]	@ (8004234 <TIM_OC2_SetConfig+0xe8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10d      	bne.n	80041d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a17      	ldr	r2, [pc, #92]	@ (8004230 <TIM_OC2_SetConfig+0xe4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_OC2_SetConfig+0x94>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a16      	ldr	r2, [pc, #88]	@ (8004234 <TIM_OC2_SetConfig+0xe8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d113      	bne.n	8004208 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80041ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	693a      	ldr	r2, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	621a      	str	r2, [r3, #32]
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40010000 	.word	0x40010000
 8004234:	40010400 	.word	0x40010400

08004238 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0303 	bic.w	r3, r3, #3
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	021b      	lsls	r3, r3, #8
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a21      	ldr	r2, [pc, #132]	@ (8004318 <TIM_OC3_SetConfig+0xe0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_OC3_SetConfig+0x66>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a20      	ldr	r2, [pc, #128]	@ (800431c <TIM_OC3_SetConfig+0xe4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d10d      	bne.n	80042ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a16      	ldr	r2, [pc, #88]	@ (8004318 <TIM_OC3_SetConfig+0xe0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d003      	beq.n	80042ca <TIM_OC3_SetConfig+0x92>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a15      	ldr	r2, [pc, #84]	@ (800431c <TIM_OC3_SetConfig+0xe4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d113      	bne.n	80042f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80042d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	621a      	str	r2, [r3, #32]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	40010000 	.word	0x40010000
 800431c:	40010400 	.word	0x40010400

08004320 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800434e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4313      	orrs	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800436a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	031b      	lsls	r3, r3, #12
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a12      	ldr	r2, [pc, #72]	@ (80043c4 <TIM_OC4_SetConfig+0xa4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_OC4_SetConfig+0x68>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a11      	ldr	r2, [pc, #68]	@ (80043c8 <TIM_OC4_SetConfig+0xa8>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d109      	bne.n	800439c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800438e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	019b      	lsls	r3, r3, #6
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	4313      	orrs	r3, r2
 800439a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	693a      	ldr	r2, [r7, #16]
 80043b4:	621a      	str	r2, [r3, #32]
}
 80043b6:	bf00      	nop
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40010000 	.word	0x40010000
 80043c8:	40010400 	.word	0x40010400

080043cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f023 0201 	bic.w	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a28      	ldr	r2, [pc, #160]	@ (8004498 <TIM_TI1_SetConfig+0xcc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d01b      	beq.n	8004432 <TIM_TI1_SetConfig+0x66>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004400:	d017      	beq.n	8004432 <TIM_TI1_SetConfig+0x66>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a25      	ldr	r2, [pc, #148]	@ (800449c <TIM_TI1_SetConfig+0xd0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d013      	beq.n	8004432 <TIM_TI1_SetConfig+0x66>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a24      	ldr	r2, [pc, #144]	@ (80044a0 <TIM_TI1_SetConfig+0xd4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00f      	beq.n	8004432 <TIM_TI1_SetConfig+0x66>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a23      	ldr	r2, [pc, #140]	@ (80044a4 <TIM_TI1_SetConfig+0xd8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00b      	beq.n	8004432 <TIM_TI1_SetConfig+0x66>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4a22      	ldr	r2, [pc, #136]	@ (80044a8 <TIM_TI1_SetConfig+0xdc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d007      	beq.n	8004432 <TIM_TI1_SetConfig+0x66>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a21      	ldr	r2, [pc, #132]	@ (80044ac <TIM_TI1_SetConfig+0xe0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d003      	beq.n	8004432 <TIM_TI1_SetConfig+0x66>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	4a20      	ldr	r2, [pc, #128]	@ (80044b0 <TIM_TI1_SetConfig+0xe4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <TIM_TI1_SetConfig+0x6a>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <TIM_TI1_SetConfig+0x6c>
 8004436:	2300      	movs	r3, #0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d008      	beq.n	800444e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f023 0303 	bic.w	r3, r3, #3
 8004442:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4313      	orrs	r3, r2
 800444a:	617b      	str	r3, [r7, #20]
 800444c:	e003      	b.n	8004456 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800445c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	b2db      	uxtb	r3, r3
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f023 030a 	bic.w	r3, r3, #10
 8004470:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f003 030a 	and.w	r3, r3, #10
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	621a      	str	r2, [r3, #32]
}
 800448a:	bf00      	nop
 800448c:	371c      	adds	r7, #28
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40010000 	.word	0x40010000
 800449c:	40000400 	.word	0x40000400
 80044a0:	40000800 	.word	0x40000800
 80044a4:	40000c00 	.word	0x40000c00
 80044a8:	40010400 	.word	0x40010400
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40001800 	.word	0x40001800

080044b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f023 0201 	bic.w	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f023 030a 	bic.w	r3, r3, #10
 80044f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	621a      	str	r2, [r3, #32]
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004512:	b480      	push	{r7}
 8004514:	b087      	sub	sp, #28
 8004516:	af00      	add	r7, sp, #0
 8004518:	60f8      	str	r0, [r7, #12]
 800451a:	60b9      	str	r1, [r7, #8]
 800451c:	607a      	str	r2, [r7, #4]
 800451e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f023 0210 	bic.w	r2, r3, #16
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800453e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	021b      	lsls	r3, r3, #8
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	031b      	lsls	r3, r3, #12
 8004556:	b29b      	uxth	r3, r3
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004564:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	621a      	str	r2, [r3, #32]
}
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f023 0210 	bic.w	r2, r3, #16
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	031b      	lsls	r3, r3, #12
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045c8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	621a      	str	r2, [r3, #32]
}
 80045e0:	bf00      	nop
 80045e2:	371c      	adds	r7, #28
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f023 0303 	bic.w	r3, r3, #3
 8004618:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004628:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	011b      	lsls	r3, r3, #4
 800462e:	b2db      	uxtb	r3, r3
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800463c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	021b      	lsls	r3, r3, #8
 8004642:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	693a      	ldr	r2, [r7, #16]
 8004650:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	621a      	str	r2, [r3, #32]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004690:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	031b      	lsls	r3, r3, #12
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80046b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	031b      	lsls	r3, r3, #12
 80046bc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80046c0:	697a      	ldr	r2, [r7, #20]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	621a      	str	r2, [r3, #32]
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046de:	b480      	push	{r7}
 80046e0:	b085      	sub	sp, #20
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f043 0307 	orr.w	r3, r3, #7
 8004700:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
 8004720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800472e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	021a      	lsls	r2, r3, #8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	431a      	orrs	r2, r3
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4313      	orrs	r3, r2
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	609a      	str	r2, [r3, #8]
}
 8004748:	bf00      	nop
 800474a:	371c      	adds	r7, #28
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004754:	b480      	push	{r7}
 8004756:	b087      	sub	sp, #28
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	2201      	movs	r2, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1a      	ldr	r2, [r3, #32]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	43db      	mvns	r3, r3
 8004776:	401a      	ands	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6a1a      	ldr	r2, [r3, #32]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	fa01 f303 	lsl.w	r3, r1, r3
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
	...

080047a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e05a      	b.n	800486e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a21      	ldr	r2, [pc, #132]	@ (800487c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d022      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004804:	d01d      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a1d      	ldr	r2, [pc, #116]	@ (8004880 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d018      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1b      	ldr	r2, [pc, #108]	@ (8004884 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1a      	ldr	r2, [pc, #104]	@ (8004888 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a18      	ldr	r2, [pc, #96]	@ (800488c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d009      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a17      	ldr	r2, [pc, #92]	@ (8004890 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d10c      	bne.n	800485c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004848:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	4313      	orrs	r3, r2
 8004852:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000
 8004880:	40000400 	.word	0x40000400
 8004884:	40000800 	.word	0x40000800
 8004888:	40000c00 	.word	0x40000c00
 800488c:	40010400 	.word	0x40010400
 8004890:	40014000 	.word	0x40014000
 8004894:	40001800 	.word	0x40001800

08004898 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e042      	b.n	8004958 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fd f870 	bl	80019cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2224      	movs	r2, #36	@ 0x24
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 f973 	bl	8004bf0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695a      	ldr	r2, [r3, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	@ 0x28
 8004964:	af02      	add	r7, sp, #8
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	603b      	str	r3, [r7, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b20      	cmp	r3, #32
 800497e:	d175      	bne.n	8004a6c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <HAL_UART_Transmit+0x2c>
 8004986:	88fb      	ldrh	r3, [r7, #6]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e06e      	b.n	8004a6e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2221      	movs	r2, #33	@ 0x21
 800499a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800499e:	f7fd f977 	bl	8001c90 <HAL_GetTick>
 80049a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	88fa      	ldrh	r2, [r7, #6]
 80049a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	88fa      	ldrh	r2, [r7, #6]
 80049ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b8:	d108      	bne.n	80049cc <HAL_UART_Transmit+0x6c>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	e003      	b.n	80049d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049d0:	2300      	movs	r3, #0
 80049d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049d4:	e02e      	b.n	8004a34 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	2200      	movs	r2, #0
 80049de:	2180      	movs	r1, #128	@ 0x80
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f848 	bl	8004a76 <UART_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e03a      	b.n	8004a6e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	3302      	adds	r3, #2
 8004a12:	61bb      	str	r3, [r7, #24]
 8004a14:	e007      	b.n	8004a26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	781a      	ldrb	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1cb      	bne.n	80049d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	9300      	str	r3, [sp, #0]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2200      	movs	r2, #0
 8004a46:	2140      	movs	r1, #64	@ 0x40
 8004a48:	68f8      	ldr	r0, [r7, #12]
 8004a4a:	f000 f814 	bl	8004a76 <UART_WaitOnFlagUntilTimeout>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2220      	movs	r2, #32
 8004a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e006      	b.n	8004a6e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2220      	movs	r2, #32
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	e000      	b.n	8004a6e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a6c:	2302      	movs	r3, #2
  }
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3720      	adds	r7, #32
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b086      	sub	sp, #24
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	4613      	mov	r3, r2
 8004a84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a86:	e03b      	b.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d037      	beq.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a90:	f7fd f8fe 	bl	8001c90 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	6a3a      	ldr	r2, [r7, #32]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d302      	bcc.n	8004aa6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d101      	bne.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e03a      	b.n	8004b20 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d023      	beq.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b80      	cmp	r3, #128	@ 0x80
 8004abc:	d020      	beq.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b40      	cmp	r3, #64	@ 0x40
 8004ac2:	d01d      	beq.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	d116      	bne.n	8004b00 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	617b      	str	r3, [r7, #20]
 8004ae6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f81d 	bl	8004b28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2208      	movs	r2, #8
 8004af2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e00f      	b.n	8004b20 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d0b4      	beq.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b095      	sub	sp, #84	@ 0x54
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	330c      	adds	r3, #12
 8004b36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3a:	e853 3f00 	ldrex	r3, [r3]
 8004b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b50:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e5      	bne.n	8004b30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3314      	adds	r3, #20
 8004b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	f023 0301 	bic.w	r3, r3, #1
 8004b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3314      	adds	r3, #20
 8004b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e5      	bne.n	8004b64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d119      	bne.n	8004bd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	330c      	adds	r3, #12
 8004ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f023 0310 	bic.w	r3, r3, #16
 8004bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	330c      	adds	r3, #12
 8004bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bc0:	61ba      	str	r2, [r7, #24]
 8004bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	6979      	ldr	r1, [r7, #20]
 8004bc6:	69ba      	ldr	r2, [r7, #24]
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e5      	bne.n	8004ba0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004be2:	bf00      	nop
 8004be4:	3754      	adds	r7, #84	@ 0x54
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
	...

08004bf0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf4:	b0c0      	sub	sp, #256	@ 0x100
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0c:	68d9      	ldr	r1, [r3, #12]
 8004c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	ea40 0301 	orr.w	r3, r0, r1
 8004c18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c48:	f021 010c 	bic.w	r1, r1, #12
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c56:	430b      	orrs	r3, r1
 8004c58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6a:	6999      	ldr	r1, [r3, #24]
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	ea40 0301 	orr.w	r3, r0, r1
 8004c76:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8004ebc <UART_SetConfig+0x2cc>)
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d005      	beq.n	8004c90 <UART_SetConfig+0xa0>
 8004c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ec0 <UART_SetConfig+0x2d0>)
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d104      	bne.n	8004c9a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c90:	f7fd fc3e 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8004c94:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c98:	e003      	b.n	8004ca2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c9a:	f7fd fc25 	bl	80024e8 <HAL_RCC_GetPCLK1Freq>
 8004c9e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cac:	f040 810c 	bne.w	8004ec8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	1891      	adds	r1, r2, r2
 8004cc8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004cca:	415b      	adcs	r3, r3
 8004ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	eb12 0801 	adds.w	r8, r2, r1
 8004cd8:	4629      	mov	r1, r5
 8004cda:	eb43 0901 	adc.w	r9, r3, r1
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cf2:	4690      	mov	r8, r2
 8004cf4:	4699      	mov	r9, r3
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	eb18 0303 	adds.w	r3, r8, r3
 8004cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d00:	462b      	mov	r3, r5
 8004d02:	eb49 0303 	adc.w	r3, r9, r3
 8004d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d16:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d1e:	460b      	mov	r3, r1
 8004d20:	18db      	adds	r3, r3, r3
 8004d22:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d24:	4613      	mov	r3, r2
 8004d26:	eb42 0303 	adc.w	r3, r2, r3
 8004d2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d34:	f7fb fac4 	bl	80002c0 <__aeabi_uldivmod>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4b61      	ldr	r3, [pc, #388]	@ (8004ec4 <UART_SetConfig+0x2d4>)
 8004d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	011c      	lsls	r4, r3, #4
 8004d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d50:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d58:	4642      	mov	r2, r8
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	1891      	adds	r1, r2, r2
 8004d5e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004d60:	415b      	adcs	r3, r3
 8004d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004d68:	4641      	mov	r1, r8
 8004d6a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d6e:	4649      	mov	r1, r9
 8004d70:	eb43 0b01 	adc.w	fp, r3, r1
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d88:	4692      	mov	sl, r2
 8004d8a:	469b      	mov	fp, r3
 8004d8c:	4643      	mov	r3, r8
 8004d8e:	eb1a 0303 	adds.w	r3, sl, r3
 8004d92:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d96:	464b      	mov	r3, r9
 8004d98:	eb4b 0303 	adc.w	r3, fp, r3
 8004d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004db0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004db4:	460b      	mov	r3, r1
 8004db6:	18db      	adds	r3, r3, r3
 8004db8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dba:	4613      	mov	r3, r2
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dc2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004dc6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004dca:	f7fb fa79 	bl	80002c0 <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4611      	mov	r1, r2
 8004dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ec4 <UART_SetConfig+0x2d4>)
 8004dd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dda:	095b      	lsrs	r3, r3, #5
 8004ddc:	2264      	movs	r2, #100	@ 0x64
 8004dde:	fb02 f303 	mul.w	r3, r2, r3
 8004de2:	1acb      	subs	r3, r1, r3
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004dea:	4b36      	ldr	r3, [pc, #216]	@ (8004ec4 <UART_SetConfig+0x2d4>)
 8004dec:	fba3 2302 	umull	r2, r3, r3, r2
 8004df0:	095b      	lsrs	r3, r3, #5
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004df8:	441c      	add	r4, r3
 8004dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e04:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	1891      	adds	r1, r2, r2
 8004e12:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e14:	415b      	adcs	r3, r3
 8004e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e1c:	4641      	mov	r1, r8
 8004e1e:	1851      	adds	r1, r2, r1
 8004e20:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e22:	4649      	mov	r1, r9
 8004e24:	414b      	adcs	r3, r1
 8004e26:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e34:	4659      	mov	r1, fp
 8004e36:	00cb      	lsls	r3, r1, #3
 8004e38:	4651      	mov	r1, sl
 8004e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e3e:	4651      	mov	r1, sl
 8004e40:	00ca      	lsls	r2, r1, #3
 8004e42:	4610      	mov	r0, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	4603      	mov	r3, r0
 8004e48:	4642      	mov	r2, r8
 8004e4a:	189b      	adds	r3, r3, r2
 8004e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e50:	464b      	mov	r3, r9
 8004e52:	460a      	mov	r2, r1
 8004e54:	eb42 0303 	adc.w	r3, r2, r3
 8004e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e68:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004e6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e70:	460b      	mov	r3, r1
 8004e72:	18db      	adds	r3, r3, r3
 8004e74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e76:	4613      	mov	r3, r2
 8004e78:	eb42 0303 	adc.w	r3, r2, r3
 8004e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004e86:	f7fb fa1b 	bl	80002c0 <__aeabi_uldivmod>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <UART_SetConfig+0x2d4>)
 8004e90:	fba3 1302 	umull	r1, r3, r3, r2
 8004e94:	095b      	lsrs	r3, r3, #5
 8004e96:	2164      	movs	r1, #100	@ 0x64
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	3332      	adds	r3, #50	@ 0x32
 8004ea2:	4a08      	ldr	r2, [pc, #32]	@ (8004ec4 <UART_SetConfig+0x2d4>)
 8004ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea8:	095b      	lsrs	r3, r3, #5
 8004eaa:	f003 0207 	and.w	r2, r3, #7
 8004eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4422      	add	r2, r4
 8004eb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eb8:	e106      	b.n	80050c8 <UART_SetConfig+0x4d8>
 8004eba:	bf00      	nop
 8004ebc:	40011000 	.word	0x40011000
 8004ec0:	40011400 	.word	0x40011400
 8004ec4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ed2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ed6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004eda:	4642      	mov	r2, r8
 8004edc:	464b      	mov	r3, r9
 8004ede:	1891      	adds	r1, r2, r2
 8004ee0:	6239      	str	r1, [r7, #32]
 8004ee2:	415b      	adcs	r3, r3
 8004ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eea:	4641      	mov	r1, r8
 8004eec:	1854      	adds	r4, r2, r1
 8004eee:	4649      	mov	r1, r9
 8004ef0:	eb43 0501 	adc.w	r5, r3, r1
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	00eb      	lsls	r3, r5, #3
 8004efe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f02:	00e2      	lsls	r2, r4, #3
 8004f04:	4614      	mov	r4, r2
 8004f06:	461d      	mov	r5, r3
 8004f08:	4643      	mov	r3, r8
 8004f0a:	18e3      	adds	r3, r4, r3
 8004f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f10:	464b      	mov	r3, r9
 8004f12:	eb45 0303 	adc.w	r3, r5, r3
 8004f16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f26:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f36:	4629      	mov	r1, r5
 8004f38:	008b      	lsls	r3, r1, #2
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f40:	4621      	mov	r1, r4
 8004f42:	008a      	lsls	r2, r1, #2
 8004f44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f48:	f7fb f9ba 	bl	80002c0 <__aeabi_uldivmod>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4b60      	ldr	r3, [pc, #384]	@ (80050d4 <UART_SetConfig+0x4e4>)
 8004f52:	fba3 2302 	umull	r2, r3, r3, r2
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	011c      	lsls	r4, r3, #4
 8004f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f64:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004f68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	464b      	mov	r3, r9
 8004f70:	1891      	adds	r1, r2, r2
 8004f72:	61b9      	str	r1, [r7, #24]
 8004f74:	415b      	adcs	r3, r3
 8004f76:	61fb      	str	r3, [r7, #28]
 8004f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f7c:	4641      	mov	r1, r8
 8004f7e:	1851      	adds	r1, r2, r1
 8004f80:	6139      	str	r1, [r7, #16]
 8004f82:	4649      	mov	r1, r9
 8004f84:	414b      	adcs	r3, r1
 8004f86:	617b      	str	r3, [r7, #20]
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f94:	4659      	mov	r1, fp
 8004f96:	00cb      	lsls	r3, r1, #3
 8004f98:	4651      	mov	r1, sl
 8004f9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f9e:	4651      	mov	r1, sl
 8004fa0:	00ca      	lsls	r2, r1, #3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	4642      	mov	r2, r8
 8004faa:	189b      	adds	r3, r3, r2
 8004fac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fb0:	464b      	mov	r3, r9
 8004fb2:	460a      	mov	r2, r1
 8004fb4:	eb42 0303 	adc.w	r3, r2, r3
 8004fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004fc6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	008b      	lsls	r3, r1, #2
 8004fd8:	4641      	mov	r1, r8
 8004fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fde:	4641      	mov	r1, r8
 8004fe0:	008a      	lsls	r2, r1, #2
 8004fe2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004fe6:	f7fb f96b 	bl	80002c0 <__aeabi_uldivmod>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	4611      	mov	r1, r2
 8004ff0:	4b38      	ldr	r3, [pc, #224]	@ (80050d4 <UART_SetConfig+0x4e4>)
 8004ff2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ff6:	095b      	lsrs	r3, r3, #5
 8004ff8:	2264      	movs	r2, #100	@ 0x64
 8004ffa:	fb02 f303 	mul.w	r3, r2, r3
 8004ffe:	1acb      	subs	r3, r1, r3
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	3332      	adds	r3, #50	@ 0x32
 8005004:	4a33      	ldr	r2, [pc, #204]	@ (80050d4 <UART_SetConfig+0x4e4>)
 8005006:	fba2 2303 	umull	r2, r3, r2, r3
 800500a:	095b      	lsrs	r3, r3, #5
 800500c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005010:	441c      	add	r4, r3
 8005012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005016:	2200      	movs	r2, #0
 8005018:	673b      	str	r3, [r7, #112]	@ 0x70
 800501a:	677a      	str	r2, [r7, #116]	@ 0x74
 800501c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005020:	4642      	mov	r2, r8
 8005022:	464b      	mov	r3, r9
 8005024:	1891      	adds	r1, r2, r2
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	415b      	adcs	r3, r3
 800502a:	60fb      	str	r3, [r7, #12]
 800502c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005030:	4641      	mov	r1, r8
 8005032:	1851      	adds	r1, r2, r1
 8005034:	6039      	str	r1, [r7, #0]
 8005036:	4649      	mov	r1, r9
 8005038:	414b      	adcs	r3, r1
 800503a:	607b      	str	r3, [r7, #4]
 800503c:	f04f 0200 	mov.w	r2, #0
 8005040:	f04f 0300 	mov.w	r3, #0
 8005044:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005048:	4659      	mov	r1, fp
 800504a:	00cb      	lsls	r3, r1, #3
 800504c:	4651      	mov	r1, sl
 800504e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005052:	4651      	mov	r1, sl
 8005054:	00ca      	lsls	r2, r1, #3
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	4603      	mov	r3, r0
 800505c:	4642      	mov	r2, r8
 800505e:	189b      	adds	r3, r3, r2
 8005060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005062:	464b      	mov	r3, r9
 8005064:	460a      	mov	r2, r1
 8005066:	eb42 0303 	adc.w	r3, r2, r3
 800506a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	663b      	str	r3, [r7, #96]	@ 0x60
 8005076:	667a      	str	r2, [r7, #100]	@ 0x64
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	f04f 0300 	mov.w	r3, #0
 8005080:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005084:	4649      	mov	r1, r9
 8005086:	008b      	lsls	r3, r1, #2
 8005088:	4641      	mov	r1, r8
 800508a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800508e:	4641      	mov	r1, r8
 8005090:	008a      	lsls	r2, r1, #2
 8005092:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005096:	f7fb f913 	bl	80002c0 <__aeabi_uldivmod>
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	4b0d      	ldr	r3, [pc, #52]	@ (80050d4 <UART_SetConfig+0x4e4>)
 80050a0:	fba3 1302 	umull	r1, r3, r3, r2
 80050a4:	095b      	lsrs	r3, r3, #5
 80050a6:	2164      	movs	r1, #100	@ 0x64
 80050a8:	fb01 f303 	mul.w	r3, r1, r3
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	011b      	lsls	r3, r3, #4
 80050b0:	3332      	adds	r3, #50	@ 0x32
 80050b2:	4a08      	ldr	r2, [pc, #32]	@ (80050d4 <UART_SetConfig+0x4e4>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	f003 020f 	and.w	r2, r3, #15
 80050be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4422      	add	r2, r4
 80050c6:	609a      	str	r2, [r3, #8]
}
 80050c8:	bf00      	nop
 80050ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80050ce:	46bd      	mov	sp, r7
 80050d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050d4:	51eb851f 	.word	0x51eb851f

080050d8 <siprintf>:
 80050d8:	b40e      	push	{r1, r2, r3}
 80050da:	b510      	push	{r4, lr}
 80050dc:	b09d      	sub	sp, #116	@ 0x74
 80050de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80050e0:	9002      	str	r0, [sp, #8]
 80050e2:	9006      	str	r0, [sp, #24]
 80050e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050e8:	480a      	ldr	r0, [pc, #40]	@ (8005114 <siprintf+0x3c>)
 80050ea:	9107      	str	r1, [sp, #28]
 80050ec:	9104      	str	r1, [sp, #16]
 80050ee:	490a      	ldr	r1, [pc, #40]	@ (8005118 <siprintf+0x40>)
 80050f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050f4:	9105      	str	r1, [sp, #20]
 80050f6:	2400      	movs	r4, #0
 80050f8:	a902      	add	r1, sp, #8
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005100:	f000 f9a2 	bl	8005448 <_svfiprintf_r>
 8005104:	9b02      	ldr	r3, [sp, #8]
 8005106:	701c      	strb	r4, [r3, #0]
 8005108:	b01d      	add	sp, #116	@ 0x74
 800510a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800510e:	b003      	add	sp, #12
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000010 	.word	0x20000010
 8005118:	ffff0208 	.word	0xffff0208

0800511c <memset>:
 800511c:	4402      	add	r2, r0
 800511e:	4603      	mov	r3, r0
 8005120:	4293      	cmp	r3, r2
 8005122:	d100      	bne.n	8005126 <memset+0xa>
 8005124:	4770      	bx	lr
 8005126:	f803 1b01 	strb.w	r1, [r3], #1
 800512a:	e7f9      	b.n	8005120 <memset+0x4>

0800512c <__errno>:
 800512c:	4b01      	ldr	r3, [pc, #4]	@ (8005134 <__errno+0x8>)
 800512e:	6818      	ldr	r0, [r3, #0]
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000010 	.word	0x20000010

08005138 <__libc_init_array>:
 8005138:	b570      	push	{r4, r5, r6, lr}
 800513a:	4d0d      	ldr	r5, [pc, #52]	@ (8005170 <__libc_init_array+0x38>)
 800513c:	4c0d      	ldr	r4, [pc, #52]	@ (8005174 <__libc_init_array+0x3c>)
 800513e:	1b64      	subs	r4, r4, r5
 8005140:	10a4      	asrs	r4, r4, #2
 8005142:	2600      	movs	r6, #0
 8005144:	42a6      	cmp	r6, r4
 8005146:	d109      	bne.n	800515c <__libc_init_array+0x24>
 8005148:	4d0b      	ldr	r5, [pc, #44]	@ (8005178 <__libc_init_array+0x40>)
 800514a:	4c0c      	ldr	r4, [pc, #48]	@ (800517c <__libc_init_array+0x44>)
 800514c:	f000 fc64 	bl	8005a18 <_init>
 8005150:	1b64      	subs	r4, r4, r5
 8005152:	10a4      	asrs	r4, r4, #2
 8005154:	2600      	movs	r6, #0
 8005156:	42a6      	cmp	r6, r4
 8005158:	d105      	bne.n	8005166 <__libc_init_array+0x2e>
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005160:	4798      	blx	r3
 8005162:	3601      	adds	r6, #1
 8005164:	e7ee      	b.n	8005144 <__libc_init_array+0xc>
 8005166:	f855 3b04 	ldr.w	r3, [r5], #4
 800516a:	4798      	blx	r3
 800516c:	3601      	adds	r6, #1
 800516e:	e7f2      	b.n	8005156 <__libc_init_array+0x1e>
 8005170:	08005aac 	.word	0x08005aac
 8005174:	08005aac 	.word	0x08005aac
 8005178:	08005aac 	.word	0x08005aac
 800517c:	08005ab0 	.word	0x08005ab0

08005180 <__retarget_lock_acquire_recursive>:
 8005180:	4770      	bx	lr

08005182 <__retarget_lock_release_recursive>:
 8005182:	4770      	bx	lr

08005184 <memcpy>:
 8005184:	440a      	add	r2, r1
 8005186:	4291      	cmp	r1, r2
 8005188:	f100 33ff 	add.w	r3, r0, #4294967295
 800518c:	d100      	bne.n	8005190 <memcpy+0xc>
 800518e:	4770      	bx	lr
 8005190:	b510      	push	{r4, lr}
 8005192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800519a:	4291      	cmp	r1, r2
 800519c:	d1f9      	bne.n	8005192 <memcpy+0xe>
 800519e:	bd10      	pop	{r4, pc}

080051a0 <_free_r>:
 80051a0:	b538      	push	{r3, r4, r5, lr}
 80051a2:	4605      	mov	r5, r0
 80051a4:	2900      	cmp	r1, #0
 80051a6:	d041      	beq.n	800522c <_free_r+0x8c>
 80051a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051ac:	1f0c      	subs	r4, r1, #4
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bfb8      	it	lt
 80051b2:	18e4      	addlt	r4, r4, r3
 80051b4:	f000 f8e0 	bl	8005378 <__malloc_lock>
 80051b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005230 <_free_r+0x90>)
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	b933      	cbnz	r3, 80051cc <_free_r+0x2c>
 80051be:	6063      	str	r3, [r4, #4]
 80051c0:	6014      	str	r4, [r2, #0]
 80051c2:	4628      	mov	r0, r5
 80051c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80051c8:	f000 b8dc 	b.w	8005384 <__malloc_unlock>
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d908      	bls.n	80051e2 <_free_r+0x42>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	1821      	adds	r1, r4, r0
 80051d4:	428b      	cmp	r3, r1
 80051d6:	bf01      	itttt	eq
 80051d8:	6819      	ldreq	r1, [r3, #0]
 80051da:	685b      	ldreq	r3, [r3, #4]
 80051dc:	1809      	addeq	r1, r1, r0
 80051de:	6021      	streq	r1, [r4, #0]
 80051e0:	e7ed      	b.n	80051be <_free_r+0x1e>
 80051e2:	461a      	mov	r2, r3
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b10b      	cbz	r3, 80051ec <_free_r+0x4c>
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d9fa      	bls.n	80051e2 <_free_r+0x42>
 80051ec:	6811      	ldr	r1, [r2, #0]
 80051ee:	1850      	adds	r0, r2, r1
 80051f0:	42a0      	cmp	r0, r4
 80051f2:	d10b      	bne.n	800520c <_free_r+0x6c>
 80051f4:	6820      	ldr	r0, [r4, #0]
 80051f6:	4401      	add	r1, r0
 80051f8:	1850      	adds	r0, r2, r1
 80051fa:	4283      	cmp	r3, r0
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	d1e0      	bne.n	80051c2 <_free_r+0x22>
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	6053      	str	r3, [r2, #4]
 8005206:	4408      	add	r0, r1
 8005208:	6010      	str	r0, [r2, #0]
 800520a:	e7da      	b.n	80051c2 <_free_r+0x22>
 800520c:	d902      	bls.n	8005214 <_free_r+0x74>
 800520e:	230c      	movs	r3, #12
 8005210:	602b      	str	r3, [r5, #0]
 8005212:	e7d6      	b.n	80051c2 <_free_r+0x22>
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	1821      	adds	r1, r4, r0
 8005218:	428b      	cmp	r3, r1
 800521a:	bf04      	itt	eq
 800521c:	6819      	ldreq	r1, [r3, #0]
 800521e:	685b      	ldreq	r3, [r3, #4]
 8005220:	6063      	str	r3, [r4, #4]
 8005222:	bf04      	itt	eq
 8005224:	1809      	addeq	r1, r1, r0
 8005226:	6021      	streq	r1, [r4, #0]
 8005228:	6054      	str	r4, [r2, #4]
 800522a:	e7ca      	b.n	80051c2 <_free_r+0x22>
 800522c:	bd38      	pop	{r3, r4, r5, pc}
 800522e:	bf00      	nop
 8005230:	20000330 	.word	0x20000330

08005234 <sbrk_aligned>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	4e0f      	ldr	r6, [pc, #60]	@ (8005274 <sbrk_aligned+0x40>)
 8005238:	460c      	mov	r4, r1
 800523a:	6831      	ldr	r1, [r6, #0]
 800523c:	4605      	mov	r5, r0
 800523e:	b911      	cbnz	r1, 8005246 <sbrk_aligned+0x12>
 8005240:	f000 fba4 	bl	800598c <_sbrk_r>
 8005244:	6030      	str	r0, [r6, #0]
 8005246:	4621      	mov	r1, r4
 8005248:	4628      	mov	r0, r5
 800524a:	f000 fb9f 	bl	800598c <_sbrk_r>
 800524e:	1c43      	adds	r3, r0, #1
 8005250:	d103      	bne.n	800525a <sbrk_aligned+0x26>
 8005252:	f04f 34ff 	mov.w	r4, #4294967295
 8005256:	4620      	mov	r0, r4
 8005258:	bd70      	pop	{r4, r5, r6, pc}
 800525a:	1cc4      	adds	r4, r0, #3
 800525c:	f024 0403 	bic.w	r4, r4, #3
 8005260:	42a0      	cmp	r0, r4
 8005262:	d0f8      	beq.n	8005256 <sbrk_aligned+0x22>
 8005264:	1a21      	subs	r1, r4, r0
 8005266:	4628      	mov	r0, r5
 8005268:	f000 fb90 	bl	800598c <_sbrk_r>
 800526c:	3001      	adds	r0, #1
 800526e:	d1f2      	bne.n	8005256 <sbrk_aligned+0x22>
 8005270:	e7ef      	b.n	8005252 <sbrk_aligned+0x1e>
 8005272:	bf00      	nop
 8005274:	2000032c 	.word	0x2000032c

08005278 <_malloc_r>:
 8005278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800527c:	1ccd      	adds	r5, r1, #3
 800527e:	f025 0503 	bic.w	r5, r5, #3
 8005282:	3508      	adds	r5, #8
 8005284:	2d0c      	cmp	r5, #12
 8005286:	bf38      	it	cc
 8005288:	250c      	movcc	r5, #12
 800528a:	2d00      	cmp	r5, #0
 800528c:	4606      	mov	r6, r0
 800528e:	db01      	blt.n	8005294 <_malloc_r+0x1c>
 8005290:	42a9      	cmp	r1, r5
 8005292:	d904      	bls.n	800529e <_malloc_r+0x26>
 8005294:	230c      	movs	r3, #12
 8005296:	6033      	str	r3, [r6, #0]
 8005298:	2000      	movs	r0, #0
 800529a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800529e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005374 <_malloc_r+0xfc>
 80052a2:	f000 f869 	bl	8005378 <__malloc_lock>
 80052a6:	f8d8 3000 	ldr.w	r3, [r8]
 80052aa:	461c      	mov	r4, r3
 80052ac:	bb44      	cbnz	r4, 8005300 <_malloc_r+0x88>
 80052ae:	4629      	mov	r1, r5
 80052b0:	4630      	mov	r0, r6
 80052b2:	f7ff ffbf 	bl	8005234 <sbrk_aligned>
 80052b6:	1c43      	adds	r3, r0, #1
 80052b8:	4604      	mov	r4, r0
 80052ba:	d158      	bne.n	800536e <_malloc_r+0xf6>
 80052bc:	f8d8 4000 	ldr.w	r4, [r8]
 80052c0:	4627      	mov	r7, r4
 80052c2:	2f00      	cmp	r7, #0
 80052c4:	d143      	bne.n	800534e <_malloc_r+0xd6>
 80052c6:	2c00      	cmp	r4, #0
 80052c8:	d04b      	beq.n	8005362 <_malloc_r+0xea>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	4639      	mov	r1, r7
 80052ce:	4630      	mov	r0, r6
 80052d0:	eb04 0903 	add.w	r9, r4, r3
 80052d4:	f000 fb5a 	bl	800598c <_sbrk_r>
 80052d8:	4581      	cmp	r9, r0
 80052da:	d142      	bne.n	8005362 <_malloc_r+0xea>
 80052dc:	6821      	ldr	r1, [r4, #0]
 80052de:	1a6d      	subs	r5, r5, r1
 80052e0:	4629      	mov	r1, r5
 80052e2:	4630      	mov	r0, r6
 80052e4:	f7ff ffa6 	bl	8005234 <sbrk_aligned>
 80052e8:	3001      	adds	r0, #1
 80052ea:	d03a      	beq.n	8005362 <_malloc_r+0xea>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	442b      	add	r3, r5
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	f8d8 3000 	ldr.w	r3, [r8]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	bb62      	cbnz	r2, 8005354 <_malloc_r+0xdc>
 80052fa:	f8c8 7000 	str.w	r7, [r8]
 80052fe:	e00f      	b.n	8005320 <_malloc_r+0xa8>
 8005300:	6822      	ldr	r2, [r4, #0]
 8005302:	1b52      	subs	r2, r2, r5
 8005304:	d420      	bmi.n	8005348 <_malloc_r+0xd0>
 8005306:	2a0b      	cmp	r2, #11
 8005308:	d917      	bls.n	800533a <_malloc_r+0xc2>
 800530a:	1961      	adds	r1, r4, r5
 800530c:	42a3      	cmp	r3, r4
 800530e:	6025      	str	r5, [r4, #0]
 8005310:	bf18      	it	ne
 8005312:	6059      	strne	r1, [r3, #4]
 8005314:	6863      	ldr	r3, [r4, #4]
 8005316:	bf08      	it	eq
 8005318:	f8c8 1000 	streq.w	r1, [r8]
 800531c:	5162      	str	r2, [r4, r5]
 800531e:	604b      	str	r3, [r1, #4]
 8005320:	4630      	mov	r0, r6
 8005322:	f000 f82f 	bl	8005384 <__malloc_unlock>
 8005326:	f104 000b 	add.w	r0, r4, #11
 800532a:	1d23      	adds	r3, r4, #4
 800532c:	f020 0007 	bic.w	r0, r0, #7
 8005330:	1ac2      	subs	r2, r0, r3
 8005332:	bf1c      	itt	ne
 8005334:	1a1b      	subne	r3, r3, r0
 8005336:	50a3      	strne	r3, [r4, r2]
 8005338:	e7af      	b.n	800529a <_malloc_r+0x22>
 800533a:	6862      	ldr	r2, [r4, #4]
 800533c:	42a3      	cmp	r3, r4
 800533e:	bf0c      	ite	eq
 8005340:	f8c8 2000 	streq.w	r2, [r8]
 8005344:	605a      	strne	r2, [r3, #4]
 8005346:	e7eb      	b.n	8005320 <_malloc_r+0xa8>
 8005348:	4623      	mov	r3, r4
 800534a:	6864      	ldr	r4, [r4, #4]
 800534c:	e7ae      	b.n	80052ac <_malloc_r+0x34>
 800534e:	463c      	mov	r4, r7
 8005350:	687f      	ldr	r7, [r7, #4]
 8005352:	e7b6      	b.n	80052c2 <_malloc_r+0x4a>
 8005354:	461a      	mov	r2, r3
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	42a3      	cmp	r3, r4
 800535a:	d1fb      	bne.n	8005354 <_malloc_r+0xdc>
 800535c:	2300      	movs	r3, #0
 800535e:	6053      	str	r3, [r2, #4]
 8005360:	e7de      	b.n	8005320 <_malloc_r+0xa8>
 8005362:	230c      	movs	r3, #12
 8005364:	6033      	str	r3, [r6, #0]
 8005366:	4630      	mov	r0, r6
 8005368:	f000 f80c 	bl	8005384 <__malloc_unlock>
 800536c:	e794      	b.n	8005298 <_malloc_r+0x20>
 800536e:	6005      	str	r5, [r0, #0]
 8005370:	e7d6      	b.n	8005320 <_malloc_r+0xa8>
 8005372:	bf00      	nop
 8005374:	20000330 	.word	0x20000330

08005378 <__malloc_lock>:
 8005378:	4801      	ldr	r0, [pc, #4]	@ (8005380 <__malloc_lock+0x8>)
 800537a:	f7ff bf01 	b.w	8005180 <__retarget_lock_acquire_recursive>
 800537e:	bf00      	nop
 8005380:	20000328 	.word	0x20000328

08005384 <__malloc_unlock>:
 8005384:	4801      	ldr	r0, [pc, #4]	@ (800538c <__malloc_unlock+0x8>)
 8005386:	f7ff befc 	b.w	8005182 <__retarget_lock_release_recursive>
 800538a:	bf00      	nop
 800538c:	20000328 	.word	0x20000328

08005390 <__ssputs_r>:
 8005390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005394:	688e      	ldr	r6, [r1, #8]
 8005396:	461f      	mov	r7, r3
 8005398:	42be      	cmp	r6, r7
 800539a:	680b      	ldr	r3, [r1, #0]
 800539c:	4682      	mov	sl, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	4690      	mov	r8, r2
 80053a2:	d82d      	bhi.n	8005400 <__ssputs_r+0x70>
 80053a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80053a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80053ac:	d026      	beq.n	80053fc <__ssputs_r+0x6c>
 80053ae:	6965      	ldr	r5, [r4, #20]
 80053b0:	6909      	ldr	r1, [r1, #16]
 80053b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053b6:	eba3 0901 	sub.w	r9, r3, r1
 80053ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053be:	1c7b      	adds	r3, r7, #1
 80053c0:	444b      	add	r3, r9
 80053c2:	106d      	asrs	r5, r5, #1
 80053c4:	429d      	cmp	r5, r3
 80053c6:	bf38      	it	cc
 80053c8:	461d      	movcc	r5, r3
 80053ca:	0553      	lsls	r3, r2, #21
 80053cc:	d527      	bpl.n	800541e <__ssputs_r+0x8e>
 80053ce:	4629      	mov	r1, r5
 80053d0:	f7ff ff52 	bl	8005278 <_malloc_r>
 80053d4:	4606      	mov	r6, r0
 80053d6:	b360      	cbz	r0, 8005432 <__ssputs_r+0xa2>
 80053d8:	6921      	ldr	r1, [r4, #16]
 80053da:	464a      	mov	r2, r9
 80053dc:	f7ff fed2 	bl	8005184 <memcpy>
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80053e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053ea:	81a3      	strh	r3, [r4, #12]
 80053ec:	6126      	str	r6, [r4, #16]
 80053ee:	6165      	str	r5, [r4, #20]
 80053f0:	444e      	add	r6, r9
 80053f2:	eba5 0509 	sub.w	r5, r5, r9
 80053f6:	6026      	str	r6, [r4, #0]
 80053f8:	60a5      	str	r5, [r4, #8]
 80053fa:	463e      	mov	r6, r7
 80053fc:	42be      	cmp	r6, r7
 80053fe:	d900      	bls.n	8005402 <__ssputs_r+0x72>
 8005400:	463e      	mov	r6, r7
 8005402:	6820      	ldr	r0, [r4, #0]
 8005404:	4632      	mov	r2, r6
 8005406:	4641      	mov	r1, r8
 8005408:	f000 faa6 	bl	8005958 <memmove>
 800540c:	68a3      	ldr	r3, [r4, #8]
 800540e:	1b9b      	subs	r3, r3, r6
 8005410:	60a3      	str	r3, [r4, #8]
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	4433      	add	r3, r6
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	2000      	movs	r0, #0
 800541a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800541e:	462a      	mov	r2, r5
 8005420:	f000 fac4 	bl	80059ac <_realloc_r>
 8005424:	4606      	mov	r6, r0
 8005426:	2800      	cmp	r0, #0
 8005428:	d1e0      	bne.n	80053ec <__ssputs_r+0x5c>
 800542a:	6921      	ldr	r1, [r4, #16]
 800542c:	4650      	mov	r0, sl
 800542e:	f7ff feb7 	bl	80051a0 <_free_r>
 8005432:	230c      	movs	r3, #12
 8005434:	f8ca 3000 	str.w	r3, [sl]
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	f04f 30ff 	mov.w	r0, #4294967295
 8005444:	e7e9      	b.n	800541a <__ssputs_r+0x8a>
	...

08005448 <_svfiprintf_r>:
 8005448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544c:	4698      	mov	r8, r3
 800544e:	898b      	ldrh	r3, [r1, #12]
 8005450:	061b      	lsls	r3, r3, #24
 8005452:	b09d      	sub	sp, #116	@ 0x74
 8005454:	4607      	mov	r7, r0
 8005456:	460d      	mov	r5, r1
 8005458:	4614      	mov	r4, r2
 800545a:	d510      	bpl.n	800547e <_svfiprintf_r+0x36>
 800545c:	690b      	ldr	r3, [r1, #16]
 800545e:	b973      	cbnz	r3, 800547e <_svfiprintf_r+0x36>
 8005460:	2140      	movs	r1, #64	@ 0x40
 8005462:	f7ff ff09 	bl	8005278 <_malloc_r>
 8005466:	6028      	str	r0, [r5, #0]
 8005468:	6128      	str	r0, [r5, #16]
 800546a:	b930      	cbnz	r0, 800547a <_svfiprintf_r+0x32>
 800546c:	230c      	movs	r3, #12
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	f04f 30ff 	mov.w	r0, #4294967295
 8005474:	b01d      	add	sp, #116	@ 0x74
 8005476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547a:	2340      	movs	r3, #64	@ 0x40
 800547c:	616b      	str	r3, [r5, #20]
 800547e:	2300      	movs	r3, #0
 8005480:	9309      	str	r3, [sp, #36]	@ 0x24
 8005482:	2320      	movs	r3, #32
 8005484:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005488:	f8cd 800c 	str.w	r8, [sp, #12]
 800548c:	2330      	movs	r3, #48	@ 0x30
 800548e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800562c <_svfiprintf_r+0x1e4>
 8005492:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005496:	f04f 0901 	mov.w	r9, #1
 800549a:	4623      	mov	r3, r4
 800549c:	469a      	mov	sl, r3
 800549e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054a2:	b10a      	cbz	r2, 80054a8 <_svfiprintf_r+0x60>
 80054a4:	2a25      	cmp	r2, #37	@ 0x25
 80054a6:	d1f9      	bne.n	800549c <_svfiprintf_r+0x54>
 80054a8:	ebba 0b04 	subs.w	fp, sl, r4
 80054ac:	d00b      	beq.n	80054c6 <_svfiprintf_r+0x7e>
 80054ae:	465b      	mov	r3, fp
 80054b0:	4622      	mov	r2, r4
 80054b2:	4629      	mov	r1, r5
 80054b4:	4638      	mov	r0, r7
 80054b6:	f7ff ff6b 	bl	8005390 <__ssputs_r>
 80054ba:	3001      	adds	r0, #1
 80054bc:	f000 80a7 	beq.w	800560e <_svfiprintf_r+0x1c6>
 80054c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054c2:	445a      	add	r2, fp
 80054c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80054c6:	f89a 3000 	ldrb.w	r3, [sl]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 809f 	beq.w	800560e <_svfiprintf_r+0x1c6>
 80054d0:	2300      	movs	r3, #0
 80054d2:	f04f 32ff 	mov.w	r2, #4294967295
 80054d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054da:	f10a 0a01 	add.w	sl, sl, #1
 80054de:	9304      	str	r3, [sp, #16]
 80054e0:	9307      	str	r3, [sp, #28]
 80054e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80054e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80054e8:	4654      	mov	r4, sl
 80054ea:	2205      	movs	r2, #5
 80054ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f0:	484e      	ldr	r0, [pc, #312]	@ (800562c <_svfiprintf_r+0x1e4>)
 80054f2:	f7fa fe95 	bl	8000220 <memchr>
 80054f6:	9a04      	ldr	r2, [sp, #16]
 80054f8:	b9d8      	cbnz	r0, 8005532 <_svfiprintf_r+0xea>
 80054fa:	06d0      	lsls	r0, r2, #27
 80054fc:	bf44      	itt	mi
 80054fe:	2320      	movmi	r3, #32
 8005500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005504:	0711      	lsls	r1, r2, #28
 8005506:	bf44      	itt	mi
 8005508:	232b      	movmi	r3, #43	@ 0x2b
 800550a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800550e:	f89a 3000 	ldrb.w	r3, [sl]
 8005512:	2b2a      	cmp	r3, #42	@ 0x2a
 8005514:	d015      	beq.n	8005542 <_svfiprintf_r+0xfa>
 8005516:	9a07      	ldr	r2, [sp, #28]
 8005518:	4654      	mov	r4, sl
 800551a:	2000      	movs	r0, #0
 800551c:	f04f 0c0a 	mov.w	ip, #10
 8005520:	4621      	mov	r1, r4
 8005522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005526:	3b30      	subs	r3, #48	@ 0x30
 8005528:	2b09      	cmp	r3, #9
 800552a:	d94b      	bls.n	80055c4 <_svfiprintf_r+0x17c>
 800552c:	b1b0      	cbz	r0, 800555c <_svfiprintf_r+0x114>
 800552e:	9207      	str	r2, [sp, #28]
 8005530:	e014      	b.n	800555c <_svfiprintf_r+0x114>
 8005532:	eba0 0308 	sub.w	r3, r0, r8
 8005536:	fa09 f303 	lsl.w	r3, r9, r3
 800553a:	4313      	orrs	r3, r2
 800553c:	9304      	str	r3, [sp, #16]
 800553e:	46a2      	mov	sl, r4
 8005540:	e7d2      	b.n	80054e8 <_svfiprintf_r+0xa0>
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	1d19      	adds	r1, r3, #4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	9103      	str	r1, [sp, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	bfbb      	ittet	lt
 800554e:	425b      	neglt	r3, r3
 8005550:	f042 0202 	orrlt.w	r2, r2, #2
 8005554:	9307      	strge	r3, [sp, #28]
 8005556:	9307      	strlt	r3, [sp, #28]
 8005558:	bfb8      	it	lt
 800555a:	9204      	strlt	r2, [sp, #16]
 800555c:	7823      	ldrb	r3, [r4, #0]
 800555e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005560:	d10a      	bne.n	8005578 <_svfiprintf_r+0x130>
 8005562:	7863      	ldrb	r3, [r4, #1]
 8005564:	2b2a      	cmp	r3, #42	@ 0x2a
 8005566:	d132      	bne.n	80055ce <_svfiprintf_r+0x186>
 8005568:	9b03      	ldr	r3, [sp, #12]
 800556a:	1d1a      	adds	r2, r3, #4
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	9203      	str	r2, [sp, #12]
 8005570:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005574:	3402      	adds	r4, #2
 8005576:	9305      	str	r3, [sp, #20]
 8005578:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800563c <_svfiprintf_r+0x1f4>
 800557c:	7821      	ldrb	r1, [r4, #0]
 800557e:	2203      	movs	r2, #3
 8005580:	4650      	mov	r0, sl
 8005582:	f7fa fe4d 	bl	8000220 <memchr>
 8005586:	b138      	cbz	r0, 8005598 <_svfiprintf_r+0x150>
 8005588:	9b04      	ldr	r3, [sp, #16]
 800558a:	eba0 000a 	sub.w	r0, r0, sl
 800558e:	2240      	movs	r2, #64	@ 0x40
 8005590:	4082      	lsls	r2, r0
 8005592:	4313      	orrs	r3, r2
 8005594:	3401      	adds	r4, #1
 8005596:	9304      	str	r3, [sp, #16]
 8005598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800559c:	4824      	ldr	r0, [pc, #144]	@ (8005630 <_svfiprintf_r+0x1e8>)
 800559e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055a2:	2206      	movs	r2, #6
 80055a4:	f7fa fe3c 	bl	8000220 <memchr>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	d036      	beq.n	800561a <_svfiprintf_r+0x1d2>
 80055ac:	4b21      	ldr	r3, [pc, #132]	@ (8005634 <_svfiprintf_r+0x1ec>)
 80055ae:	bb1b      	cbnz	r3, 80055f8 <_svfiprintf_r+0x1b0>
 80055b0:	9b03      	ldr	r3, [sp, #12]
 80055b2:	3307      	adds	r3, #7
 80055b4:	f023 0307 	bic.w	r3, r3, #7
 80055b8:	3308      	adds	r3, #8
 80055ba:	9303      	str	r3, [sp, #12]
 80055bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055be:	4433      	add	r3, r6
 80055c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80055c2:	e76a      	b.n	800549a <_svfiprintf_r+0x52>
 80055c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055c8:	460c      	mov	r4, r1
 80055ca:	2001      	movs	r0, #1
 80055cc:	e7a8      	b.n	8005520 <_svfiprintf_r+0xd8>
 80055ce:	2300      	movs	r3, #0
 80055d0:	3401      	adds	r4, #1
 80055d2:	9305      	str	r3, [sp, #20]
 80055d4:	4619      	mov	r1, r3
 80055d6:	f04f 0c0a 	mov.w	ip, #10
 80055da:	4620      	mov	r0, r4
 80055dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055e0:	3a30      	subs	r2, #48	@ 0x30
 80055e2:	2a09      	cmp	r2, #9
 80055e4:	d903      	bls.n	80055ee <_svfiprintf_r+0x1a6>
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d0c6      	beq.n	8005578 <_svfiprintf_r+0x130>
 80055ea:	9105      	str	r1, [sp, #20]
 80055ec:	e7c4      	b.n	8005578 <_svfiprintf_r+0x130>
 80055ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80055f2:	4604      	mov	r4, r0
 80055f4:	2301      	movs	r3, #1
 80055f6:	e7f0      	b.n	80055da <_svfiprintf_r+0x192>
 80055f8:	ab03      	add	r3, sp, #12
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	462a      	mov	r2, r5
 80055fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005638 <_svfiprintf_r+0x1f0>)
 8005600:	a904      	add	r1, sp, #16
 8005602:	4638      	mov	r0, r7
 8005604:	f3af 8000 	nop.w
 8005608:	1c42      	adds	r2, r0, #1
 800560a:	4606      	mov	r6, r0
 800560c:	d1d6      	bne.n	80055bc <_svfiprintf_r+0x174>
 800560e:	89ab      	ldrh	r3, [r5, #12]
 8005610:	065b      	lsls	r3, r3, #25
 8005612:	f53f af2d 	bmi.w	8005470 <_svfiprintf_r+0x28>
 8005616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005618:	e72c      	b.n	8005474 <_svfiprintf_r+0x2c>
 800561a:	ab03      	add	r3, sp, #12
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	462a      	mov	r2, r5
 8005620:	4b05      	ldr	r3, [pc, #20]	@ (8005638 <_svfiprintf_r+0x1f0>)
 8005622:	a904      	add	r1, sp, #16
 8005624:	4638      	mov	r0, r7
 8005626:	f000 f879 	bl	800571c <_printf_i>
 800562a:	e7ed      	b.n	8005608 <_svfiprintf_r+0x1c0>
 800562c:	08005a70 	.word	0x08005a70
 8005630:	08005a7a 	.word	0x08005a7a
 8005634:	00000000 	.word	0x00000000
 8005638:	08005391 	.word	0x08005391
 800563c:	08005a76 	.word	0x08005a76

08005640 <_printf_common>:
 8005640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005644:	4616      	mov	r6, r2
 8005646:	4698      	mov	r8, r3
 8005648:	688a      	ldr	r2, [r1, #8]
 800564a:	690b      	ldr	r3, [r1, #16]
 800564c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005650:	4293      	cmp	r3, r2
 8005652:	bfb8      	it	lt
 8005654:	4613      	movlt	r3, r2
 8005656:	6033      	str	r3, [r6, #0]
 8005658:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800565c:	4607      	mov	r7, r0
 800565e:	460c      	mov	r4, r1
 8005660:	b10a      	cbz	r2, 8005666 <_printf_common+0x26>
 8005662:	3301      	adds	r3, #1
 8005664:	6033      	str	r3, [r6, #0]
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	0699      	lsls	r1, r3, #26
 800566a:	bf42      	ittt	mi
 800566c:	6833      	ldrmi	r3, [r6, #0]
 800566e:	3302      	addmi	r3, #2
 8005670:	6033      	strmi	r3, [r6, #0]
 8005672:	6825      	ldr	r5, [r4, #0]
 8005674:	f015 0506 	ands.w	r5, r5, #6
 8005678:	d106      	bne.n	8005688 <_printf_common+0x48>
 800567a:	f104 0a19 	add.w	sl, r4, #25
 800567e:	68e3      	ldr	r3, [r4, #12]
 8005680:	6832      	ldr	r2, [r6, #0]
 8005682:	1a9b      	subs	r3, r3, r2
 8005684:	42ab      	cmp	r3, r5
 8005686:	dc26      	bgt.n	80056d6 <_printf_common+0x96>
 8005688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800568c:	6822      	ldr	r2, [r4, #0]
 800568e:	3b00      	subs	r3, #0
 8005690:	bf18      	it	ne
 8005692:	2301      	movne	r3, #1
 8005694:	0692      	lsls	r2, r2, #26
 8005696:	d42b      	bmi.n	80056f0 <_printf_common+0xb0>
 8005698:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800569c:	4641      	mov	r1, r8
 800569e:	4638      	mov	r0, r7
 80056a0:	47c8      	blx	r9
 80056a2:	3001      	adds	r0, #1
 80056a4:	d01e      	beq.n	80056e4 <_printf_common+0xa4>
 80056a6:	6823      	ldr	r3, [r4, #0]
 80056a8:	6922      	ldr	r2, [r4, #16]
 80056aa:	f003 0306 	and.w	r3, r3, #6
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	bf02      	ittt	eq
 80056b2:	68e5      	ldreq	r5, [r4, #12]
 80056b4:	6833      	ldreq	r3, [r6, #0]
 80056b6:	1aed      	subeq	r5, r5, r3
 80056b8:	68a3      	ldr	r3, [r4, #8]
 80056ba:	bf0c      	ite	eq
 80056bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056c0:	2500      	movne	r5, #0
 80056c2:	4293      	cmp	r3, r2
 80056c4:	bfc4      	itt	gt
 80056c6:	1a9b      	subgt	r3, r3, r2
 80056c8:	18ed      	addgt	r5, r5, r3
 80056ca:	2600      	movs	r6, #0
 80056cc:	341a      	adds	r4, #26
 80056ce:	42b5      	cmp	r5, r6
 80056d0:	d11a      	bne.n	8005708 <_printf_common+0xc8>
 80056d2:	2000      	movs	r0, #0
 80056d4:	e008      	b.n	80056e8 <_printf_common+0xa8>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4652      	mov	r2, sl
 80056da:	4641      	mov	r1, r8
 80056dc:	4638      	mov	r0, r7
 80056de:	47c8      	blx	r9
 80056e0:	3001      	adds	r0, #1
 80056e2:	d103      	bne.n	80056ec <_printf_common+0xac>
 80056e4:	f04f 30ff 	mov.w	r0, #4294967295
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	3501      	adds	r5, #1
 80056ee:	e7c6      	b.n	800567e <_printf_common+0x3e>
 80056f0:	18e1      	adds	r1, r4, r3
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	2030      	movs	r0, #48	@ 0x30
 80056f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80056fa:	4422      	add	r2, r4
 80056fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005700:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005704:	3302      	adds	r3, #2
 8005706:	e7c7      	b.n	8005698 <_printf_common+0x58>
 8005708:	2301      	movs	r3, #1
 800570a:	4622      	mov	r2, r4
 800570c:	4641      	mov	r1, r8
 800570e:	4638      	mov	r0, r7
 8005710:	47c8      	blx	r9
 8005712:	3001      	adds	r0, #1
 8005714:	d0e6      	beq.n	80056e4 <_printf_common+0xa4>
 8005716:	3601      	adds	r6, #1
 8005718:	e7d9      	b.n	80056ce <_printf_common+0x8e>
	...

0800571c <_printf_i>:
 800571c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005720:	7e0f      	ldrb	r7, [r1, #24]
 8005722:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005724:	2f78      	cmp	r7, #120	@ 0x78
 8005726:	4691      	mov	r9, r2
 8005728:	4680      	mov	r8, r0
 800572a:	460c      	mov	r4, r1
 800572c:	469a      	mov	sl, r3
 800572e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005732:	d807      	bhi.n	8005744 <_printf_i+0x28>
 8005734:	2f62      	cmp	r7, #98	@ 0x62
 8005736:	d80a      	bhi.n	800574e <_printf_i+0x32>
 8005738:	2f00      	cmp	r7, #0
 800573a:	f000 80d1 	beq.w	80058e0 <_printf_i+0x1c4>
 800573e:	2f58      	cmp	r7, #88	@ 0x58
 8005740:	f000 80b8 	beq.w	80058b4 <_printf_i+0x198>
 8005744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005748:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800574c:	e03a      	b.n	80057c4 <_printf_i+0xa8>
 800574e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005752:	2b15      	cmp	r3, #21
 8005754:	d8f6      	bhi.n	8005744 <_printf_i+0x28>
 8005756:	a101      	add	r1, pc, #4	@ (adr r1, 800575c <_printf_i+0x40>)
 8005758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800575c:	080057b5 	.word	0x080057b5
 8005760:	080057c9 	.word	0x080057c9
 8005764:	08005745 	.word	0x08005745
 8005768:	08005745 	.word	0x08005745
 800576c:	08005745 	.word	0x08005745
 8005770:	08005745 	.word	0x08005745
 8005774:	080057c9 	.word	0x080057c9
 8005778:	08005745 	.word	0x08005745
 800577c:	08005745 	.word	0x08005745
 8005780:	08005745 	.word	0x08005745
 8005784:	08005745 	.word	0x08005745
 8005788:	080058c7 	.word	0x080058c7
 800578c:	080057f3 	.word	0x080057f3
 8005790:	08005881 	.word	0x08005881
 8005794:	08005745 	.word	0x08005745
 8005798:	08005745 	.word	0x08005745
 800579c:	080058e9 	.word	0x080058e9
 80057a0:	08005745 	.word	0x08005745
 80057a4:	080057f3 	.word	0x080057f3
 80057a8:	08005745 	.word	0x08005745
 80057ac:	08005745 	.word	0x08005745
 80057b0:	08005889 	.word	0x08005889
 80057b4:	6833      	ldr	r3, [r6, #0]
 80057b6:	1d1a      	adds	r2, r3, #4
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6032      	str	r2, [r6, #0]
 80057bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057c4:	2301      	movs	r3, #1
 80057c6:	e09c      	b.n	8005902 <_printf_i+0x1e6>
 80057c8:	6833      	ldr	r3, [r6, #0]
 80057ca:	6820      	ldr	r0, [r4, #0]
 80057cc:	1d19      	adds	r1, r3, #4
 80057ce:	6031      	str	r1, [r6, #0]
 80057d0:	0606      	lsls	r6, r0, #24
 80057d2:	d501      	bpl.n	80057d8 <_printf_i+0xbc>
 80057d4:	681d      	ldr	r5, [r3, #0]
 80057d6:	e003      	b.n	80057e0 <_printf_i+0xc4>
 80057d8:	0645      	lsls	r5, r0, #25
 80057da:	d5fb      	bpl.n	80057d4 <_printf_i+0xb8>
 80057dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80057e0:	2d00      	cmp	r5, #0
 80057e2:	da03      	bge.n	80057ec <_printf_i+0xd0>
 80057e4:	232d      	movs	r3, #45	@ 0x2d
 80057e6:	426d      	negs	r5, r5
 80057e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057ec:	4858      	ldr	r0, [pc, #352]	@ (8005950 <_printf_i+0x234>)
 80057ee:	230a      	movs	r3, #10
 80057f0:	e011      	b.n	8005816 <_printf_i+0xfa>
 80057f2:	6821      	ldr	r1, [r4, #0]
 80057f4:	6833      	ldr	r3, [r6, #0]
 80057f6:	0608      	lsls	r0, r1, #24
 80057f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80057fc:	d402      	bmi.n	8005804 <_printf_i+0xe8>
 80057fe:	0649      	lsls	r1, r1, #25
 8005800:	bf48      	it	mi
 8005802:	b2ad      	uxthmi	r5, r5
 8005804:	2f6f      	cmp	r7, #111	@ 0x6f
 8005806:	4852      	ldr	r0, [pc, #328]	@ (8005950 <_printf_i+0x234>)
 8005808:	6033      	str	r3, [r6, #0]
 800580a:	bf14      	ite	ne
 800580c:	230a      	movne	r3, #10
 800580e:	2308      	moveq	r3, #8
 8005810:	2100      	movs	r1, #0
 8005812:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005816:	6866      	ldr	r6, [r4, #4]
 8005818:	60a6      	str	r6, [r4, #8]
 800581a:	2e00      	cmp	r6, #0
 800581c:	db05      	blt.n	800582a <_printf_i+0x10e>
 800581e:	6821      	ldr	r1, [r4, #0]
 8005820:	432e      	orrs	r6, r5
 8005822:	f021 0104 	bic.w	r1, r1, #4
 8005826:	6021      	str	r1, [r4, #0]
 8005828:	d04b      	beq.n	80058c2 <_printf_i+0x1a6>
 800582a:	4616      	mov	r6, r2
 800582c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005830:	fb03 5711 	mls	r7, r3, r1, r5
 8005834:	5dc7      	ldrb	r7, [r0, r7]
 8005836:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800583a:	462f      	mov	r7, r5
 800583c:	42bb      	cmp	r3, r7
 800583e:	460d      	mov	r5, r1
 8005840:	d9f4      	bls.n	800582c <_printf_i+0x110>
 8005842:	2b08      	cmp	r3, #8
 8005844:	d10b      	bne.n	800585e <_printf_i+0x142>
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	07df      	lsls	r7, r3, #31
 800584a:	d508      	bpl.n	800585e <_printf_i+0x142>
 800584c:	6923      	ldr	r3, [r4, #16]
 800584e:	6861      	ldr	r1, [r4, #4]
 8005850:	4299      	cmp	r1, r3
 8005852:	bfde      	ittt	le
 8005854:	2330      	movle	r3, #48	@ 0x30
 8005856:	f806 3c01 	strble.w	r3, [r6, #-1]
 800585a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800585e:	1b92      	subs	r2, r2, r6
 8005860:	6122      	str	r2, [r4, #16]
 8005862:	f8cd a000 	str.w	sl, [sp]
 8005866:	464b      	mov	r3, r9
 8005868:	aa03      	add	r2, sp, #12
 800586a:	4621      	mov	r1, r4
 800586c:	4640      	mov	r0, r8
 800586e:	f7ff fee7 	bl	8005640 <_printf_common>
 8005872:	3001      	adds	r0, #1
 8005874:	d14a      	bne.n	800590c <_printf_i+0x1f0>
 8005876:	f04f 30ff 	mov.w	r0, #4294967295
 800587a:	b004      	add	sp, #16
 800587c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	f043 0320 	orr.w	r3, r3, #32
 8005886:	6023      	str	r3, [r4, #0]
 8005888:	4832      	ldr	r0, [pc, #200]	@ (8005954 <_printf_i+0x238>)
 800588a:	2778      	movs	r7, #120	@ 0x78
 800588c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	6831      	ldr	r1, [r6, #0]
 8005894:	061f      	lsls	r7, r3, #24
 8005896:	f851 5b04 	ldr.w	r5, [r1], #4
 800589a:	d402      	bmi.n	80058a2 <_printf_i+0x186>
 800589c:	065f      	lsls	r7, r3, #25
 800589e:	bf48      	it	mi
 80058a0:	b2ad      	uxthmi	r5, r5
 80058a2:	6031      	str	r1, [r6, #0]
 80058a4:	07d9      	lsls	r1, r3, #31
 80058a6:	bf44      	itt	mi
 80058a8:	f043 0320 	orrmi.w	r3, r3, #32
 80058ac:	6023      	strmi	r3, [r4, #0]
 80058ae:	b11d      	cbz	r5, 80058b8 <_printf_i+0x19c>
 80058b0:	2310      	movs	r3, #16
 80058b2:	e7ad      	b.n	8005810 <_printf_i+0xf4>
 80058b4:	4826      	ldr	r0, [pc, #152]	@ (8005950 <_printf_i+0x234>)
 80058b6:	e7e9      	b.n	800588c <_printf_i+0x170>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	f023 0320 	bic.w	r3, r3, #32
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	e7f6      	b.n	80058b0 <_printf_i+0x194>
 80058c2:	4616      	mov	r6, r2
 80058c4:	e7bd      	b.n	8005842 <_printf_i+0x126>
 80058c6:	6833      	ldr	r3, [r6, #0]
 80058c8:	6825      	ldr	r5, [r4, #0]
 80058ca:	6961      	ldr	r1, [r4, #20]
 80058cc:	1d18      	adds	r0, r3, #4
 80058ce:	6030      	str	r0, [r6, #0]
 80058d0:	062e      	lsls	r6, r5, #24
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	d501      	bpl.n	80058da <_printf_i+0x1be>
 80058d6:	6019      	str	r1, [r3, #0]
 80058d8:	e002      	b.n	80058e0 <_printf_i+0x1c4>
 80058da:	0668      	lsls	r0, r5, #25
 80058dc:	d5fb      	bpl.n	80058d6 <_printf_i+0x1ba>
 80058de:	8019      	strh	r1, [r3, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	6123      	str	r3, [r4, #16]
 80058e4:	4616      	mov	r6, r2
 80058e6:	e7bc      	b.n	8005862 <_printf_i+0x146>
 80058e8:	6833      	ldr	r3, [r6, #0]
 80058ea:	1d1a      	adds	r2, r3, #4
 80058ec:	6032      	str	r2, [r6, #0]
 80058ee:	681e      	ldr	r6, [r3, #0]
 80058f0:	6862      	ldr	r2, [r4, #4]
 80058f2:	2100      	movs	r1, #0
 80058f4:	4630      	mov	r0, r6
 80058f6:	f7fa fc93 	bl	8000220 <memchr>
 80058fa:	b108      	cbz	r0, 8005900 <_printf_i+0x1e4>
 80058fc:	1b80      	subs	r0, r0, r6
 80058fe:	6060      	str	r0, [r4, #4]
 8005900:	6863      	ldr	r3, [r4, #4]
 8005902:	6123      	str	r3, [r4, #16]
 8005904:	2300      	movs	r3, #0
 8005906:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800590a:	e7aa      	b.n	8005862 <_printf_i+0x146>
 800590c:	6923      	ldr	r3, [r4, #16]
 800590e:	4632      	mov	r2, r6
 8005910:	4649      	mov	r1, r9
 8005912:	4640      	mov	r0, r8
 8005914:	47d0      	blx	sl
 8005916:	3001      	adds	r0, #1
 8005918:	d0ad      	beq.n	8005876 <_printf_i+0x15a>
 800591a:	6823      	ldr	r3, [r4, #0]
 800591c:	079b      	lsls	r3, r3, #30
 800591e:	d413      	bmi.n	8005948 <_printf_i+0x22c>
 8005920:	68e0      	ldr	r0, [r4, #12]
 8005922:	9b03      	ldr	r3, [sp, #12]
 8005924:	4298      	cmp	r0, r3
 8005926:	bfb8      	it	lt
 8005928:	4618      	movlt	r0, r3
 800592a:	e7a6      	b.n	800587a <_printf_i+0x15e>
 800592c:	2301      	movs	r3, #1
 800592e:	4632      	mov	r2, r6
 8005930:	4649      	mov	r1, r9
 8005932:	4640      	mov	r0, r8
 8005934:	47d0      	blx	sl
 8005936:	3001      	adds	r0, #1
 8005938:	d09d      	beq.n	8005876 <_printf_i+0x15a>
 800593a:	3501      	adds	r5, #1
 800593c:	68e3      	ldr	r3, [r4, #12]
 800593e:	9903      	ldr	r1, [sp, #12]
 8005940:	1a5b      	subs	r3, r3, r1
 8005942:	42ab      	cmp	r3, r5
 8005944:	dcf2      	bgt.n	800592c <_printf_i+0x210>
 8005946:	e7eb      	b.n	8005920 <_printf_i+0x204>
 8005948:	2500      	movs	r5, #0
 800594a:	f104 0619 	add.w	r6, r4, #25
 800594e:	e7f5      	b.n	800593c <_printf_i+0x220>
 8005950:	08005a81 	.word	0x08005a81
 8005954:	08005a92 	.word	0x08005a92

08005958 <memmove>:
 8005958:	4288      	cmp	r0, r1
 800595a:	b510      	push	{r4, lr}
 800595c:	eb01 0402 	add.w	r4, r1, r2
 8005960:	d902      	bls.n	8005968 <memmove+0x10>
 8005962:	4284      	cmp	r4, r0
 8005964:	4623      	mov	r3, r4
 8005966:	d807      	bhi.n	8005978 <memmove+0x20>
 8005968:	1e43      	subs	r3, r0, #1
 800596a:	42a1      	cmp	r1, r4
 800596c:	d008      	beq.n	8005980 <memmove+0x28>
 800596e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005976:	e7f8      	b.n	800596a <memmove+0x12>
 8005978:	4402      	add	r2, r0
 800597a:	4601      	mov	r1, r0
 800597c:	428a      	cmp	r2, r1
 800597e:	d100      	bne.n	8005982 <memmove+0x2a>
 8005980:	bd10      	pop	{r4, pc}
 8005982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800598a:	e7f7      	b.n	800597c <memmove+0x24>

0800598c <_sbrk_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	4d06      	ldr	r5, [pc, #24]	@ (80059a8 <_sbrk_r+0x1c>)
 8005990:	2300      	movs	r3, #0
 8005992:	4604      	mov	r4, r0
 8005994:	4608      	mov	r0, r1
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	f7fc f8a2 	bl	8001ae0 <_sbrk>
 800599c:	1c43      	adds	r3, r0, #1
 800599e:	d102      	bne.n	80059a6 <_sbrk_r+0x1a>
 80059a0:	682b      	ldr	r3, [r5, #0]
 80059a2:	b103      	cbz	r3, 80059a6 <_sbrk_r+0x1a>
 80059a4:	6023      	str	r3, [r4, #0]
 80059a6:	bd38      	pop	{r3, r4, r5, pc}
 80059a8:	20000324 	.word	0x20000324

080059ac <_realloc_r>:
 80059ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b0:	4607      	mov	r7, r0
 80059b2:	4614      	mov	r4, r2
 80059b4:	460d      	mov	r5, r1
 80059b6:	b921      	cbnz	r1, 80059c2 <_realloc_r+0x16>
 80059b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059bc:	4611      	mov	r1, r2
 80059be:	f7ff bc5b 	b.w	8005278 <_malloc_r>
 80059c2:	b92a      	cbnz	r2, 80059d0 <_realloc_r+0x24>
 80059c4:	f7ff fbec 	bl	80051a0 <_free_r>
 80059c8:	4625      	mov	r5, r4
 80059ca:	4628      	mov	r0, r5
 80059cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d0:	f000 f81a 	bl	8005a08 <_malloc_usable_size_r>
 80059d4:	4284      	cmp	r4, r0
 80059d6:	4606      	mov	r6, r0
 80059d8:	d802      	bhi.n	80059e0 <_realloc_r+0x34>
 80059da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80059de:	d8f4      	bhi.n	80059ca <_realloc_r+0x1e>
 80059e0:	4621      	mov	r1, r4
 80059e2:	4638      	mov	r0, r7
 80059e4:	f7ff fc48 	bl	8005278 <_malloc_r>
 80059e8:	4680      	mov	r8, r0
 80059ea:	b908      	cbnz	r0, 80059f0 <_realloc_r+0x44>
 80059ec:	4645      	mov	r5, r8
 80059ee:	e7ec      	b.n	80059ca <_realloc_r+0x1e>
 80059f0:	42b4      	cmp	r4, r6
 80059f2:	4622      	mov	r2, r4
 80059f4:	4629      	mov	r1, r5
 80059f6:	bf28      	it	cs
 80059f8:	4632      	movcs	r2, r6
 80059fa:	f7ff fbc3 	bl	8005184 <memcpy>
 80059fe:	4629      	mov	r1, r5
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff fbcd 	bl	80051a0 <_free_r>
 8005a06:	e7f1      	b.n	80059ec <_realloc_r+0x40>

08005a08 <_malloc_usable_size_r>:
 8005a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a0c:	1f18      	subs	r0, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	bfbc      	itt	lt
 8005a12:	580b      	ldrlt	r3, [r1, r0]
 8005a14:	18c0      	addlt	r0, r0, r3
 8005a16:	4770      	bx	lr

08005a18 <_init>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	bf00      	nop
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr

08005a24 <_fini>:
 8005a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a26:	bf00      	nop
 8005a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a2a:	bc08      	pop	{r3}
 8005a2c:	469e      	mov	lr, r3
 8005a2e:	4770      	bx	lr
