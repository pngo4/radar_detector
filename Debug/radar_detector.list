
radar_detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080034a4  080034a4  000044a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034d4  080034d4  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080034d4  080034d4  000044d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034dc  080034dc  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034dc  080034dc  000044dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034e0  080034e0  000044e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080034e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080034f0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080034f0  000050c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c791  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab6  00000000  00000000  000117cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00013288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000097c  00000000  00000000  00013e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021890  00000000  00000000  00014814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfdc  00000000  00000000  000360a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d03c5  00000000  00000000  00044080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114445  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003324  00000000  00000000  00114488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001177ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800348c 	.word	0x0800348c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800348c 	.word	0x0800348c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <set_servo_angle>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//function to set servo angle
void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle)
{
 8000530:	b480      	push	{r7}
 8000532:	b087      	sub	sp, #28
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	4613      	mov	r3, r2
 800053c:	71fb      	strb	r3, [r7, #7]
	//map angle (0-180) to pulse width (210-1050 counts)
	uint32_t pulse_length = 210 + (angle * (1050 - 210) / 180);
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8000544:	fb02 f303 	mul.w	r3, r2, r3
 8000548:	4a15      	ldr	r2, [pc, #84]	@ (80005a0 <set_servo_angle+0x70>)
 800054a:	fb82 1203 	smull	r1, r2, r2, r3
 800054e:	441a      	add	r2, r3
 8000550:	11d2      	asrs	r2, r2, #7
 8000552:	17db      	asrs	r3, r3, #31
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	33d2      	adds	r3, #210	@ 0xd2
 8000558:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d104      	bne.n	800056a <set_servo_angle+0x3a>
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000568:	e013      	b.n	8000592 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	2b04      	cmp	r3, #4
 800056e:	d104      	bne.n	800057a <set_servo_angle+0x4a>
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000578:	e00b      	b.n	8000592 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800057a:	68bb      	ldr	r3, [r7, #8]
 800057c:	2b08      	cmp	r3, #8
 800057e:	d104      	bne.n	800058a <set_servo_angle+0x5a>
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000588:	e003      	b.n	8000592 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000592:	bf00      	nop
 8000594:	371c      	adds	r7, #28
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	b60b60b7 	.word	0xb60b60b7

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	const char msg[] = "UART to PC success \n";
 80005aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <main+0x70>)
 80005ac:	463c      	mov	r4, r7
 80005ae:	461d      	mov	r5, r3
 80005b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005b4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005b8:	6020      	str	r0, [r4, #0]
 80005ba:	3404      	adds	r4, #4
 80005bc:	7021      	strb	r1, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005be:	f000 fb31 	bl	8000c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c2:	f000 f82f 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c6:	f000 f939 	bl	800083c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f90d 	bl	80007e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80005ce:	f000 f895 	bl	80006fc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2,(const uint8_t*) msg , strlen(msg), TIMEOUT);
 80005d2:	4639      	mov	r1, r7
 80005d4:	2364      	movs	r3, #100	@ 0x64
 80005d6:	2214      	movs	r2, #20
 80005d8:	480f      	ldr	r0, [pc, #60]	@ (8000618 <main+0x74>)
 80005da:	f002 fb6f 	bl	8002cbc <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005de:	2100      	movs	r1, #0
 80005e0:	480e      	ldr	r0, [pc, #56]	@ (800061c <main+0x78>)
 80005e2:	f001 fd37 	bl	8002054 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(button_state == 0) {
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <main+0x7c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d1fb      	bne.n	80005e6 <main+0x42>
	  for(uint8_t angle = 0; angle <= 180; angle +=2) {
 80005ee:	2300      	movs	r3, #0
 80005f0:	75fb      	strb	r3, [r7, #23]
 80005f2:	e00b      	b.n	800060c <main+0x68>
			  set_servo_angle(&htim2,TIM_CHANNEL_1, angle);
 80005f4:	7dfb      	ldrb	r3, [r7, #23]
 80005f6:	461a      	mov	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	4808      	ldr	r0, [pc, #32]	@ (800061c <main+0x78>)
 80005fc:	f7ff ff98 	bl	8000530 <set_servo_angle>
			 HAL_Delay(50);
 8000600:	2032      	movs	r0, #50	@ 0x32
 8000602:	f000 fb81 	bl	8000d08 <HAL_Delay>
	  for(uint8_t angle = 0; angle <= 180; angle +=2) {
 8000606:	7dfb      	ldrb	r3, [r7, #23]
 8000608:	3302      	adds	r3, #2
 800060a:	75fb      	strb	r3, [r7, #23]
 800060c:	7dfb      	ldrb	r3, [r7, #23]
 800060e:	2bb4      	cmp	r3, #180	@ 0xb4
 8000610:	d9f0      	bls.n	80005f4 <main+0x50>
	  if(button_state == 0) {
 8000612:	e7e8      	b.n	80005e6 <main+0x42>
 8000614:	080034a4 	.word	0x080034a4
 8000618:	20000070 	.word	0x20000070
 800061c:	20000028 	.word	0x20000028
 8000620:	200000b8 	.word	0x200000b8

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	@ 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	2234      	movs	r2, #52	@ 0x34
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fefe 	bl	8003434 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 0308 	add.w	r3, r7, #8
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <SystemClock_Config+0xd0>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	4a28      	ldr	r2, [pc, #160]	@ (80006f4 <SystemClock_Config+0xd0>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	@ 0x40
 8000658:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <SystemClock_Config+0xd0>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000664:	2300      	movs	r3, #0
 8000666:	603b      	str	r3, [r7, #0]
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <SystemClock_Config+0xd4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000670:	4a21      	ldr	r2, [pc, #132]	@ (80006f8 <SystemClock_Config+0xd4>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <SystemClock_Config+0xd4>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 800069c:	2354      	movs	r3, #84	@ 0x54
 800069e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 031c 	add.w	r3, r7, #28
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 f989 	bl	80019c8 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006bc:	f000 f970 	bl	80009a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d6:	f107 0308 	add.w	r3, r7, #8
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fe29 	bl	8001334 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006e8:	f000 f95a 	bl	80009a0 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	@ 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	@ 0x38
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000702:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
 8000728:	615a      	str	r2, [r3, #20]
 800072a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800072c:	4b2d      	ldr	r3, [pc, #180]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 800072e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000732:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000734:	4b2b      	ldr	r3, [pc, #172]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 8000736:	22c7      	movs	r2, #199	@ 0xc7
 8000738:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800073a:	4b2a      	ldr	r3, [pc, #168]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8000740:	4b28      	ldr	r3, [pc, #160]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 8000742:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000746:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000748:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074e:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000754:	4823      	ldr	r0, [pc, #140]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 8000756:	f001 fbd5 	bl	8001f04 <HAL_TIM_Base_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000760:	f000 f91e 	bl	80009a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000768:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800076a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800076e:	4619      	mov	r1, r3
 8000770:	481c      	ldr	r0, [pc, #112]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 8000772:	f001 fdf9 	bl	8002368 <HAL_TIM_ConfigClockSource>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800077c:	f000 f910 	bl	80009a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000780:	4818      	ldr	r0, [pc, #96]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 8000782:	f001 fc0e 	bl	8001fa2 <HAL_TIM_PWM_Init>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800078c:	f000 f908 	bl	80009a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000790:	2300      	movs	r3, #0
 8000792:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000798:	f107 0320 	add.w	r3, r7, #32
 800079c:	4619      	mov	r1, r3
 800079e:	4811      	ldr	r0, [pc, #68]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 80007a0:	f002 f9c0 	bl	8002b24 <HAL_TIMEx_MasterConfigSynchronization>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007aa:	f000 f8f9 	bl	80009a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ae:	2360      	movs	r3, #96	@ 0x60
 80007b0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	4807      	ldr	r0, [pc, #28]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 80007c6:	f001 fd0d 	bl	80021e4 <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80007d0:	f000 f8e6 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007d4:	4803      	ldr	r0, [pc, #12]	@ (80007e4 <MX_TIM2_Init+0xe8>)
 80007d6:	f000 f931 	bl	8000a3c <HAL_TIM_MspPostInit>

}
 80007da:	bf00      	nop
 80007dc:	3738      	adds	r7, #56	@ 0x38
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000028 	.word	0x20000028

080007e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 80007ee:	4a12      	ldr	r2, [pc, #72]	@ (8000838 <MX_USART2_UART_Init+0x50>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007f2:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800081e:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_USART2_UART_Init+0x4c>)
 8000820:	f002 f9fc 	bl	8002c1c <HAL_UART_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800082a:	f000 f8b9 	bl	80009a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000070 	.word	0x20000070
 8000838:	40004400 	.word	0x40004400

0800083c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 0314 	add.w	r3, r7, #20
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a33      	ldr	r2, [pc, #204]	@ (8000928 <MX_GPIO_Init+0xec>)
 800085c:	f043 0304 	orr.w	r3, r3, #4
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b31      	ldr	r3, [pc, #196]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0304 	and.w	r3, r3, #4
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a2c      	ldr	r2, [pc, #176]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a25      	ldr	r2, [pc, #148]	@ (8000928 <MX_GPIO_Init+0xec>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <MX_GPIO_Init+0xec>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	607b      	str	r3, [r7, #4]
 80008aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_GPIO_Init+0xec>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000928 <MX_GPIO_Init+0xec>)
 80008b0:	f043 0302 	orr.w	r3, r3, #2
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_GPIO_Init+0xec>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0302 	and.w	r3, r3, #2
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2120      	movs	r1, #32
 80008c6:	4819      	ldr	r0, [pc, #100]	@ (800092c <MX_GPIO_Init+0xf0>)
 80008c8:	f000 fce8 	bl	800129c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4813      	ldr	r0, [pc, #76]	@ (8000930 <MX_GPIO_Init+0xf4>)
 80008e4:	f000 fb46 	bl	8000f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008e8:	2320      	movs	r3, #32
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	480b      	ldr	r0, [pc, #44]	@ (800092c <MX_GPIO_Init+0xf0>)
 8000900:	f000 fb38 	bl	8000f74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000904:	2200      	movs	r2, #0
 8000906:	2100      	movs	r1, #0
 8000908:	2028      	movs	r0, #40	@ 0x28
 800090a:	f000 fafc 	bl	8000f06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800090e:	2028      	movs	r0, #40	@ 0x28
 8000910:	f000 fb15 	bl	8000f3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2120      	movs	r1, #32
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_GPIO_Init+0xf0>)
 800091a:	f000 fcbf 	bl	800129c <HAL_GPIO_WritePin>

  /* USER CODE END MX_GPIO_Init_2 */
}
 800091e:	bf00      	nop
 8000920:	3728      	adds	r7, #40	@ 0x28
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40020000 	.word	0x40020000
 8000930:	40020800 	.word	0x40020800

08000934 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) //blue pushbutton pin
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000944:	d122      	bne.n	800098c <HAL_GPIO_EXTI_Callback+0x58>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000946:	2120      	movs	r1, #32
 8000948:	4812      	ldr	r0, [pc, #72]	@ (8000994 <HAL_GPIO_EXTI_Callback+0x60>)
 800094a:	f000 fcc0 	bl	80012ce <HAL_GPIO_TogglePin>

		if(button_state == 0) {
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_GPIO_EXTI_Callback+0x64>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d109      	bne.n	800096a <HAL_GPIO_EXTI_Callback+0x36>
			__HAL_RCC_TIM2_CLK_DISABLE(); // pause
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <HAL_GPIO_EXTI_Callback+0x68>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095a:	4a10      	ldr	r2, [pc, #64]	@ (800099c <HAL_GPIO_EXTI_Callback+0x68>)
 800095c:	f023 0301 	bic.w	r3, r3, #1
 8000960:	6413      	str	r3, [r2, #64]	@ 0x40
			button_state = 1;
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <HAL_GPIO_EXTI_Callback+0x64>)
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
		} else {
			__HAL_RCC_TIM2_CLK_ENABLE();
			button_state = 0;
		}
	}
}
 8000968:	e010      	b.n	800098c <HAL_GPIO_EXTI_Callback+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <HAL_GPIO_EXTI_Callback+0x68>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <HAL_GPIO_EXTI_Callback+0x68>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_GPIO_EXTI_Callback+0x68>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
			button_state = 0;
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <HAL_GPIO_EXTI_Callback+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40020000 	.word	0x40020000
 8000998:	200000b8 	.word	0x200000b8
 800099c:	40023800 	.word	0x40023800

080009a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a4:	b672      	cpsid	i
}
 80009a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <Error_Handler+0x8>

080009ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	4b10      	ldr	r3, [pc, #64]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a0f      	ldr	r2, [pc, #60]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	603b      	str	r3, [r7, #0]
 80009d2:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009de:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <HAL_MspInit+0x4c>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ea:	2007      	movs	r0, #7
 80009ec:	f000 fa80 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40023800 	.word	0x40023800

080009fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a0c:	d10d      	bne.n	8000a2a <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	@ (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	@ (8000a38 <HAL_TIM_Base_MspInit+0x3c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a5c:	d11d      	bne.n	8000a9a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_TIM_MspPostInit+0x68>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <HAL_TIM_MspPostInit+0x68>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <HAL_TIM_MspPostInit+0x68>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_Pin;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM2_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	4619      	mov	r1, r3
 8000a94:	4804      	ldr	r0, [pc, #16]	@ (8000aa8 <HAL_TIM_MspPostInit+0x6c>)
 8000a96:	f000 fa6d 	bl	8000f74 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020000 	.word	0x40020000

08000aac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	@ 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <HAL_UART_MspInit+0x84>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d12b      	bne.n	8000b26 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ade:	4b15      	ldr	r3, [pc, #84]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae6:	613b      	str	r3, [r7, #16]
 8000ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a10      	ldr	r2, [pc, #64]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <HAL_UART_MspInit+0x88>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b06:	230c      	movs	r3, #12
 8000b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b12:	2303      	movs	r3, #3
 8000b14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b16:	2307      	movs	r3, #7
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <HAL_UART_MspInit+0x8c>)
 8000b22:	f000 fa27 	bl	8000f74 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b26:	bf00      	nop
 8000b28:	3728      	adds	r7, #40	@ 0x28
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40004400 	.word	0x40004400
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020000 	.word	0x40020000

08000b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <NMI_Handler+0x4>

08000b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b48:	bf00      	nop
 8000b4a:	e7fd      	b.n	8000b48 <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <MemManage_Handler+0x4>

08000b54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b92:	f000 f899 	bl	8000cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b9e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ba2:	f000 fbaf 	bl	8001304 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <SystemInit+0x20>)
 8000bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <SystemInit+0x20>)
 8000bb8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bd4:	f7ff ffea 	bl	8000bac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bd8:	480c      	ldr	r0, [pc, #48]	@ (8000c0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bda:	490d      	ldr	r1, [pc, #52]	@ (8000c10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be0:	e002      	b.n	8000be8 <LoopCopyDataInit>

08000be2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be6:	3304      	adds	r3, #4

08000be8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bec:	d3f9      	bcc.n	8000be2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf0:	4c0a      	ldr	r4, [pc, #40]	@ (8000c1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf4:	e001      	b.n	8000bfa <LoopFillZerobss>

08000bf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf8:	3204      	adds	r2, #4

08000bfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bfc:	d3fb      	bcc.n	8000bf6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bfe:	f002 fc21 	bl	8003444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c02:	f7ff fccf 	bl	80005a4 <main>
  bx  lr    
 8000c06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c14:	080034e4 	.word	0x080034e4
  ldr r2, =_sbss
 8000c18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c1c:	200000c0 	.word	0x200000c0

08000c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c20:	e7fe      	b.n	8000c20 <ADC_IRQHandler>
	...

08000c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c28:	4b0e      	ldr	r3, [pc, #56]	@ (8000c64 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <HAL_Init+0x40>)
 8000c2e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c34:	4b0b      	ldr	r3, [pc, #44]	@ (8000c64 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <HAL_Init+0x40>)
 8000c3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a07      	ldr	r2, [pc, #28]	@ (8000c64 <HAL_Init+0x40>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f000 f94f 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c52:	2000      	movs	r0, #0
 8000c54:	f000 f808 	bl	8000c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c58:	f7ff fea8 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023c00 	.word	0x40023c00

08000c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c70:	4b12      	ldr	r3, [pc, #72]	@ (8000cbc <HAL_InitTick+0x54>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_InitTick+0x58>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c86:	4618      	mov	r0, r3
 8000c88:	f000 f967 	bl	8000f5a <HAL_SYSTICK_Config>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e00e      	b.n	8000cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b0f      	cmp	r3, #15
 8000c9a:	d80a      	bhi.n	8000cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca4:	f000 f92f 	bl	8000f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ca8:	4a06      	ldr	r2, [pc, #24]	@ (8000cc4 <HAL_InitTick+0x5c>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	e000      	b.n	8000cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000004 	.word	0x20000004

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	200000bc 	.word	0x200000bc

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	@ (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	200000bc 	.word	0x200000bc

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff ffee 	bl	8000cf0 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffde 	bl	8000cf0 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	@ (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	@ (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4907      	ldr	r1, [pc, #28]	@ (8000dec <__NVIC_EnableIRQ+0x38>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000e100 	.word	0xe000e100

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	@ (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff29 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff3e 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff ff31 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffa2 	bl	8000eac <SysTick_Config>
 8000f68:	4603      	mov	r3, r0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
	...

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	@ 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
 8000f8e:	e165      	b.n	800125c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f90:	2201      	movs	r2, #1
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	697a      	ldr	r2, [r7, #20]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	f040 8154 	bne.w	8001256 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d005      	beq.n	8000fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d130      	bne.n	8001028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2203      	movs	r2, #3
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	091b      	lsrs	r3, r3, #4
 8001012:	f003 0201 	and.w	r2, r3, #1
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	2b03      	cmp	r3, #3
 8001032:	d017      	beq.n	8001064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b02      	cmp	r3, #2
 800106e:	d123      	bne.n	80010b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	08da      	lsrs	r2, r3, #3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3208      	adds	r2, #8
 8001078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	220f      	movs	r2, #15
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	691a      	ldr	r2, [r3, #16]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	08da      	lsrs	r2, r3, #3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3208      	adds	r2, #8
 80010b2:	69b9      	ldr	r1, [r7, #24]
 80010b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	2203      	movs	r2, #3
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0203 	and.w	r2, r3, #3
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f000 80ae 	beq.w	8001256 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b5d      	ldr	r3, [pc, #372]	@ (8001274 <HAL_GPIO_Init+0x300>)
 8001100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001102:	4a5c      	ldr	r2, [pc, #368]	@ (8001274 <HAL_GPIO_Init+0x300>)
 8001104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001108:	6453      	str	r3, [r2, #68]	@ 0x44
 800110a:	4b5a      	ldr	r3, [pc, #360]	@ (8001274 <HAL_GPIO_Init+0x300>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800110e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001116:	4a58      	ldr	r2, [pc, #352]	@ (8001278 <HAL_GPIO_Init+0x304>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	220f      	movs	r2, #15
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43db      	mvns	r3, r3
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	4013      	ands	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a4f      	ldr	r2, [pc, #316]	@ (800127c <HAL_GPIO_Init+0x308>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d025      	beq.n	800118e <HAL_GPIO_Init+0x21a>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a4e      	ldr	r2, [pc, #312]	@ (8001280 <HAL_GPIO_Init+0x30c>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d01f      	beq.n	800118a <HAL_GPIO_Init+0x216>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a4d      	ldr	r2, [pc, #308]	@ (8001284 <HAL_GPIO_Init+0x310>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d019      	beq.n	8001186 <HAL_GPIO_Init+0x212>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a4c      	ldr	r2, [pc, #304]	@ (8001288 <HAL_GPIO_Init+0x314>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <HAL_GPIO_Init+0x20e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4a4b      	ldr	r2, [pc, #300]	@ (800128c <HAL_GPIO_Init+0x318>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d00d      	beq.n	800117e <HAL_GPIO_Init+0x20a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a4a      	ldr	r2, [pc, #296]	@ (8001290 <HAL_GPIO_Init+0x31c>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d007      	beq.n	800117a <HAL_GPIO_Init+0x206>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a49      	ldr	r2, [pc, #292]	@ (8001294 <HAL_GPIO_Init+0x320>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d101      	bne.n	8001176 <HAL_GPIO_Init+0x202>
 8001172:	2306      	movs	r3, #6
 8001174:	e00c      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001176:	2307      	movs	r3, #7
 8001178:	e00a      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800117a:	2305      	movs	r3, #5
 800117c:	e008      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800117e:	2304      	movs	r3, #4
 8001180:	e006      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001182:	2303      	movs	r3, #3
 8001184:	e004      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 8001186:	2302      	movs	r3, #2
 8001188:	e002      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800118a:	2301      	movs	r3, #1
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x21c>
 800118e:	2300      	movs	r3, #0
 8001190:	69fa      	ldr	r2, [r7, #28]
 8001192:	f002 0203 	and.w	r2, r2, #3
 8001196:	0092      	lsls	r2, r2, #2
 8001198:	4093      	lsls	r3, r2
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011a0:	4935      	ldr	r1, [pc, #212]	@ (8001278 <HAL_GPIO_Init+0x304>)
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	089b      	lsrs	r3, r3, #2
 80011a6:	3302      	adds	r3, #2
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001298 <HAL_GPIO_Init+0x324>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011d2:	4a31      	ldr	r2, [pc, #196]	@ (8001298 <HAL_GPIO_Init+0x324>)
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <HAL_GPIO_Init+0x324>)
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011fc:	4a26      	ldr	r2, [pc, #152]	@ (8001298 <HAL_GPIO_Init+0x324>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001202:	4b25      	ldr	r3, [pc, #148]	@ (8001298 <HAL_GPIO_Init+0x324>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001226:	4a1c      	ldr	r2, [pc, #112]	@ (8001298 <HAL_GPIO_Init+0x324>)
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122c:	4b1a      	ldr	r3, [pc, #104]	@ (8001298 <HAL_GPIO_Init+0x324>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	43db      	mvns	r3, r3
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4013      	ands	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001250:	4a11      	ldr	r2, [pc, #68]	@ (8001298 <HAL_GPIO_Init+0x324>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	61fb      	str	r3, [r7, #28]
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	f67f ae96 	bls.w	8000f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40013800 	.word	0x40013800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400
 8001284:	40020800 	.word	0x40020800
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021000 	.word	0x40021000
 8001290:	40021400 	.word	0x40021400
 8001294:	40021800 	.word	0x40021800
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
 80012a8:	4613      	mov	r3, r2
 80012aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012ac:	787b      	ldrb	r3, [r7, #1]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012b2:	887a      	ldrh	r2, [r7, #2]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012b8:	e003      	b.n	80012c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ba:	887b      	ldrh	r3, [r7, #2]
 80012bc:	041a      	lsls	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	619a      	str	r2, [r3, #24]
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	460b      	mov	r3, r1
 80012d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e0:	887a      	ldrh	r2, [r7, #2]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4013      	ands	r3, r2
 80012e6:	041a      	lsls	r2, r3, #16
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	400b      	ands	r3, r1
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
}
 80012f6:	bf00      	nop
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800130e:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001310:	695a      	ldr	r2, [r3, #20]
 8001312:	88fb      	ldrh	r3, [r7, #6]
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fb06 	bl	8000934 <HAL_GPIO_EXTI_Callback>
  }
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e0cc      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001348:	4b68      	ldr	r3, [pc, #416]	@ (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 030f 	and.w	r3, r3, #15
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d90c      	bls.n	8001370 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001356:	4b65      	ldr	r3, [pc, #404]	@ (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800135e:	4b63      	ldr	r3, [pc, #396]	@ (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	683a      	ldr	r2, [r7, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d001      	beq.n	8001370 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800136c:	2301      	movs	r3, #1
 800136e:	e0b8      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d020      	beq.n	80013be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001388:	4b59      	ldr	r3, [pc, #356]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	4a58      	ldr	r2, [pc, #352]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001392:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013a0:	4b53      	ldr	r3, [pc, #332]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	4a52      	ldr	r2, [pc, #328]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013ac:	4b50      	ldr	r3, [pc, #320]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	494d      	ldr	r1, [pc, #308]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d044      	beq.n	8001454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d107      	bne.n	80013e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d2:	4b47      	ldr	r3, [pc, #284]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d119      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e07f      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d003      	beq.n	80013f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d107      	bne.n	8001402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f2:	4b3f      	ldr	r3, [pc, #252]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d109      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e06f      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001402:	4b3b      	ldr	r3, [pc, #236]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e067      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001412:	4b37      	ldr	r3, [pc, #220]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f023 0203 	bic.w	r2, r3, #3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	4934      	ldr	r1, [pc, #208]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001420:	4313      	orrs	r3, r2
 8001422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001424:	f7ff fc64 	bl	8000cf0 <HAL_GetTick>
 8001428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142a:	e00a      	b.n	8001442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800142c:	f7ff fc60 	bl	8000cf0 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e04f      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001442:	4b2b      	ldr	r3, [pc, #172]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	f003 020c 	and.w	r2, r3, #12
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	429a      	cmp	r2, r3
 8001452:	d1eb      	bne.n	800142c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001454:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 030f 	and.w	r3, r3, #15
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d20c      	bcs.n	800147c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	4b22      	ldr	r3, [pc, #136]	@ (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_RCC_ClockConfig+0x1b8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 030f 	and.w	r3, r3, #15
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d001      	beq.n	800147c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e032      	b.n	80014e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	2b00      	cmp	r3, #0
 8001486:	d008      	beq.n	800149a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001488:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	4916      	ldr	r1, [pc, #88]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	4313      	orrs	r3, r2
 8001498:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	490e      	ldr	r1, [pc, #56]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ba:	f000 f855 	bl	8001568 <HAL_RCC_GetSysClockFreq>
 80014be:	4602      	mov	r2, r0
 80014c0:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	091b      	lsrs	r3, r3, #4
 80014c6:	f003 030f 	and.w	r3, r3, #15
 80014ca:	490a      	ldr	r1, [pc, #40]	@ (80014f4 <HAL_RCC_ClockConfig+0x1c0>)
 80014cc:	5ccb      	ldrb	r3, [r1, r3]
 80014ce:	fa22 f303 	lsr.w	r3, r2, r3
 80014d2:	4a09      	ldr	r2, [pc, #36]	@ (80014f8 <HAL_RCC_ClockConfig+0x1c4>)
 80014d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80014d6:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <HAL_RCC_ClockConfig+0x1c8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fbc4 	bl	8000c68 <HAL_InitTick>

  return HAL_OK;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40023c00 	.word	0x40023c00
 80014f0:	40023800 	.word	0x40023800
 80014f4:	080034bc 	.word	0x080034bc
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000004 	.word	0x20000004

08001500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <HAL_RCC_GetHCLKFreq+0x14>)
 8001506:	681b      	ldr	r3, [r3, #0]
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000000 	.word	0x20000000

08001518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800151c:	f7ff fff0 	bl	8001500 <HAL_RCC_GetHCLKFreq>
 8001520:	4602      	mov	r2, r0
 8001522:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	0a9b      	lsrs	r3, r3, #10
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	4903      	ldr	r1, [pc, #12]	@ (800153c <HAL_RCC_GetPCLK1Freq+0x24>)
 800152e:	5ccb      	ldrb	r3, [r1, r3]
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	bd80      	pop	{r7, pc}
 8001538:	40023800 	.word	0x40023800
 800153c:	080034cc 	.word	0x080034cc

08001540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001544:	f7ff ffdc 	bl	8001500 <HAL_RCC_GetHCLKFreq>
 8001548:	4602      	mov	r2, r0
 800154a:	4b05      	ldr	r3, [pc, #20]	@ (8001560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	0b5b      	lsrs	r3, r3, #13
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	4903      	ldr	r1, [pc, #12]	@ (8001564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001556:	5ccb      	ldrb	r3, [r1, r3]
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800155c:	4618      	mov	r0, r3
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40023800 	.word	0x40023800
 8001564:	080034cc 	.word	0x080034cc

08001568 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800156c:	b0ae      	sub	sp, #184	@ 0xb8
 800156e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800158e:	4bcb      	ldr	r3, [pc, #812]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 030c 	and.w	r3, r3, #12
 8001596:	2b0c      	cmp	r3, #12
 8001598:	f200 8206 	bhi.w	80019a8 <HAL_RCC_GetSysClockFreq+0x440>
 800159c:	a201      	add	r2, pc, #4	@ (adr r2, 80015a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800159e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a2:	bf00      	nop
 80015a4:	080015d9 	.word	0x080015d9
 80015a8:	080019a9 	.word	0x080019a9
 80015ac:	080019a9 	.word	0x080019a9
 80015b0:	080019a9 	.word	0x080019a9
 80015b4:	080015e1 	.word	0x080015e1
 80015b8:	080019a9 	.word	0x080019a9
 80015bc:	080019a9 	.word	0x080019a9
 80015c0:	080019a9 	.word	0x080019a9
 80015c4:	080015e9 	.word	0x080015e9
 80015c8:	080019a9 	.word	0x080019a9
 80015cc:	080019a9 	.word	0x080019a9
 80015d0:	080019a9 	.word	0x080019a9
 80015d4:	080017d9 	.word	0x080017d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015d8:	4bb9      	ldr	r3, [pc, #740]	@ (80018c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015de:	e1e7      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015e0:	4bb8      	ldr	r3, [pc, #736]	@ (80018c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015e6:	e1e3      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015e8:	4bb4      	ldr	r3, [pc, #720]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x354>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015f4:	4bb1      	ldr	r3, [pc, #708]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x354>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d071      	beq.n	80016e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001600:	4bae      	ldr	r3, [pc, #696]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	099b      	lsrs	r3, r3, #6
 8001606:	2200      	movs	r2, #0
 8001608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800160c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001610:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001618:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001622:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001626:	4622      	mov	r2, r4
 8001628:	462b      	mov	r3, r5
 800162a:	f04f 0000 	mov.w	r0, #0
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	0159      	lsls	r1, r3, #5
 8001634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001638:	0150      	lsls	r0, r2, #5
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4621      	mov	r1, r4
 8001640:	1a51      	subs	r1, r2, r1
 8001642:	6439      	str	r1, [r7, #64]	@ 0x40
 8001644:	4629      	mov	r1, r5
 8001646:	eb63 0301 	sbc.w	r3, r3, r1
 800164a:	647b      	str	r3, [r7, #68]	@ 0x44
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001658:	4649      	mov	r1, r9
 800165a:	018b      	lsls	r3, r1, #6
 800165c:	4641      	mov	r1, r8
 800165e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001662:	4641      	mov	r1, r8
 8001664:	018a      	lsls	r2, r1, #6
 8001666:	4641      	mov	r1, r8
 8001668:	1a51      	subs	r1, r2, r1
 800166a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800166c:	4649      	mov	r1, r9
 800166e:	eb63 0301 	sbc.w	r3, r3, r1
 8001672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	f04f 0300 	mov.w	r3, #0
 800167c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001680:	4649      	mov	r1, r9
 8001682:	00cb      	lsls	r3, r1, #3
 8001684:	4641      	mov	r1, r8
 8001686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800168a:	4641      	mov	r1, r8
 800168c:	00ca      	lsls	r2, r1, #3
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	4603      	mov	r3, r0
 8001694:	4622      	mov	r2, r4
 8001696:	189b      	adds	r3, r3, r2
 8001698:	633b      	str	r3, [r7, #48]	@ 0x30
 800169a:	462b      	mov	r3, r5
 800169c:	460a      	mov	r2, r1
 800169e:	eb42 0303 	adc.w	r3, r2, r3
 80016a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016b0:	4629      	mov	r1, r5
 80016b2:	024b      	lsls	r3, r1, #9
 80016b4:	4621      	mov	r1, r4
 80016b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016ba:	4621      	mov	r1, r4
 80016bc:	024a      	lsls	r2, r1, #9
 80016be:	4610      	mov	r0, r2
 80016c0:	4619      	mov	r1, r3
 80016c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016c6:	2200      	movs	r2, #0
 80016c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80016d4:	f7fe fd96 	bl	8000204 <__aeabi_uldivmod>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4613      	mov	r3, r2
 80016de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016e2:	e067      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016e4:	4b75      	ldr	r3, [pc, #468]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x354>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	099b      	lsrs	r3, r3, #6
 80016ea:	2200      	movs	r2, #0
 80016ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016f0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80016f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016fe:	2300      	movs	r3, #0
 8001700:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001702:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001706:	4622      	mov	r2, r4
 8001708:	462b      	mov	r3, r5
 800170a:	f04f 0000 	mov.w	r0, #0
 800170e:	f04f 0100 	mov.w	r1, #0
 8001712:	0159      	lsls	r1, r3, #5
 8001714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001718:	0150      	lsls	r0, r2, #5
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	4621      	mov	r1, r4
 8001720:	1a51      	subs	r1, r2, r1
 8001722:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001724:	4629      	mov	r1, r5
 8001726:	eb63 0301 	sbc.w	r3, r3, r1
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001738:	4649      	mov	r1, r9
 800173a:	018b      	lsls	r3, r1, #6
 800173c:	4641      	mov	r1, r8
 800173e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001742:	4641      	mov	r1, r8
 8001744:	018a      	lsls	r2, r1, #6
 8001746:	4641      	mov	r1, r8
 8001748:	ebb2 0a01 	subs.w	sl, r2, r1
 800174c:	4649      	mov	r1, r9
 800174e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800175e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001762:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001766:	4692      	mov	sl, r2
 8001768:	469b      	mov	fp, r3
 800176a:	4623      	mov	r3, r4
 800176c:	eb1a 0303 	adds.w	r3, sl, r3
 8001770:	623b      	str	r3, [r7, #32]
 8001772:	462b      	mov	r3, r5
 8001774:	eb4b 0303 	adc.w	r3, fp, r3
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001786:	4629      	mov	r1, r5
 8001788:	028b      	lsls	r3, r1, #10
 800178a:	4621      	mov	r1, r4
 800178c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001790:	4621      	mov	r1, r4
 8001792:	028a      	lsls	r2, r1, #10
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800179c:	2200      	movs	r2, #0
 800179e:	673b      	str	r3, [r7, #112]	@ 0x70
 80017a0:	677a      	str	r2, [r7, #116]	@ 0x74
 80017a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80017a6:	f7fe fd2d 	bl	8000204 <__aeabi_uldivmod>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4613      	mov	r3, r2
 80017b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017b4:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x354>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	3301      	adds	r3, #1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80017c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017d6:	e0eb      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017d8:	4b38      	ldr	r3, [pc, #224]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x354>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017e4:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x354>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d06b      	beq.n	80018c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f0:	4b32      	ldr	r3, [pc, #200]	@ (80018bc <HAL_RCC_GetSysClockFreq+0x354>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	099b      	lsrs	r3, r3, #6
 80017f6:	2200      	movs	r2, #0
 80017f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001802:	663b      	str	r3, [r7, #96]	@ 0x60
 8001804:	2300      	movs	r3, #0
 8001806:	667b      	str	r3, [r7, #100]	@ 0x64
 8001808:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800180c:	4622      	mov	r2, r4
 800180e:	462b      	mov	r3, r5
 8001810:	f04f 0000 	mov.w	r0, #0
 8001814:	f04f 0100 	mov.w	r1, #0
 8001818:	0159      	lsls	r1, r3, #5
 800181a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800181e:	0150      	lsls	r0, r2, #5
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4621      	mov	r1, r4
 8001826:	1a51      	subs	r1, r2, r1
 8001828:	61b9      	str	r1, [r7, #24]
 800182a:	4629      	mov	r1, r5
 800182c:	eb63 0301 	sbc.w	r3, r3, r1
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f04f 0300 	mov.w	r3, #0
 800183a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800183e:	4659      	mov	r1, fp
 8001840:	018b      	lsls	r3, r1, #6
 8001842:	4651      	mov	r1, sl
 8001844:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001848:	4651      	mov	r1, sl
 800184a:	018a      	lsls	r2, r1, #6
 800184c:	4651      	mov	r1, sl
 800184e:	ebb2 0801 	subs.w	r8, r2, r1
 8001852:	4659      	mov	r1, fp
 8001854:	eb63 0901 	sbc.w	r9, r3, r1
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001864:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001868:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800186c:	4690      	mov	r8, r2
 800186e:	4699      	mov	r9, r3
 8001870:	4623      	mov	r3, r4
 8001872:	eb18 0303 	adds.w	r3, r8, r3
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	462b      	mov	r3, r5
 800187a:	eb49 0303 	adc.w	r3, r9, r3
 800187e:	617b      	str	r3, [r7, #20]
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800188c:	4629      	mov	r1, r5
 800188e:	024b      	lsls	r3, r1, #9
 8001890:	4621      	mov	r1, r4
 8001892:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001896:	4621      	mov	r1, r4
 8001898:	024a      	lsls	r2, r1, #9
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018a2:	2200      	movs	r2, #0
 80018a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80018a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80018a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018ac:	f7fe fcaa 	bl	8000204 <__aeabi_uldivmod>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4613      	mov	r3, r2
 80018b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018ba:	e065      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x420>
 80018bc:	40023800 	.word	0x40023800
 80018c0:	00f42400 	.word	0x00f42400
 80018c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018c8:	4b3d      	ldr	r3, [pc, #244]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	099b      	lsrs	r3, r3, #6
 80018ce:	2200      	movs	r2, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	4611      	mov	r1, r2
 80018d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80018da:	2300      	movs	r3, #0
 80018dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80018de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80018e2:	4642      	mov	r2, r8
 80018e4:	464b      	mov	r3, r9
 80018e6:	f04f 0000 	mov.w	r0, #0
 80018ea:	f04f 0100 	mov.w	r1, #0
 80018ee:	0159      	lsls	r1, r3, #5
 80018f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018f4:	0150      	lsls	r0, r2, #5
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4641      	mov	r1, r8
 80018fc:	1a51      	subs	r1, r2, r1
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	4649      	mov	r1, r9
 8001902:	eb63 0301 	sbc.w	r3, r3, r1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	f04f 0300 	mov.w	r3, #0
 8001910:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001914:	4659      	mov	r1, fp
 8001916:	018b      	lsls	r3, r1, #6
 8001918:	4651      	mov	r1, sl
 800191a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800191e:	4651      	mov	r1, sl
 8001920:	018a      	lsls	r2, r1, #6
 8001922:	4651      	mov	r1, sl
 8001924:	1a54      	subs	r4, r2, r1
 8001926:	4659      	mov	r1, fp
 8001928:	eb63 0501 	sbc.w	r5, r3, r1
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	f04f 0300 	mov.w	r3, #0
 8001934:	00eb      	lsls	r3, r5, #3
 8001936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800193a:	00e2      	lsls	r2, r4, #3
 800193c:	4614      	mov	r4, r2
 800193e:	461d      	mov	r5, r3
 8001940:	4643      	mov	r3, r8
 8001942:	18e3      	adds	r3, r4, r3
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	464b      	mov	r3, r9
 8001948:	eb45 0303 	adc.w	r3, r5, r3
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	e9d7 4500 	ldrd	r4, r5, [r7]
 800195a:	4629      	mov	r1, r5
 800195c:	028b      	lsls	r3, r1, #10
 800195e:	4621      	mov	r1, r4
 8001960:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001964:	4621      	mov	r1, r4
 8001966:	028a      	lsls	r2, r1, #10
 8001968:	4610      	mov	r0, r2
 800196a:	4619      	mov	r1, r3
 800196c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001970:	2200      	movs	r2, #0
 8001972:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001974:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001976:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800197a:	f7fe fc43 	bl	8000204 <__aeabi_uldivmod>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4613      	mov	r3, r2
 8001984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001988:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	0f1b      	lsrs	r3, r3, #28
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001996:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800199a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019a6:	e003      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80019aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	37b8      	adds	r7, #184	@ 0xb8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	00f42400 	.word	0x00f42400

080019c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e28d      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8083 	beq.w	8001aee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019e8:	4b94      	ldr	r3, [pc, #592]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	f003 030c 	and.w	r3, r3, #12
 80019f0:	2b04      	cmp	r3, #4
 80019f2:	d019      	beq.n	8001a28 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019f4:	4b91      	ldr	r3, [pc, #580]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 030c 	and.w	r3, r3, #12
        || \
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a00:	4b8e      	ldr	r3, [pc, #568]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a0c:	d00c      	beq.n	8001a28 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0e:	4b8b      	ldr	r3, [pc, #556]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a16:	2b0c      	cmp	r3, #12
 8001a18:	d112      	bne.n	8001a40 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a1a:	4b88      	ldr	r3, [pc, #544]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a26:	d10b      	bne.n	8001a40 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a28:	4b84      	ldr	r3, [pc, #528]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d05b      	beq.n	8001aec <HAL_RCC_OscConfig+0x124>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d157      	bne.n	8001aec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e25a      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a48:	d106      	bne.n	8001a58 <HAL_RCC_OscConfig+0x90>
 8001a4a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7b      	ldr	r2, [pc, #492]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e01d      	b.n	8001a94 <HAL_RCC_OscConfig+0xcc>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0xb4>
 8001a62:	4b76      	ldr	r3, [pc, #472]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a75      	ldr	r2, [pc, #468]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b73      	ldr	r3, [pc, #460]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a72      	ldr	r2, [pc, #456]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0xcc>
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a6e      	ldr	r2, [pc, #440]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b6c      	ldr	r3, [pc, #432]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d013      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f928 	bl	8000cf0 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff f924 	bl	8000cf0 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	@ 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e21f      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	4b61      	ldr	r3, [pc, #388]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xdc>
 8001ac2:	e014      	b.n	8001aee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f914 	bl	8000cf0 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff f910 	bl	8000cf0 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	@ 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e20b      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	4b57      	ldr	r3, [pc, #348]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x104>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d06f      	beq.n	8001bda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001afa:	4b50      	ldr	r3, [pc, #320]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d017      	beq.n	8001b36 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b06:	4b4d      	ldr	r3, [pc, #308]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d105      	bne.n	8001b1e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b12:	4b4a      	ldr	r3, [pc, #296]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1e:	4b47      	ldr	r3, [pc, #284]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b26:	2b0c      	cmp	r3, #12
 8001b28:	d11c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b2a:	4b44      	ldr	r3, [pc, #272]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d116      	bne.n	8001b64 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	4b41      	ldr	r3, [pc, #260]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_RCC_OscConfig+0x186>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e1d3      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4937      	ldr	r1, [pc, #220]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b62:	e03a      	b.n	8001bda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d020      	beq.n	8001bae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b6c:	4b34      	ldr	r3, [pc, #208]	@ (8001c40 <HAL_RCC_OscConfig+0x278>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff f8bd 	bl	8000cf0 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b7a:	f7ff f8b9 	bl	8000cf0 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e1b4      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b98:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4925      	ldr	r1, [pc, #148]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
 8001bac:	e015      	b.n	8001bda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bae:	4b24      	ldr	r3, [pc, #144]	@ (8001c40 <HAL_RCC_OscConfig+0x278>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f89c 	bl	8000cf0 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bbc:	f7ff f898 	bl	8000cf0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e193      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f0      	bne.n	8001bbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d036      	beq.n	8001c54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d016      	beq.n	8001c1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_RCC_OscConfig+0x27c>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f87c 	bl	8000cf0 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff f878 	bl	8000cf0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e173      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <HAL_RCC_OscConfig+0x274>)
 8001c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x234>
 8001c1a:	e01b      	b.n	8001c54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1c:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <HAL_RCC_OscConfig+0x27c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c22:	f7ff f865 	bl	8000cf0 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	e00e      	b.n	8001c48 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f861 	bl	8000cf0 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d907      	bls.n	8001c48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e15c      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	42470000 	.word	0x42470000
 8001c44:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	4b8a      	ldr	r3, [pc, #552]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ea      	bne.n	8001c2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0304 	and.w	r3, r3, #4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 8097 	beq.w	8001d90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c66:	4b83      	ldr	r3, [pc, #524]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10f      	bne.n	8001c92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	4b7f      	ldr	r3, [pc, #508]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c82:	4b7c      	ldr	r3, [pc, #496]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c92:	4b79      	ldr	r3, [pc, #484]	@ (8001e78 <HAL_RCC_OscConfig+0x4b0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d118      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c9e:	4b76      	ldr	r3, [pc, #472]	@ (8001e78 <HAL_RCC_OscConfig+0x4b0>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a75      	ldr	r2, [pc, #468]	@ (8001e78 <HAL_RCC_OscConfig+0x4b0>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001caa:	f7ff f821 	bl	8000cf0 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cb2:	f7ff f81d 	bl	8000cf0 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e118      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc4:	4b6c      	ldr	r3, [pc, #432]	@ (8001e78 <HAL_RCC_OscConfig+0x4b0>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0f0      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x31e>
 8001cd8:	4b66      	ldr	r3, [pc, #408]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cdc:	4a65      	ldr	r2, [pc, #404]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce4:	e01c      	b.n	8001d20 <HAL_RCC_OscConfig+0x358>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x340>
 8001cee:	4b61      	ldr	r3, [pc, #388]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf2:	4a60      	ldr	r2, [pc, #384]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cfa:	4b5e      	ldr	r3, [pc, #376]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfe:	4a5d      	ldr	r2, [pc, #372]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0x358>
 8001d08:	4b5a      	ldr	r3, [pc, #360]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0c:	4a59      	ldr	r2, [pc, #356]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d14:	4b57      	ldr	r3, [pc, #348]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d18:	4a56      	ldr	r2, [pc, #344]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001d1a:	f023 0304 	bic.w	r3, r3, #4
 8001d1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d015      	beq.n	8001d54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d28:	f7fe ffe2 	bl	8000cf0 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2e:	e00a      	b.n	8001d46 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d30:	f7fe ffde 	bl	8000cf0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e0d7      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d46:	4b4b      	ldr	r3, [pc, #300]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ee      	beq.n	8001d30 <HAL_RCC_OscConfig+0x368>
 8001d52:	e014      	b.n	8001d7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7fe ffcc 	bl	8000cf0 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5a:	e00a      	b.n	8001d72 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7fe ffc8 	bl	8000cf0 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e0c1      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d72:	4b40      	ldr	r3, [pc, #256]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ee      	bne.n	8001d5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d7e:	7dfb      	ldrb	r3, [r7, #23]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d105      	bne.n	8001d90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d84:	4b3b      	ldr	r3, [pc, #236]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	4a3a      	ldr	r2, [pc, #232]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001d8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80ad 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d9a:	4b36      	ldr	r3, [pc, #216]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d060      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d145      	bne.n	8001e3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dae:	4b33      	ldr	r3, [pc, #204]	@ (8001e7c <HAL_RCC_OscConfig+0x4b4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7fe ff9c 	bl	8000cf0 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7fe ff98 	bl	8000cf0 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e093      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dce:	4b29      	ldr	r3, [pc, #164]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69da      	ldr	r2, [r3, #28]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a1b      	ldr	r3, [r3, #32]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	019b      	lsls	r3, r3, #6
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df0:	085b      	lsrs	r3, r3, #1
 8001df2:	3b01      	subs	r3, #1
 8001df4:	041b      	lsls	r3, r3, #16
 8001df6:	431a      	orrs	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	061b      	lsls	r3, r3, #24
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e04:	071b      	lsls	r3, r3, #28
 8001e06:	491b      	ldr	r1, [pc, #108]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <HAL_RCC_OscConfig+0x4b4>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e12:	f7fe ff6d 	bl	8000cf0 <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7fe ff69 	bl	8000cf0 <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e064      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e2c:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x452>
 8001e38:	e05c      	b.n	8001ef4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <HAL_RCC_OscConfig+0x4b4>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7fe ff56 	bl	8000cf0 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7fe ff52 	bl	8000cf0 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e04d      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_RCC_OscConfig+0x4ac>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x480>
 8001e66:	e045      	b.n	8001ef4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e040      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
 8001e74:	40023800 	.word	0x40023800
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e80:	4b1f      	ldr	r3, [pc, #124]	@ (8001f00 <HAL_RCC_OscConfig+0x538>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d030      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d129      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d122      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d119      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec6:	085b      	lsrs	r3, r3, #1
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d10f      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800

08001f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e041      	b.n	8001f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fd66 	bl	80009fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f000 fad8 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e041      	b.n	8002038 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d106      	bne.n	8001fce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f839 	bl	8002040 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	f000 fa89 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <HAL_TIM_PWM_Start+0x24>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b01      	cmp	r3, #1
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e022      	b.n	80020be <HAL_TIM_PWM_Start+0x6a>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d109      	bne.n	8002092 <HAL_TIM_PWM_Start+0x3e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	bf14      	ite	ne
 800208a:	2301      	movne	r3, #1
 800208c:	2300      	moveq	r3, #0
 800208e:	b2db      	uxtb	r3, r3
 8002090:	e015      	b.n	80020be <HAL_TIM_PWM_Start+0x6a>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d109      	bne.n	80020ac <HAL_TIM_PWM_Start+0x58>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	bf14      	ite	ne
 80020a4:	2301      	movne	r3, #1
 80020a6:	2300      	moveq	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	e008      	b.n	80020be <HAL_TIM_PWM_Start+0x6a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	bf14      	ite	ne
 80020b8:	2301      	movne	r3, #1
 80020ba:	2300      	moveq	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e07c      	b.n	80021c0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d104      	bne.n	80020d6 <HAL_TIM_PWM_Start+0x82>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020d4:	e013      	b.n	80020fe <HAL_TIM_PWM_Start+0xaa>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b04      	cmp	r3, #4
 80020da:	d104      	bne.n	80020e6 <HAL_TIM_PWM_Start+0x92>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020e4:	e00b      	b.n	80020fe <HAL_TIM_PWM_Start+0xaa>
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b08      	cmp	r3, #8
 80020ea:	d104      	bne.n	80020f6 <HAL_TIM_PWM_Start+0xa2>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020f4:	e003      	b.n	80020fe <HAL_TIM_PWM_Start+0xaa>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2202      	movs	r2, #2
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2201      	movs	r2, #1
 8002104:	6839      	ldr	r1, [r7, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fce6 	bl	8002ad8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2d      	ldr	r2, [pc, #180]	@ (80021c8 <HAL_TIM_PWM_Start+0x174>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d004      	beq.n	8002120 <HAL_TIM_PWM_Start+0xcc>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2c      	ldr	r2, [pc, #176]	@ (80021cc <HAL_TIM_PWM_Start+0x178>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d101      	bne.n	8002124 <HAL_TIM_PWM_Start+0xd0>
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_TIM_PWM_Start+0xd2>
 8002124:	2300      	movs	r3, #0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d007      	beq.n	800213a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002138:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a22      	ldr	r2, [pc, #136]	@ (80021c8 <HAL_TIM_PWM_Start+0x174>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d022      	beq.n	800218a <HAL_TIM_PWM_Start+0x136>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800214c:	d01d      	beq.n	800218a <HAL_TIM_PWM_Start+0x136>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a1f      	ldr	r2, [pc, #124]	@ (80021d0 <HAL_TIM_PWM_Start+0x17c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d018      	beq.n	800218a <HAL_TIM_PWM_Start+0x136>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1d      	ldr	r2, [pc, #116]	@ (80021d4 <HAL_TIM_PWM_Start+0x180>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_TIM_PWM_Start+0x136>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a1c      	ldr	r2, [pc, #112]	@ (80021d8 <HAL_TIM_PWM_Start+0x184>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d00e      	beq.n	800218a <HAL_TIM_PWM_Start+0x136>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a16      	ldr	r2, [pc, #88]	@ (80021cc <HAL_TIM_PWM_Start+0x178>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d009      	beq.n	800218a <HAL_TIM_PWM_Start+0x136>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a18      	ldr	r2, [pc, #96]	@ (80021dc <HAL_TIM_PWM_Start+0x188>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d004      	beq.n	800218a <HAL_TIM_PWM_Start+0x136>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a16      	ldr	r2, [pc, #88]	@ (80021e0 <HAL_TIM_PWM_Start+0x18c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d111      	bne.n	80021ae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b06      	cmp	r3, #6
 800219a:	d010      	beq.n	80021be <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ac:	e007      	b.n	80021be <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40010400 	.word	0x40010400
 80021d0:	40000400 	.word	0x40000400
 80021d4:	40000800 	.word	0x40000800
 80021d8:	40000c00 	.word	0x40000c00
 80021dc:	40014000 	.word	0x40014000
 80021e0:	40001800 	.word	0x40001800

080021e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80021fe:	2302      	movs	r3, #2
 8002200:	e0ae      	b.n	8002360 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0c      	cmp	r3, #12
 800220e:	f200 809f 	bhi.w	8002350 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002212:	a201      	add	r2, pc, #4	@ (adr r2, 8002218 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002218:	0800224d 	.word	0x0800224d
 800221c:	08002351 	.word	0x08002351
 8002220:	08002351 	.word	0x08002351
 8002224:	08002351 	.word	0x08002351
 8002228:	0800228d 	.word	0x0800228d
 800222c:	08002351 	.word	0x08002351
 8002230:	08002351 	.word	0x08002351
 8002234:	08002351 	.word	0x08002351
 8002238:	080022cf 	.word	0x080022cf
 800223c:	08002351 	.word	0x08002351
 8002240:	08002351 	.word	0x08002351
 8002244:	08002351 	.word	0x08002351
 8002248:	0800230f 	.word	0x0800230f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68b9      	ldr	r1, [r7, #8]
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f9f6 	bl	8002644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699a      	ldr	r2, [r3, #24]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0208 	orr.w	r2, r2, #8
 8002266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 0204 	bic.w	r2, r2, #4
 8002276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6999      	ldr	r1, [r3, #24]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	691a      	ldr	r2, [r3, #16]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	619a      	str	r2, [r3, #24]
      break;
 800228a:	e064      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fa46 	bl	8002724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699a      	ldr	r2, [r3, #24]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	699a      	ldr	r2, [r3, #24]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6999      	ldr	r1, [r3, #24]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	021a      	lsls	r2, r3, #8
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	619a      	str	r2, [r3, #24]
      break;
 80022cc:	e043      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 fa9b 	bl	8002810 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f042 0208 	orr.w	r2, r2, #8
 80022e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69da      	ldr	r2, [r3, #28]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0204 	bic.w	r2, r2, #4
 80022f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69d9      	ldr	r1, [r3, #28]
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	691a      	ldr	r2, [r3, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	61da      	str	r2, [r3, #28]
      break;
 800230c:	e023      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	4618      	mov	r0, r3
 8002316:	f000 faef 	bl	80028f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69da      	ldr	r2, [r3, #28]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69d9      	ldr	r1, [r3, #28]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	021a      	lsls	r2, r3, #8
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	61da      	str	r2, [r3, #28]
      break;
 800234e:	e002      	b.n	8002356 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	75fb      	strb	r3, [r7, #23]
      break;
 8002354:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800235e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d101      	bne.n	8002384 <HAL_TIM_ConfigClockSource+0x1c>
 8002380:	2302      	movs	r3, #2
 8002382:	e0b4      	b.n	80024ee <HAL_TIM_ConfigClockSource+0x186>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023bc:	d03e      	beq.n	800243c <HAL_TIM_ConfigClockSource+0xd4>
 80023be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023c2:	f200 8087 	bhi.w	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023ca:	f000 8086 	beq.w	80024da <HAL_TIM_ConfigClockSource+0x172>
 80023ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023d2:	d87f      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023d4:	2b70      	cmp	r3, #112	@ 0x70
 80023d6:	d01a      	beq.n	800240e <HAL_TIM_ConfigClockSource+0xa6>
 80023d8:	2b70      	cmp	r3, #112	@ 0x70
 80023da:	d87b      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023dc:	2b60      	cmp	r3, #96	@ 0x60
 80023de:	d050      	beq.n	8002482 <HAL_TIM_ConfigClockSource+0x11a>
 80023e0:	2b60      	cmp	r3, #96	@ 0x60
 80023e2:	d877      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023e4:	2b50      	cmp	r3, #80	@ 0x50
 80023e6:	d03c      	beq.n	8002462 <HAL_TIM_ConfigClockSource+0xfa>
 80023e8:	2b50      	cmp	r3, #80	@ 0x50
 80023ea:	d873      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023ec:	2b40      	cmp	r3, #64	@ 0x40
 80023ee:	d058      	beq.n	80024a2 <HAL_TIM_ConfigClockSource+0x13a>
 80023f0:	2b40      	cmp	r3, #64	@ 0x40
 80023f2:	d86f      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023f4:	2b30      	cmp	r3, #48	@ 0x30
 80023f6:	d064      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x15a>
 80023f8:	2b30      	cmp	r3, #48	@ 0x30
 80023fa:	d86b      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 80023fc:	2b20      	cmp	r3, #32
 80023fe:	d060      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002400:	2b20      	cmp	r3, #32
 8002402:	d867      	bhi.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
 8002404:	2b00      	cmp	r3, #0
 8002406:	d05c      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x15a>
 8002408:	2b10      	cmp	r3, #16
 800240a:	d05a      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x15a>
 800240c:	e062      	b.n	80024d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800241e:	f000 fb3b 	bl	8002a98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002430:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	609a      	str	r2, [r3, #8]
      break;
 800243a:	e04f      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800244c:	f000 fb24 	bl	8002a98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800245e:	609a      	str	r2, [r3, #8]
      break;
 8002460:	e03c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800246e:	461a      	mov	r2, r3
 8002470:	f000 fa98 	bl	80029a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2150      	movs	r1, #80	@ 0x50
 800247a:	4618      	mov	r0, r3
 800247c:	f000 faf1 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 8002480:	e02c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800248e:	461a      	mov	r2, r3
 8002490:	f000 fab7 	bl	8002a02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2160      	movs	r1, #96	@ 0x60
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fae1 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 80024a0:	e01c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ae:	461a      	mov	r2, r3
 80024b0:	f000 fa78 	bl	80029a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2140      	movs	r1, #64	@ 0x40
 80024ba:	4618      	mov	r0, r3
 80024bc:	f000 fad1 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 80024c0:	e00c      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	4610      	mov	r0, r2
 80024ce:	f000 fac8 	bl	8002a62 <TIM_ITRx_SetConfig>
      break;
 80024d2:	e003      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
      break;
 80024d8:	e000      	b.n	80024dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a43      	ldr	r2, [pc, #268]	@ (8002618 <TIM_Base_SetConfig+0x120>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d013      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002516:	d00f      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a40      	ldr	r2, [pc, #256]	@ (800261c <TIM_Base_SetConfig+0x124>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00b      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a3f      	ldr	r2, [pc, #252]	@ (8002620 <TIM_Base_SetConfig+0x128>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d007      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a3e      	ldr	r2, [pc, #248]	@ (8002624 <TIM_Base_SetConfig+0x12c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d003      	beq.n	8002538 <TIM_Base_SetConfig+0x40>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a3d      	ldr	r2, [pc, #244]	@ (8002628 <TIM_Base_SetConfig+0x130>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d108      	bne.n	800254a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800253e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	4313      	orrs	r3, r2
 8002548:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a32      	ldr	r2, [pc, #200]	@ (8002618 <TIM_Base_SetConfig+0x120>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d02b      	beq.n	80025aa <TIM_Base_SetConfig+0xb2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002558:	d027      	beq.n	80025aa <TIM_Base_SetConfig+0xb2>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a2f      	ldr	r2, [pc, #188]	@ (800261c <TIM_Base_SetConfig+0x124>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d023      	beq.n	80025aa <TIM_Base_SetConfig+0xb2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a2e      	ldr	r2, [pc, #184]	@ (8002620 <TIM_Base_SetConfig+0x128>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d01f      	beq.n	80025aa <TIM_Base_SetConfig+0xb2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a2d      	ldr	r2, [pc, #180]	@ (8002624 <TIM_Base_SetConfig+0x12c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d01b      	beq.n	80025aa <TIM_Base_SetConfig+0xb2>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a2c      	ldr	r2, [pc, #176]	@ (8002628 <TIM_Base_SetConfig+0x130>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d017      	beq.n	80025aa <TIM_Base_SetConfig+0xb2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a2b      	ldr	r2, [pc, #172]	@ (800262c <TIM_Base_SetConfig+0x134>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d013      	beq.n	80025aa <TIM_Base_SetConfig+0xb2>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a2a      	ldr	r2, [pc, #168]	@ (8002630 <TIM_Base_SetConfig+0x138>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00f      	beq.n	80025aa <TIM_Base_SetConfig+0xb2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a29      	ldr	r2, [pc, #164]	@ (8002634 <TIM_Base_SetConfig+0x13c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00b      	beq.n	80025aa <TIM_Base_SetConfig+0xb2>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a28      	ldr	r2, [pc, #160]	@ (8002638 <TIM_Base_SetConfig+0x140>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d007      	beq.n	80025aa <TIM_Base_SetConfig+0xb2>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a27      	ldr	r2, [pc, #156]	@ (800263c <TIM_Base_SetConfig+0x144>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d003      	beq.n	80025aa <TIM_Base_SetConfig+0xb2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a26      	ldr	r2, [pc, #152]	@ (8002640 <TIM_Base_SetConfig+0x148>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d108      	bne.n	80025bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002618 <TIM_Base_SetConfig+0x120>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d003      	beq.n	80025ea <TIM_Base_SetConfig+0xf2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a10      	ldr	r2, [pc, #64]	@ (8002628 <TIM_Base_SetConfig+0x130>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d103      	bne.n	80025f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	691a      	ldr	r2, [r3, #16]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f043 0204 	orr.w	r2, r3, #4
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	601a      	str	r2, [r3, #0]
}
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	40010000 	.word	0x40010000
 800261c:	40000400 	.word	0x40000400
 8002620:	40000800 	.word	0x40000800
 8002624:	40000c00 	.word	0x40000c00
 8002628:	40010400 	.word	0x40010400
 800262c:	40014000 	.word	0x40014000
 8002630:	40014400 	.word	0x40014400
 8002634:	40014800 	.word	0x40014800
 8002638:	40001800 	.word	0x40001800
 800263c:	40001c00 	.word	0x40001c00
 8002640:	40002000 	.word	0x40002000

08002644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f023 0201 	bic.w	r2, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0303 	bic.w	r3, r3, #3
 800267a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f023 0302 	bic.w	r3, r3, #2
 800268c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a20      	ldr	r2, [pc, #128]	@ (800271c <TIM_OC1_SetConfig+0xd8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d003      	beq.n	80026a8 <TIM_OC1_SetConfig+0x64>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002720 <TIM_OC1_SetConfig+0xdc>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d10c      	bne.n	80026c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f023 0308 	bic.w	r3, r3, #8
 80026ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a15      	ldr	r2, [pc, #84]	@ (800271c <TIM_OC1_SetConfig+0xd8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d003      	beq.n	80026d2 <TIM_OC1_SetConfig+0x8e>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a14      	ldr	r2, [pc, #80]	@ (8002720 <TIM_OC1_SetConfig+0xdc>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d111      	bne.n	80026f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	621a      	str	r2, [r3, #32]
}
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40010000 	.word	0x40010000
 8002720:	40010400 	.word	0x40010400

08002724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	f023 0210 	bic.w	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800275a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f023 0320 	bic.w	r3, r3, #32
 800276e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4313      	orrs	r3, r2
 800277a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a22      	ldr	r2, [pc, #136]	@ (8002808 <TIM_OC2_SetConfig+0xe4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d003      	beq.n	800278c <TIM_OC2_SetConfig+0x68>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a21      	ldr	r2, [pc, #132]	@ (800280c <TIM_OC2_SetConfig+0xe8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d10d      	bne.n	80027a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a17      	ldr	r2, [pc, #92]	@ (8002808 <TIM_OC2_SetConfig+0xe4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_OC2_SetConfig+0x94>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a16      	ldr	r2, [pc, #88]	@ (800280c <TIM_OC2_SetConfig+0xe8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d113      	bne.n	80027e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	621a      	str	r2, [r3, #32]
}
 80027fa:	bf00      	nop
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40010000 	.word	0x40010000
 800280c:	40010400 	.word	0x40010400

08002810 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800283e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0303 	bic.w	r3, r3, #3
 8002846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	697a      	ldr	r2, [r7, #20]
 8002862:	4313      	orrs	r3, r2
 8002864:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a21      	ldr	r2, [pc, #132]	@ (80028f0 <TIM_OC3_SetConfig+0xe0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d003      	beq.n	8002876 <TIM_OC3_SetConfig+0x66>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a20      	ldr	r2, [pc, #128]	@ (80028f4 <TIM_OC3_SetConfig+0xe4>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10d      	bne.n	8002892 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800287c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	021b      	lsls	r3, r3, #8
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	4313      	orrs	r3, r2
 8002888:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002890:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a16      	ldr	r2, [pc, #88]	@ (80028f0 <TIM_OC3_SetConfig+0xe0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d003      	beq.n	80028a2 <TIM_OC3_SetConfig+0x92>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a15      	ldr	r2, [pc, #84]	@ (80028f4 <TIM_OC3_SetConfig+0xe4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d113      	bne.n	80028ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	697a      	ldr	r2, [r7, #20]
 80028e2:	621a      	str	r2, [r3, #32]
}
 80028e4:	bf00      	nop
 80028e6:	371c      	adds	r7, #28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	40010000 	.word	0x40010000
 80028f4:	40010400 	.word	0x40010400

080028f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800292e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002942:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	031b      	lsls	r3, r3, #12
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a12      	ldr	r2, [pc, #72]	@ (800299c <TIM_OC4_SetConfig+0xa4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d003      	beq.n	8002960 <TIM_OC4_SetConfig+0x68>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a11      	ldr	r2, [pc, #68]	@ (80029a0 <TIM_OC4_SetConfig+0xa8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d109      	bne.n	8002974 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002966:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	019b      	lsls	r3, r3, #6
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	621a      	str	r2, [r3, #32]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40010000 	.word	0x40010000
 80029a0:	40010400 	.word	0x40010400

080029a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b087      	sub	sp, #28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f023 0201 	bic.w	r2, r3, #1
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f023 030a 	bic.w	r3, r3, #10
 80029e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	621a      	str	r2, [r3, #32]
}
 80029f6:	bf00      	nop
 80029f8:	371c      	adds	r7, #28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b087      	sub	sp, #28
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
 8002a18:	f023 0210 	bic.w	r2, r3, #16
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	031b      	lsls	r3, r3, #12
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	697a      	ldr	r2, [r7, #20]
 8002a54:	621a      	str	r2, [r3, #32]
}
 8002a56:	bf00      	nop
 8002a58:	371c      	adds	r7, #28
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f043 0307 	orr.w	r3, r3, #7
 8002a84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	609a      	str	r2, [r3, #8]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	021a      	lsls	r2, r3, #8
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	431a      	orrs	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	609a      	str	r2, [r3, #8]
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	f003 031f 	and.w	r3, r3, #31
 8002aea:	2201      	movs	r2, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a1a      	ldr	r2, [r3, #32]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	401a      	ands	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a1a      	ldr	r2, [r3, #32]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	621a      	str	r2, [r3, #32]
}
 8002b16:	bf00      	nop
 8002b18:	371c      	adds	r7, #28
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e05a      	b.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a21      	ldr	r2, [pc, #132]	@ (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d022      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b88:	d01d      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d018      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1b      	ldr	r2, [pc, #108]	@ (8002c08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1a      	ldr	r2, [pc, #104]	@ (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a18      	ldr	r2, [pc, #96]	@ (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a17      	ldr	r2, [pc, #92]	@ (8002c14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a15      	ldr	r2, [pc, #84]	@ (8002c18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10c      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	40010000 	.word	0x40010000
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	40000c00 	.word	0x40000c00
 8002c10:	40010400 	.word	0x40010400
 8002c14:	40014000 	.word	0x40014000
 8002c18:	40001800 	.word	0x40001800

08002c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b082      	sub	sp, #8
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e042      	b.n	8002cb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7fd ff32 	bl	8000aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2224      	movs	r2, #36	@ 0x24
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f973 	bl	8002f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	@ 0x28
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d175      	bne.n	8002dc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d002      	beq.n	8002ce8 <HAL_UART_Transmit+0x2c>
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e06e      	b.n	8002dca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2221      	movs	r2, #33	@ 0x21
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cfa:	f7fd fff9 	bl	8000cf0 <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	88fa      	ldrh	r2, [r7, #6]
 8002d04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	88fa      	ldrh	r2, [r7, #6]
 8002d0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d14:	d108      	bne.n	8002d28 <HAL_UART_Transmit+0x6c>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d104      	bne.n	8002d28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	e003      	b.n	8002d30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d30:	e02e      	b.n	8002d90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2180      	movs	r1, #128	@ 0x80
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f848 	bl	8002dd2 <UART_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d005      	beq.n	8002d54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e03a      	b.n	8002dca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10b      	bne.n	8002d72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
 8002d70:	e007      	b.n	8002d82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1cb      	bne.n	8002d32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2200      	movs	r2, #0
 8002da2:	2140      	movs	r1, #64	@ 0x40
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f814 	bl	8002dd2 <UART_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e006      	b.n	8002dca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b086      	sub	sp, #24
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	4613      	mov	r3, r2
 8002de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de2:	e03b      	b.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dea:	d037      	beq.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dec:	f7fd ff80 	bl	8000cf0 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	6a3a      	ldr	r2, [r7, #32]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d302      	bcc.n	8002e02 <UART_WaitOnFlagUntilTimeout+0x30>
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e03a      	b.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d023      	beq.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2b80      	cmp	r3, #128	@ 0x80
 8002e18:	d020      	beq.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b40      	cmp	r3, #64	@ 0x40
 8002e1e:	d01d      	beq.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0308 	and.w	r3, r3, #8
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d116      	bne.n	8002e5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e2e:	2300      	movs	r3, #0
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f81d 	bl	8002e84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e00f      	b.n	8002e7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4013      	ands	r3, r2
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d0b4      	beq.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b095      	sub	sp, #84	@ 0x54
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	330c      	adds	r3, #12
 8002e92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e96:	e853 3f00 	ldrex	r3, [r3]
 8002e9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	330c      	adds	r3, #12
 8002eaa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002eac:	643a      	str	r2, [r7, #64]	@ 0x40
 8002eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002eb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002eb4:	e841 2300 	strex	r3, r2, [r1]
 8002eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d1e5      	bne.n	8002e8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3314      	adds	r3, #20
 8002ec6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	e853 3f00 	ldrex	r3, [r3]
 8002ece:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	f023 0301 	bic.w	r3, r3, #1
 8002ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3314      	adds	r3, #20
 8002ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ee8:	e841 2300 	strex	r3, r2, [r1]
 8002eec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e5      	bne.n	8002ec0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d119      	bne.n	8002f30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	330c      	adds	r3, #12
 8002f02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	e853 3f00 	ldrex	r3, [r3]
 8002f0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f023 0310 	bic.w	r3, r3, #16
 8002f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f1c:	61ba      	str	r2, [r7, #24]
 8002f1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f20:	6979      	ldr	r1, [r7, #20]
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	e841 2300 	strex	r3, r2, [r1]
 8002f28:	613b      	str	r3, [r7, #16]
   return(result);
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1e5      	bne.n	8002efc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2220      	movs	r2, #32
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f3e:	bf00      	nop
 8002f40:	3754      	adds	r7, #84	@ 0x54
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f50:	b0c0      	sub	sp, #256	@ 0x100
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f68:	68d9      	ldr	r1, [r3, #12]
 8002f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	ea40 0301 	orr.w	r3, r0, r1
 8002f74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002fa4:	f021 010c 	bic.w	r1, r1, #12
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc6:	6999      	ldr	r1, [r3, #24]
 8002fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	ea40 0301 	orr.w	r3, r0, r1
 8002fd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	4b8f      	ldr	r3, [pc, #572]	@ (8003218 <UART_SetConfig+0x2cc>)
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d005      	beq.n	8002fec <UART_SetConfig+0xa0>
 8002fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b8d      	ldr	r3, [pc, #564]	@ (800321c <UART_SetConfig+0x2d0>)
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d104      	bne.n	8002ff6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fec:	f7fe faa8 	bl	8001540 <HAL_RCC_GetPCLK2Freq>
 8002ff0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ff4:	e003      	b.n	8002ffe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ff6:	f7fe fa8f 	bl	8001518 <HAL_RCC_GetPCLK1Freq>
 8002ffa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003008:	f040 810c 	bne.w	8003224 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800300c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003010:	2200      	movs	r2, #0
 8003012:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003016:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800301a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800301e:	4622      	mov	r2, r4
 8003020:	462b      	mov	r3, r5
 8003022:	1891      	adds	r1, r2, r2
 8003024:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003026:	415b      	adcs	r3, r3
 8003028:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800302a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800302e:	4621      	mov	r1, r4
 8003030:	eb12 0801 	adds.w	r8, r2, r1
 8003034:	4629      	mov	r1, r5
 8003036:	eb43 0901 	adc.w	r9, r3, r1
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800304a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800304e:	4690      	mov	r8, r2
 8003050:	4699      	mov	r9, r3
 8003052:	4623      	mov	r3, r4
 8003054:	eb18 0303 	adds.w	r3, r8, r3
 8003058:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800305c:	462b      	mov	r3, r5
 800305e:	eb49 0303 	adc.w	r3, r9, r3
 8003062:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003072:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003076:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800307a:	460b      	mov	r3, r1
 800307c:	18db      	adds	r3, r3, r3
 800307e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003080:	4613      	mov	r3, r2
 8003082:	eb42 0303 	adc.w	r3, r2, r3
 8003086:	657b      	str	r3, [r7, #84]	@ 0x54
 8003088:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800308c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003090:	f7fd f8b8 	bl	8000204 <__aeabi_uldivmod>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4b61      	ldr	r3, [pc, #388]	@ (8003220 <UART_SetConfig+0x2d4>)
 800309a:	fba3 2302 	umull	r2, r3, r3, r2
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	011c      	lsls	r4, r3, #4
 80030a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030a6:	2200      	movs	r2, #0
 80030a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80030b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80030b4:	4642      	mov	r2, r8
 80030b6:	464b      	mov	r3, r9
 80030b8:	1891      	adds	r1, r2, r2
 80030ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80030bc:	415b      	adcs	r3, r3
 80030be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030c4:	4641      	mov	r1, r8
 80030c6:	eb12 0a01 	adds.w	sl, r2, r1
 80030ca:	4649      	mov	r1, r9
 80030cc:	eb43 0b01 	adc.w	fp, r3, r1
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030e4:	4692      	mov	sl, r2
 80030e6:	469b      	mov	fp, r3
 80030e8:	4643      	mov	r3, r8
 80030ea:	eb1a 0303 	adds.w	r3, sl, r3
 80030ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030f2:	464b      	mov	r3, r9
 80030f4:	eb4b 0303 	adc.w	r3, fp, r3
 80030f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003108:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800310c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003110:	460b      	mov	r3, r1
 8003112:	18db      	adds	r3, r3, r3
 8003114:	643b      	str	r3, [r7, #64]	@ 0x40
 8003116:	4613      	mov	r3, r2
 8003118:	eb42 0303 	adc.w	r3, r2, r3
 800311c:	647b      	str	r3, [r7, #68]	@ 0x44
 800311e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003122:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003126:	f7fd f86d 	bl	8000204 <__aeabi_uldivmod>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	4611      	mov	r1, r2
 8003130:	4b3b      	ldr	r3, [pc, #236]	@ (8003220 <UART_SetConfig+0x2d4>)
 8003132:	fba3 2301 	umull	r2, r3, r3, r1
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	2264      	movs	r2, #100	@ 0x64
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	1acb      	subs	r3, r1, r3
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003146:	4b36      	ldr	r3, [pc, #216]	@ (8003220 <UART_SetConfig+0x2d4>)
 8003148:	fba3 2302 	umull	r2, r3, r3, r2
 800314c:	095b      	lsrs	r3, r3, #5
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003154:	441c      	add	r4, r3
 8003156:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800315a:	2200      	movs	r2, #0
 800315c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003160:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003164:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003168:	4642      	mov	r2, r8
 800316a:	464b      	mov	r3, r9
 800316c:	1891      	adds	r1, r2, r2
 800316e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003170:	415b      	adcs	r3, r3
 8003172:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003174:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003178:	4641      	mov	r1, r8
 800317a:	1851      	adds	r1, r2, r1
 800317c:	6339      	str	r1, [r7, #48]	@ 0x30
 800317e:	4649      	mov	r1, r9
 8003180:	414b      	adcs	r3, r1
 8003182:	637b      	str	r3, [r7, #52]	@ 0x34
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003190:	4659      	mov	r1, fp
 8003192:	00cb      	lsls	r3, r1, #3
 8003194:	4651      	mov	r1, sl
 8003196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800319a:	4651      	mov	r1, sl
 800319c:	00ca      	lsls	r2, r1, #3
 800319e:	4610      	mov	r0, r2
 80031a0:	4619      	mov	r1, r3
 80031a2:	4603      	mov	r3, r0
 80031a4:	4642      	mov	r2, r8
 80031a6:	189b      	adds	r3, r3, r2
 80031a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031ac:	464b      	mov	r3, r9
 80031ae:	460a      	mov	r2, r1
 80031b0:	eb42 0303 	adc.w	r3, r2, r3
 80031b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80031b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80031c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80031c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80031cc:	460b      	mov	r3, r1
 80031ce:	18db      	adds	r3, r3, r3
 80031d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031d2:	4613      	mov	r3, r2
 80031d4:	eb42 0303 	adc.w	r3, r2, r3
 80031d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80031da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80031de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80031e2:	f7fd f80f 	bl	8000204 <__aeabi_uldivmod>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003220 <UART_SetConfig+0x2d4>)
 80031ec:	fba3 1302 	umull	r1, r3, r3, r2
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	2164      	movs	r1, #100	@ 0x64
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	3332      	adds	r3, #50	@ 0x32
 80031fe:	4a08      	ldr	r2, [pc, #32]	@ (8003220 <UART_SetConfig+0x2d4>)
 8003200:	fba2 2303 	umull	r2, r3, r2, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	f003 0207 	and.w	r2, r3, #7
 800320a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4422      	add	r2, r4
 8003212:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003214:	e106      	b.n	8003424 <UART_SetConfig+0x4d8>
 8003216:	bf00      	nop
 8003218:	40011000 	.word	0x40011000
 800321c:	40011400 	.word	0x40011400
 8003220:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003224:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003228:	2200      	movs	r2, #0
 800322a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800322e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003232:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003236:	4642      	mov	r2, r8
 8003238:	464b      	mov	r3, r9
 800323a:	1891      	adds	r1, r2, r2
 800323c:	6239      	str	r1, [r7, #32]
 800323e:	415b      	adcs	r3, r3
 8003240:	627b      	str	r3, [r7, #36]	@ 0x24
 8003242:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003246:	4641      	mov	r1, r8
 8003248:	1854      	adds	r4, r2, r1
 800324a:	4649      	mov	r1, r9
 800324c:	eb43 0501 	adc.w	r5, r3, r1
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	00eb      	lsls	r3, r5, #3
 800325a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800325e:	00e2      	lsls	r2, r4, #3
 8003260:	4614      	mov	r4, r2
 8003262:	461d      	mov	r5, r3
 8003264:	4643      	mov	r3, r8
 8003266:	18e3      	adds	r3, r4, r3
 8003268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800326c:	464b      	mov	r3, r9
 800326e:	eb45 0303 	adc.w	r3, r5, r3
 8003272:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003282:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003292:	4629      	mov	r1, r5
 8003294:	008b      	lsls	r3, r1, #2
 8003296:	4621      	mov	r1, r4
 8003298:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800329c:	4621      	mov	r1, r4
 800329e:	008a      	lsls	r2, r1, #2
 80032a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032a4:	f7fc ffae 	bl	8000204 <__aeabi_uldivmod>
 80032a8:	4602      	mov	r2, r0
 80032aa:	460b      	mov	r3, r1
 80032ac:	4b60      	ldr	r3, [pc, #384]	@ (8003430 <UART_SetConfig+0x4e4>)
 80032ae:	fba3 2302 	umull	r2, r3, r3, r2
 80032b2:	095b      	lsrs	r3, r3, #5
 80032b4:	011c      	lsls	r4, r3, #4
 80032b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ba:	2200      	movs	r2, #0
 80032bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80032c8:	4642      	mov	r2, r8
 80032ca:	464b      	mov	r3, r9
 80032cc:	1891      	adds	r1, r2, r2
 80032ce:	61b9      	str	r1, [r7, #24]
 80032d0:	415b      	adcs	r3, r3
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d8:	4641      	mov	r1, r8
 80032da:	1851      	adds	r1, r2, r1
 80032dc:	6139      	str	r1, [r7, #16]
 80032de:	4649      	mov	r1, r9
 80032e0:	414b      	adcs	r3, r1
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032f0:	4659      	mov	r1, fp
 80032f2:	00cb      	lsls	r3, r1, #3
 80032f4:	4651      	mov	r1, sl
 80032f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032fa:	4651      	mov	r1, sl
 80032fc:	00ca      	lsls	r2, r1, #3
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	4603      	mov	r3, r0
 8003304:	4642      	mov	r2, r8
 8003306:	189b      	adds	r3, r3, r2
 8003308:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800330c:	464b      	mov	r3, r9
 800330e:	460a      	mov	r2, r1
 8003310:	eb42 0303 	adc.w	r3, r2, r3
 8003314:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003322:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003330:	4649      	mov	r1, r9
 8003332:	008b      	lsls	r3, r1, #2
 8003334:	4641      	mov	r1, r8
 8003336:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800333a:	4641      	mov	r1, r8
 800333c:	008a      	lsls	r2, r1, #2
 800333e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003342:	f7fc ff5f 	bl	8000204 <__aeabi_uldivmod>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	4611      	mov	r1, r2
 800334c:	4b38      	ldr	r3, [pc, #224]	@ (8003430 <UART_SetConfig+0x4e4>)
 800334e:	fba3 2301 	umull	r2, r3, r3, r1
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	2264      	movs	r2, #100	@ 0x64
 8003356:	fb02 f303 	mul.w	r3, r2, r3
 800335a:	1acb      	subs	r3, r1, r3
 800335c:	011b      	lsls	r3, r3, #4
 800335e:	3332      	adds	r3, #50	@ 0x32
 8003360:	4a33      	ldr	r2, [pc, #204]	@ (8003430 <UART_SetConfig+0x4e4>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	095b      	lsrs	r3, r3, #5
 8003368:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800336c:	441c      	add	r4, r3
 800336e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003372:	2200      	movs	r2, #0
 8003374:	673b      	str	r3, [r7, #112]	@ 0x70
 8003376:	677a      	str	r2, [r7, #116]	@ 0x74
 8003378:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800337c:	4642      	mov	r2, r8
 800337e:	464b      	mov	r3, r9
 8003380:	1891      	adds	r1, r2, r2
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	415b      	adcs	r3, r3
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800338c:	4641      	mov	r1, r8
 800338e:	1851      	adds	r1, r2, r1
 8003390:	6039      	str	r1, [r7, #0]
 8003392:	4649      	mov	r1, r9
 8003394:	414b      	adcs	r3, r1
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033a4:	4659      	mov	r1, fp
 80033a6:	00cb      	lsls	r3, r1, #3
 80033a8:	4651      	mov	r1, sl
 80033aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033ae:	4651      	mov	r1, sl
 80033b0:	00ca      	lsls	r2, r1, #3
 80033b2:	4610      	mov	r0, r2
 80033b4:	4619      	mov	r1, r3
 80033b6:	4603      	mov	r3, r0
 80033b8:	4642      	mov	r2, r8
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033be:	464b      	mov	r3, r9
 80033c0:	460a      	mov	r2, r1
 80033c2:	eb42 0303 	adc.w	r3, r2, r3
 80033c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80033d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80033e0:	4649      	mov	r1, r9
 80033e2:	008b      	lsls	r3, r1, #2
 80033e4:	4641      	mov	r1, r8
 80033e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033ea:	4641      	mov	r1, r8
 80033ec:	008a      	lsls	r2, r1, #2
 80033ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80033f2:	f7fc ff07 	bl	8000204 <__aeabi_uldivmod>
 80033f6:	4602      	mov	r2, r0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003430 <UART_SetConfig+0x4e4>)
 80033fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003400:	095b      	lsrs	r3, r3, #5
 8003402:	2164      	movs	r1, #100	@ 0x64
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	3332      	adds	r3, #50	@ 0x32
 800340e:	4a08      	ldr	r2, [pc, #32]	@ (8003430 <UART_SetConfig+0x4e4>)
 8003410:	fba2 2303 	umull	r2, r3, r2, r3
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	f003 020f 	and.w	r2, r3, #15
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4422      	add	r2, r4
 8003422:	609a      	str	r2, [r3, #8]
}
 8003424:	bf00      	nop
 8003426:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800342a:	46bd      	mov	sp, r7
 800342c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003430:	51eb851f 	.word	0x51eb851f

08003434 <memset>:
 8003434:	4402      	add	r2, r0
 8003436:	4603      	mov	r3, r0
 8003438:	4293      	cmp	r3, r2
 800343a:	d100      	bne.n	800343e <memset+0xa>
 800343c:	4770      	bx	lr
 800343e:	f803 1b01 	strb.w	r1, [r3], #1
 8003442:	e7f9      	b.n	8003438 <memset+0x4>

08003444 <__libc_init_array>:
 8003444:	b570      	push	{r4, r5, r6, lr}
 8003446:	4d0d      	ldr	r5, [pc, #52]	@ (800347c <__libc_init_array+0x38>)
 8003448:	4c0d      	ldr	r4, [pc, #52]	@ (8003480 <__libc_init_array+0x3c>)
 800344a:	1b64      	subs	r4, r4, r5
 800344c:	10a4      	asrs	r4, r4, #2
 800344e:	2600      	movs	r6, #0
 8003450:	42a6      	cmp	r6, r4
 8003452:	d109      	bne.n	8003468 <__libc_init_array+0x24>
 8003454:	4d0b      	ldr	r5, [pc, #44]	@ (8003484 <__libc_init_array+0x40>)
 8003456:	4c0c      	ldr	r4, [pc, #48]	@ (8003488 <__libc_init_array+0x44>)
 8003458:	f000 f818 	bl	800348c <_init>
 800345c:	1b64      	subs	r4, r4, r5
 800345e:	10a4      	asrs	r4, r4, #2
 8003460:	2600      	movs	r6, #0
 8003462:	42a6      	cmp	r6, r4
 8003464:	d105      	bne.n	8003472 <__libc_init_array+0x2e>
 8003466:	bd70      	pop	{r4, r5, r6, pc}
 8003468:	f855 3b04 	ldr.w	r3, [r5], #4
 800346c:	4798      	blx	r3
 800346e:	3601      	adds	r6, #1
 8003470:	e7ee      	b.n	8003450 <__libc_init_array+0xc>
 8003472:	f855 3b04 	ldr.w	r3, [r5], #4
 8003476:	4798      	blx	r3
 8003478:	3601      	adds	r6, #1
 800347a:	e7f2      	b.n	8003462 <__libc_init_array+0x1e>
 800347c:	080034dc 	.word	0x080034dc
 8003480:	080034dc 	.word	0x080034dc
 8003484:	080034dc 	.word	0x080034dc
 8003488:	080034e0 	.word	0x080034e0

0800348c <_init>:
 800348c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348e:	bf00      	nop
 8003490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003492:	bc08      	pop	{r3}
 8003494:	469e      	mov	lr, r3
 8003496:	4770      	bx	lr

08003498 <_fini>:
 8003498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800349a:	bf00      	nop
 800349c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349e:	bc08      	pop	{r3}
 80034a0:	469e      	mov	lr, r3
 80034a2:	4770      	bx	lr
