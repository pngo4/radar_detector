
radar_detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005998  08005998  00006998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a0c  08005a0c  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005a0c  08005a0c  00006a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a14  08005a14  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a14  08005a14  00006a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a18  08005a18  00006a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005a1c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  20000060  08005a7c  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08005a7c  00007334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ab9  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254c  00000000  00000000  00017b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  0001a098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd7  00000000  00000000  0001afb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022d0f  00000000  00000000  0001bb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012400  00000000  00000000  0003e89e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3b15  00000000  00000000  00050c9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001247b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044cc  00000000  00000000  001247f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00128cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005980 	.word	0x08005980

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005980 	.word	0x08005980

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <get_median>:
uint32_t store_millis;
uint32_t value1 = 0; //first measured value
uint32_t value2 = 0; //second measured value
uint16_t distance = 0; //in cm

static uint32_t get_median(uint32_t* values, uint8_t size) {
 80005ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005f0:	b089      	sub	sp, #36	@ 0x24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	460b      	mov	r3, r1
 80005f8:	70fb      	strb	r3, [r7, #3]
 80005fa:	466b      	mov	r3, sp
 80005fc:	461e      	mov	r6, r3
	uint32_t sorted[size];
 80005fe:	78f9      	ldrb	r1, [r7, #3]
 8000600:	460b      	mov	r3, r1
 8000602:	3b01      	subs	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	b2cb      	uxtb	r3, r1
 8000608:	2200      	movs	r2, #0
 800060a:	4698      	mov	r8, r3
 800060c:	4691      	mov	r9, r2
 800060e:	f04f 0200 	mov.w	r2, #0
 8000612:	f04f 0300 	mov.w	r3, #0
 8000616:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800061a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800061e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000622:	b2cb      	uxtb	r3, r1
 8000624:	2200      	movs	r2, #0
 8000626:	461c      	mov	r4, r3
 8000628:	4615      	mov	r5, r2
 800062a:	f04f 0200 	mov.w	r2, #0
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	016b      	lsls	r3, r5, #5
 8000634:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000638:	0162      	lsls	r2, r4, #5
 800063a:	460b      	mov	r3, r1
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3307      	adds	r3, #7
 8000640:	08db      	lsrs	r3, r3, #3
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	ebad 0d03 	sub.w	sp, sp, r3
 8000648:	466b      	mov	r3, sp
 800064a:	3303      	adds	r3, #3
 800064c:	089b      	lsrs	r3, r3, #2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	613b      	str	r3, [r7, #16]
	memcpy(sorted, values, size * sizeof(uint32_t));
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	461a      	mov	r2, r3
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	6938      	ldr	r0, [r7, #16]
 800065c:	f004 fd46 	bl	80050ec <memcpy>

	//bubble sort

	for(int i = 0; i < size - 1; i++) {
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
 8000664:	e029      	b.n	80006ba <get_median+0xce>
		for (int j = i + 1; j < size; j++) {
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	3301      	adds	r3, #1
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	e01e      	b.n	80006ac <get_median+0xc0>
			if(sorted[i] > sorted[j]) {
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	69fa      	ldr	r2, [r7, #28]
 8000672:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	69b9      	ldr	r1, [r7, #24]
 800067a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800067e:	429a      	cmp	r2, r3
 8000680:	d911      	bls.n	80006a6 <get_median+0xba>
				uint32_t tmp = sorted[i];
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	69fa      	ldr	r2, [r7, #28]
 8000686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800068a:	60fb      	str	r3, [r7, #12]
				sorted[i] = sorted[j];
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	69ba      	ldr	r2, [r7, #24]
 8000690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	69fa      	ldr	r2, [r7, #28]
 8000698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				sorted[j] = tmp;
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	69ba      	ldr	r2, [r7, #24]
 80006a0:	68f9      	ldr	r1, [r7, #12]
 80006a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = i + 1; j < size; j++) {
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	3301      	adds	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	69ba      	ldr	r2, [r7, #24]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbdc      	blt.n	800066e <get_median+0x82>
	for(int i = 0; i < size - 1; i++) {
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	3301      	adds	r3, #1
 80006b8:	61fb      	str	r3, [r7, #28]
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	3b01      	subs	r3, #1
 80006be:	69fa      	ldr	r2, [r7, #28]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbd0      	blt.n	8000666 <get_median+0x7a>
			}
		}
	}
	return sorted[size/2]; // median
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	085b      	lsrs	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006d2:	46b5      	mov	sp, r6
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3724      	adds	r7, #36	@ 0x24
 80006d8:	46bd      	mov	sp, r7
 80006da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080006e0 <median_filter>:

uint32_t median_filter(uint32_t new_value) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

	//reject bad data, spec for HCSR04 is around 20 cm to 400 cm
	if(new_value < 5 || new_value > 400) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d903      	bls.n	80006f6 <median_filter+0x16>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80006f4:	d90d      	bls.n	8000712 <median_filter+0x32>
		return get_median(dist_buffer, buffer_filled ? MEDIAN_FILTER_SIZE : dist_index);
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <median_filter+0x80>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <median_filter+0x24>
 80006fe:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <median_filter+0x84>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	e000      	b.n	8000706 <median_filter+0x26>
 8000704:	2307      	movs	r3, #7
 8000706:	4619      	mov	r1, r3
 8000708:	4817      	ldr	r0, [pc, #92]	@ (8000768 <median_filter+0x88>)
 800070a:	f7ff ff6f 	bl	80005ec <get_median>
 800070e:	4603      	mov	r3, r0
 8000710:	e021      	b.n	8000756 <median_filter+0x76>
	}

	dist_buffer[dist_index++] = new_value;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <median_filter+0x84>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	b2d1      	uxtb	r1, r2
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <median_filter+0x84>)
 800071c:	7011      	strb	r1, [r2, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <median_filter+0x88>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(dist_index >= MEDIAN_FILTER_SIZE) {
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <median_filter+0x84>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b06      	cmp	r3, #6
 800072e:	d905      	bls.n	800073c <median_filter+0x5c>
		dist_index = 0;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <median_filter+0x84>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
		buffer_filled = 1;
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <median_filter+0x80>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
	}

	return get_median(dist_buffer, buffer_filled ? MEDIAN_FILTER_SIZE : dist_index);
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <median_filter+0x80>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <median_filter+0x6a>
 8000744:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <median_filter+0x84>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	e000      	b.n	800074c <median_filter+0x6c>
 800074a:	2307      	movs	r3, #7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <median_filter+0x88>)
 8000750:	f7ff ff4c 	bl	80005ec <get_median>
 8000754:	4603      	mov	r3, r0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000099 	.word	0x20000099
 8000764:	20000098 	.word	0x20000098
 8000768:	2000007c 	.word	0x2000007c

0800076c <HCR04_init>:

void HCR04_init(TIM_HandleTypeDef *tim) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(tim);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f002 fe5b 	bl	8003430 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000780:	4803      	ldr	r0, [pc, #12]	@ (8000790 <HCR04_init+0x24>)
 8000782:	f001 fd27 	bl	80021d4 <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020000 	.word	0x40020000

08000794 <HCSR04_read>:


uint16_t HCSR04_read(TIM_HandleTypeDef *tim) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

	//set for 10 uS
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a2:	4831      	ldr	r0, [pc, #196]	@ (8000868 <HCSR04_read+0xd4>)
 80007a4:	f001 fd16 	bl	80021d4 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(tim, 0);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(tim) < 10); //wait for 10 uS
 80007b0:	bf00      	nop
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b8:	2b09      	cmp	r3, #9
 80007ba:	d9fa      	bls.n	80007b2 <HCSR04_read+0x1e>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); //set back to low
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007c2:	4829      	ldr	r0, [pc, #164]	@ (8000868 <HCSR04_read+0xd4>)
 80007c4:	f001 fd06 	bl	80021d4 <HAL_GPIO_WritePin>

	//now reading starts
	store_millis = HAL_GetTick(); //use tick to avoid infinite while loop, stores current time
 80007c8:	f001 fa16 	bl	8001bf8 <HAL_GetTick>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a27      	ldr	r2, [pc, #156]	@ (800086c <HCSR04_read+0xd8>)
 80007d0:	6013      	str	r3, [r2, #0]
	//wait for echo pin to go HIGH
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET) {
 80007d2:	e009      	b.n	80007e8 <HCSR04_read+0x54>
		if((HAL_GetTick() - store_millis) > 100) return 0; //timeout
 80007d4:	f001 fa10 	bl	8001bf8 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	4b24      	ldr	r3, [pc, #144]	@ (800086c <HCSR04_read+0xd8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	2b64      	cmp	r3, #100	@ 0x64
 80007e2:	d901      	bls.n	80007e8 <HCSR04_read+0x54>
 80007e4:	2300      	movs	r3, #0
 80007e6:	e03a      	b.n	800085e <HCSR04_read+0xca>
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET) {
 80007e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007ec:	481e      	ldr	r0, [pc, #120]	@ (8000868 <HCSR04_read+0xd4>)
 80007ee:	f001 fcd9 	bl	80021a4 <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0ed      	beq.n	80007d4 <HCSR04_read+0x40>
	}

	value1 = __HAL_TIM_GET_COUNTER(tim);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <HCSR04_read+0xdc>)
 8000800:	6013      	str	r3, [r2, #0]

	store_millis = HAL_GetTick();//stores current time
 8000802:	f001 f9f9 	bl	8001bf8 <HAL_GetTick>
 8000806:	4603      	mov	r3, r0
 8000808:	4a18      	ldr	r2, [pc, #96]	@ (800086c <HCSR04_read+0xd8>)
 800080a:	6013      	str	r3, [r2, #0]
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) {
 800080c:	e009      	b.n	8000822 <HCSR04_read+0x8e>
		if((HAL_GetTick() - store_millis) > 80) return 0; // timeout
 800080e:	f001 f9f3 	bl	8001bf8 <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <HCSR04_read+0xd8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	2b50      	cmp	r3, #80	@ 0x50
 800081c:	d901      	bls.n	8000822 <HCSR04_read+0x8e>
 800081e:	2300      	movs	r3, #0
 8000820:	e01d      	b.n	800085e <HCSR04_read+0xca>
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) {
 8000822:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000826:	4810      	ldr	r0, [pc, #64]	@ (8000868 <HCSR04_read+0xd4>)
 8000828:	f001 fcbc 	bl	80021a4 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d0ed      	beq.n	800080e <HCSR04_read+0x7a>
	}
	value2 = __HAL_TIM_GET_COUNTER(tim);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000838:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <HCSR04_read+0xe0>)
 800083a:	6013      	str	r3, [r2, #0]

	// distance = (value2 - value1) / 58;
	distance = (value2 - value1) / 58;
 800083c:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <HCSR04_read+0xe0>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HCSR04_read+0xdc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	4a0c      	ldr	r2, [pc, #48]	@ (8000878 <HCSR04_read+0xe4>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	095b      	lsrs	r3, r3, #5
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <HCSR04_read+0xe8>)
 8000852:	801a      	strh	r2, [r3, #0]

	HAL_Delay(50);
 8000854:	2032      	movs	r0, #50	@ 0x32
 8000856:	f001 f9db 	bl	8001c10 <HAL_Delay>

	return distance;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <HCSR04_read+0xe8>)
 800085c:	881b      	ldrh	r3, [r3, #0]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020000 	.word	0x40020000
 800086c:	2000009c 	.word	0x2000009c
 8000870:	200000a0 	.word	0x200000a0
 8000874:	200000a4 	.word	0x200000a4
 8000878:	8d3dcb09 	.word	0x8d3dcb09
 800087c:	200000a8 	.word	0x200000a8

08000880 <ILI9341_SPI_Init>:

static SPI_HandleTypeDef *ili9341_spi;

/* Initialize SPI */
void ILI9341_SPI_Init(SPI_HandleTypeDef *spi_handle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

	ili9341_spi = spi_handle;
 8000888:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <ILI9341_SPI_Init+0x20>)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800088e:	2200      	movs	r2, #0
 8000890:	2110      	movs	r1, #16
 8000892:	4804      	ldr	r0, [pc, #16]	@ (80008a4 <ILI9341_SPI_Init+0x24>)
 8000894:	f001 fc9e 	bl	80021d4 <HAL_GPIO_WritePin>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	200000ac 	.word	0x200000ac
 80008a4:	40020000 	.word	0x40020000

080008a8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(ili9341_spi, &SPI_Data, 1, 1);
 80008b2:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <ILI9341_SPI_Send+0x20>)
 80008b4:	6818      	ldr	r0, [r3, #0]
 80008b6:	1df9      	adds	r1, r7, #7
 80008b8:	2301      	movs	r3, #1
 80008ba:	2201      	movs	r2, #1
 80008bc:	f002 fb47 	bl	8002f4e <HAL_SPI_Transmit>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000ac 	.word	0x200000ac

080008cc <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2110      	movs	r1, #16
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <ILI9341_Write_Command+0x3c>)
 80008dc:	f001 fc7a 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e6:	4809      	ldr	r0, [pc, #36]	@ (800090c <ILI9341_Write_Command+0x40>)
 80008e8:	f001 fc74 	bl	80021d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f7ff ffda 	bl	80008a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80008f4:	2201      	movs	r2, #1
 80008f6:	2110      	movs	r1, #16
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <ILI9341_Write_Command+0x3c>)
 80008fa:	f001 fc6b 	bl	80021d4 <HAL_GPIO_WritePin>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40020000 	.word	0x40020000
 800090c:	40020800 	.word	0x40020800

08000910 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800091a:	2201      	movs	r2, #1
 800091c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000920:	480a      	ldr	r0, [pc, #40]	@ (800094c <ILI9341_Write_Data+0x3c>)
 8000922:	f001 fc57 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000926:	2200      	movs	r2, #0
 8000928:	2110      	movs	r1, #16
 800092a:	4809      	ldr	r0, [pc, #36]	@ (8000950 <ILI9341_Write_Data+0x40>)
 800092c:	f001 fc52 	bl	80021d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff ffb8 	bl	80008a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2110      	movs	r1, #16
 800093c:	4804      	ldr	r0, [pc, #16]	@ (8000950 <ILI9341_Write_Data+0x40>)
 800093e:	f001 fc49 	bl	80021d4 <HAL_GPIO_WritePin>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40020800 	.word	0x40020800
 8000950:	40020000 	.word	0x40020000

08000954 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4604      	mov	r4, r0
 800095c:	4608      	mov	r0, r1
 800095e:	4611      	mov	r1, r2
 8000960:	461a      	mov	r2, r3
 8000962:	4623      	mov	r3, r4
 8000964:	80fb      	strh	r3, [r7, #6]
 8000966:	4603      	mov	r3, r0
 8000968:	80bb      	strh	r3, [r7, #4]
 800096a:	460b      	mov	r3, r1
 800096c:	807b      	strh	r3, [r7, #2]
 800096e:	4613      	mov	r3, r2
 8000970:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000972:	202a      	movs	r0, #42	@ 0x2a
 8000974:	f7ff ffaa 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	b29b      	uxth	r3, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ffc5 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000986:	88fb      	ldrh	r3, [r7, #6]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff ffc0 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000990:	887b      	ldrh	r3, [r7, #2]
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	b29b      	uxth	r3, r3
 8000996:	b2db      	uxtb	r3, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff ffb9 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800099e:	887b      	ldrh	r3, [r7, #2]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff ffb4 	bl	8000910 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80009a8:	202b      	movs	r0, #43	@ 0x2b
 80009aa:	f7ff ff8f 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80009ae:	88bb      	ldrh	r3, [r7, #4]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ffaa 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80009bc:	88bb      	ldrh	r3, [r7, #4]
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ffa5 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80009c6:	883b      	ldrh	r3, [r7, #0]
 80009c8:	0a1b      	lsrs	r3, r3, #8
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff9e 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80009d4:	883b      	ldrh	r3, [r7, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff99 	bl	8000910 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80009de:	202c      	movs	r0, #44	@ 0x2c
 80009e0:	f7ff ff74 	bl	80008cc <ILI9341_Write_Command>
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd90      	pop	{r4, r7, pc}

080009ec <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2180      	movs	r1, #128	@ 0x80
 80009f4:	480a      	ldr	r0, [pc, #40]	@ (8000a20 <ILI9341_Reset+0x34>)
 80009f6:	f001 fbed 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80009fa:	20c8      	movs	r0, #200	@ 0xc8
 80009fc:	f001 f908 	bl	8001c10 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2110      	movs	r1, #16
 8000a04:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <ILI9341_Reset+0x38>)
 8000a06:	f001 fbe5 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000a0a:	20c8      	movs	r0, #200	@ 0xc8
 8000a0c:	f001 f900 	bl	8001c10 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000a10:	2201      	movs	r2, #1
 8000a12:	2180      	movs	r1, #128	@ 0x80
 8000a14:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <ILI9341_Reset+0x34>)
 8000a16:	f001 fbdd 	bl	80021d4 <HAL_GPIO_WritePin>
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40020800 	.word	0x40020800
 8000a24:	40020000 	.word	0x40020000

08000a28 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000a36:	2036      	movs	r0, #54	@ 0x36
 8000a38:	f7ff ff48 	bl	80008cc <ILI9341_Write_Command>
HAL_Delay(1);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f001 f8e7 	bl	8001c10 <HAL_Delay>
	
switch(screen_rotation) 
 8000a42:	7bfb      	ldrb	r3, [r7, #15]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d837      	bhi.n	8000ab8 <ILI9341_Set_Rotation+0x90>
 8000a48:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <ILI9341_Set_Rotation+0x28>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000a61 	.word	0x08000a61
 8000a54:	08000a77 	.word	0x08000a77
 8000a58:	08000a8d 	.word	0x08000a8d
 8000a5c:	08000aa3 	.word	0x08000aa3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000a60:	2048      	movs	r0, #72	@ 0x48
 8000a62:	f7ff ff55 	bl	8000910 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000a66:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <ILI9341_Set_Rotation+0x9c>)
 8000a68:	22f0      	movs	r2, #240	@ 0xf0
 8000a6a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <ILI9341_Set_Rotation+0xa0>)
 8000a6e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a72:	801a      	strh	r2, [r3, #0]
			break;
 8000a74:	e021      	b.n	8000aba <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000a76:	2028      	movs	r0, #40	@ 0x28
 8000a78:	f7ff ff4a 	bl	8000910 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <ILI9341_Set_Rotation+0x9c>)
 8000a7e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a82:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000a84:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <ILI9341_Set_Rotation+0xa0>)
 8000a86:	22f0      	movs	r2, #240	@ 0xf0
 8000a88:	801a      	strh	r2, [r3, #0]
			break;
 8000a8a:	e016      	b.n	8000aba <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000a8c:	2088      	movs	r0, #136	@ 0x88
 8000a8e:	f7ff ff3f 	bl	8000910 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <ILI9341_Set_Rotation+0x9c>)
 8000a94:	22f0      	movs	r2, #240	@ 0xf0
 8000a96:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000a98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <ILI9341_Set_Rotation+0xa0>)
 8000a9a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000a9e:	801a      	strh	r2, [r3, #0]
			break;
 8000aa0:	e00b      	b.n	8000aba <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000aa2:	20e8      	movs	r0, #232	@ 0xe8
 8000aa4:	f7ff ff34 	bl	8000910 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <ILI9341_Set_Rotation+0x9c>)
 8000aaa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000aae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <ILI9341_Set_Rotation+0xa0>)
 8000ab2:	22f0      	movs	r2, #240	@ 0xf0
 8000ab4:	801a      	strh	r2, [r3, #0]
			break;
 8000ab6:	e000      	b.n	8000aba <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000ab8:	bf00      	nop
	}
}
 8000aba:	bf00      	nop
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000002 	.word	0x20000002
 8000ac8:	20000000 	.word	0x20000000

08000acc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2180      	movs	r1, #128	@ 0x80
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <ILI9341_Enable+0x14>)
 8000ad6:	f001 fb7d 	bl	80021d4 <HAL_GPIO_WritePin>
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40020800 	.word	0x40020800

08000ae4 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(SPI_HandleTypeDef *spi_handle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

ILI9341_Enable();
 8000aec:	f7ff ffee 	bl	8000acc <ILI9341_Enable>
ILI9341_SPI_Init(spi_handle);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fec5 	bl	8000880 <ILI9341_SPI_Init>
ILI9341_Reset();
 8000af6:	f7ff ff79 	bl	80009ec <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000afa:	2001      	movs	r0, #1
 8000afc:	f7ff fee6 	bl	80008cc <ILI9341_Write_Command>
HAL_Delay(1000);
 8000b00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b04:	f001 f884 	bl	8001c10 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000b08:	20cb      	movs	r0, #203	@ 0xcb
 8000b0a:	f7ff fedf 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000b0e:	2039      	movs	r0, #57	@ 0x39
 8000b10:	f7ff fefe 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000b14:	202c      	movs	r0, #44	@ 0x2c
 8000b16:	f7ff fefb 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fef8 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000b20:	2034      	movs	r0, #52	@ 0x34
 8000b22:	f7ff fef5 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000b26:	2002      	movs	r0, #2
 8000b28:	f7ff fef2 	bl	8000910 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000b2c:	20cf      	movs	r0, #207	@ 0xcf
 8000b2e:	f7ff fecd 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff feec 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000b38:	20c1      	movs	r0, #193	@ 0xc1
 8000b3a:	f7ff fee9 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000b3e:	2030      	movs	r0, #48	@ 0x30
 8000b40:	f7ff fee6 	bl	8000910 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000b44:	20e8      	movs	r0, #232	@ 0xe8
 8000b46:	f7ff fec1 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000b4a:	2085      	movs	r0, #133	@ 0x85
 8000b4c:	f7ff fee0 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fedd 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000b56:	2078      	movs	r0, #120	@ 0x78
 8000b58:	f7ff feda 	bl	8000910 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000b5c:	20ea      	movs	r0, #234	@ 0xea
 8000b5e:	f7ff feb5 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff fed4 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f7ff fed1 	bl	8000910 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000b6e:	20ed      	movs	r0, #237	@ 0xed
 8000b70:	f7ff feac 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000b74:	2064      	movs	r0, #100	@ 0x64
 8000b76:	f7ff fecb 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	f7ff fec8 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000b80:	2012      	movs	r0, #18
 8000b82:	f7ff fec5 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000b86:	2081      	movs	r0, #129	@ 0x81
 8000b88:	f7ff fec2 	bl	8000910 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000b8c:	20f7      	movs	r0, #247	@ 0xf7
 8000b8e:	f7ff fe9d 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000b92:	2020      	movs	r0, #32
 8000b94:	f7ff febc 	bl	8000910 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000b98:	20c0      	movs	r0, #192	@ 0xc0
 8000b9a:	f7ff fe97 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000b9e:	2023      	movs	r0, #35	@ 0x23
 8000ba0:	f7ff feb6 	bl	8000910 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000ba4:	20c1      	movs	r0, #193	@ 0xc1
 8000ba6:	f7ff fe91 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000baa:	2010      	movs	r0, #16
 8000bac:	f7ff feb0 	bl	8000910 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000bb0:	20c5      	movs	r0, #197	@ 0xc5
 8000bb2:	f7ff fe8b 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000bb6:	203e      	movs	r0, #62	@ 0x3e
 8000bb8:	f7ff feaa 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000bbc:	2028      	movs	r0, #40	@ 0x28
 8000bbe:	f7ff fea7 	bl	8000910 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000bc2:	20c7      	movs	r0, #199	@ 0xc7
 8000bc4:	f7ff fe82 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000bc8:	2086      	movs	r0, #134	@ 0x86
 8000bca:	f7ff fea1 	bl	8000910 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000bce:	2036      	movs	r0, #54	@ 0x36
 8000bd0:	f7ff fe7c 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000bd4:	2048      	movs	r0, #72	@ 0x48
 8000bd6:	f7ff fe9b 	bl	8000910 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000bda:	203a      	movs	r0, #58	@ 0x3a
 8000bdc:	f7ff fe76 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000be0:	2055      	movs	r0, #85	@ 0x55
 8000be2:	f7ff fe95 	bl	8000910 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000be6:	20b1      	movs	r0, #177	@ 0xb1
 8000be8:	f7ff fe70 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000bec:	2000      	movs	r0, #0
 8000bee:	f7ff fe8f 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000bf2:	2018      	movs	r0, #24
 8000bf4:	f7ff fe8c 	bl	8000910 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000bf8:	20b6      	movs	r0, #182	@ 0xb6
 8000bfa:	f7ff fe67 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000bfe:	2008      	movs	r0, #8
 8000c00:	f7ff fe86 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000c04:	2082      	movs	r0, #130	@ 0x82
 8000c06:	f7ff fe83 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000c0a:	2027      	movs	r0, #39	@ 0x27
 8000c0c:	f7ff fe80 	bl	8000910 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000c10:	20f2      	movs	r0, #242	@ 0xf2
 8000c12:	f7ff fe5b 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff fe7a 	bl	8000910 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000c1c:	2026      	movs	r0, #38	@ 0x26
 8000c1e:	f7ff fe55 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff fe74 	bl	8000910 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000c28:	20e0      	movs	r0, #224	@ 0xe0
 8000c2a:	f7ff fe4f 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f7ff fe6e 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000c34:	2031      	movs	r0, #49	@ 0x31
 8000c36:	f7ff fe6b 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000c3a:	202b      	movs	r0, #43	@ 0x2b
 8000c3c:	f7ff fe68 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000c40:	200c      	movs	r0, #12
 8000c42:	f7ff fe65 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000c46:	200e      	movs	r0, #14
 8000c48:	f7ff fe62 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000c4c:	2008      	movs	r0, #8
 8000c4e:	f7ff fe5f 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000c52:	204e      	movs	r0, #78	@ 0x4e
 8000c54:	f7ff fe5c 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000c58:	20f1      	movs	r0, #241	@ 0xf1
 8000c5a:	f7ff fe59 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000c5e:	2037      	movs	r0, #55	@ 0x37
 8000c60:	f7ff fe56 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000c64:	2007      	movs	r0, #7
 8000c66:	f7ff fe53 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000c6a:	2010      	movs	r0, #16
 8000c6c:	f7ff fe50 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000c70:	2003      	movs	r0, #3
 8000c72:	f7ff fe4d 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000c76:	200e      	movs	r0, #14
 8000c78:	f7ff fe4a 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000c7c:	2009      	movs	r0, #9
 8000c7e:	f7ff fe47 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff fe44 	bl	8000910 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000c88:	20e1      	movs	r0, #225	@ 0xe1
 8000c8a:	f7ff fe1f 	bl	80008cc <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff fe3e 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000c94:	200e      	movs	r0, #14
 8000c96:	f7ff fe3b 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000c9a:	2014      	movs	r0, #20
 8000c9c:	f7ff fe38 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000ca0:	2003      	movs	r0, #3
 8000ca2:	f7ff fe35 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000ca6:	2011      	movs	r0, #17
 8000ca8:	f7ff fe32 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000cac:	2007      	movs	r0, #7
 8000cae:	f7ff fe2f 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000cb2:	2031      	movs	r0, #49	@ 0x31
 8000cb4:	f7ff fe2c 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000cb8:	20c1      	movs	r0, #193	@ 0xc1
 8000cba:	f7ff fe29 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000cbe:	2048      	movs	r0, #72	@ 0x48
 8000cc0:	f7ff fe26 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000cc4:	2008      	movs	r0, #8
 8000cc6:	f7ff fe23 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000cca:	200f      	movs	r0, #15
 8000ccc:	f7ff fe20 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000cd0:	200c      	movs	r0, #12
 8000cd2:	f7ff fe1d 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000cd6:	2031      	movs	r0, #49	@ 0x31
 8000cd8:	f7ff fe1a 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000cdc:	2036      	movs	r0, #54	@ 0x36
 8000cde:	f7ff fe17 	bl	8000910 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f7ff fe14 	bl	8000910 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000ce8:	2011      	movs	r0, #17
 8000cea:	f7ff fdef 	bl	80008cc <ILI9341_Write_Command>
HAL_Delay(120);
 8000cee:	2078      	movs	r0, #120	@ 0x78
 8000cf0:	f000 ff8e 	bl	8001c10 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000cf4:	2029      	movs	r0, #41	@ 0x29
 8000cf6:	f7ff fde9 	bl	80008cc <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f7ff fe94 	bl	8000a28 <ILI9341_Set_Rotation>
}
 8000d00:	bf00      	nop
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d0c:	b08d      	sub	sp, #52	@ 0x34
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	6039      	str	r1, [r7, #0]
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	466b      	mov	r3, sp
 8000d18:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d26:	d202      	bcs.n	8000d2e <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d2c:	e002      	b.n	8000d34 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000d2e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000d34:	2201      	movs	r2, #1
 8000d36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d3a:	4840      	ldr	r0, [pc, #256]	@ (8000e3c <ILI9341_Draw_Colour_Burst+0x134>)
 8000d3c:	f001 fa4a 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2110      	movs	r1, #16
 8000d44:	483e      	ldr	r0, [pc, #248]	@ (8000e40 <ILI9341_Draw_Colour_Burst+0x138>)
 8000d46:	f001 fa45 	bl	80021d4 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000d4a:	88fb      	ldrh	r3, [r7, #6]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8000d54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000d56:	460b      	mov	r3, r1
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	4699      	mov	r9, r3
 8000d62:	f04f 0200 	mov.w	r2, #0
 8000d66:	f04f 0300 	mov.w	r3, #0
 8000d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000d76:	2300      	movs	r3, #0
 8000d78:	460c      	mov	r4, r1
 8000d7a:	461d      	mov	r5, r3
 8000d7c:	f04f 0200 	mov.w	r2, #0
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	00eb      	lsls	r3, r5, #3
 8000d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000d8a:	00e2      	lsls	r2, r4, #3
 8000d8c:	1dcb      	adds	r3, r1, #7
 8000d8e:	08db      	lsrs	r3, r3, #3
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	ebad 0d03 	sub.w	sp, sp, r3
 8000d96:	466b      	mov	r3, sp
 8000d98:	3300      	adds	r3, #0
 8000d9a:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000da0:	e00e      	b.n	8000dc0 <ILI9341_Draw_Colour_Burst+0xb8>
	{
		burst_buffer[j] = 	chifted;
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000da6:	4413      	add	r3, r2
 8000da8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000dac:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000db0:	3301      	adds	r3, #1
 8000db2:	88fa      	ldrh	r2, [r7, #6]
 8000db4:	b2d1      	uxtb	r1, r2
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d3ec      	bcc.n	8000da2 <ILI9341_Draw_Colour_Burst+0x9a>
	}

uint32_t Sending_Size = Size*2;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd6:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ddc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000de0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000de2:	fb01 f202 	mul.w	r2, r1, r2
 8000de6:	1a9b      	subs	r3, r3, r2
 8000de8:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d011      	beq.n	8000e14 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000df0:	2300      	movs	r3, #0
 8000df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000df4:	e00a      	b.n	8000e0c <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(ili9341_spi, (unsigned char *)burst_buffer, Buffer_Size, 10);
 8000df6:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <ILI9341_Draw_Colour_Burst+0x13c>)
 8000df8:	6818      	ldr	r0, [r3, #0]
 8000dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	230a      	movs	r3, #10
 8000e00:	69b9      	ldr	r1, [r7, #24]
 8000e02:	f002 f8a4 	bl	8002f4e <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e08:	3301      	adds	r3, #1
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d3f0      	bcc.n	8000df6 <ILI9341_Draw_Colour_Burst+0xee>
		}
}

//REMAINDER!
HAL_SPI_Transmit(ili9341_spi, (unsigned char *)burst_buffer, Remainder_from_block, 10);
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <ILI9341_Draw_Colour_Burst+0x13c>)
 8000e16:	6818      	ldr	r0, [r3, #0]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	69b9      	ldr	r1, [r7, #24]
 8000e20:	f002 f895 	bl	8002f4e <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2110      	movs	r1, #16
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <ILI9341_Draw_Colour_Burst+0x138>)
 8000e2a:	f001 f9d3 	bl	80021d4 <HAL_GPIO_WritePin>
 8000e2e:	46b5      	mov	sp, r6
}
 8000e30:	bf00      	nop
 8000e32:	3734      	adds	r7, #52	@ 0x34
 8000e34:	46bd      	mov	sp, r7
 8000e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	200000ac 	.word	0x200000ac

08000e48 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000e52:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <ILI9341_Fill_Screen+0x44>)
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <ILI9341_Fill_Screen+0x48>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff fd77 	bl	8000954 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000e66:	4b09      	ldr	r3, [pc, #36]	@ (8000e8c <ILI9341_Fill_Screen+0x44>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	461a      	mov	r2, r3
 8000e6e:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <ILI9341_Fill_Screen+0x48>)
 8000e70:	881b      	ldrh	r3, [r3, #0]
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff42 	bl	8000d08 <ILI9341_Draw_Colour_Burst>
}
 8000e84:	bf00      	nop
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000002 	.word	0x20000002
 8000e90:	20000000 	.word	0x20000000

08000e94 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	80bb      	strh	r3, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000ea6:	4b60      	ldr	r3, [pc, #384]	@ (8001028 <ILI9341_Draw_Pixel+0x194>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	88fa      	ldrh	r2, [r7, #6]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	f080 80b5 	bcs.w	800101e <ILI9341_Draw_Pixel+0x18a>
 8000eb4:	4b5d      	ldr	r3, [pc, #372]	@ (800102c <ILI9341_Draw_Pixel+0x198>)
 8000eb6:	881b      	ldrh	r3, [r3, #0]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	88ba      	ldrh	r2, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	f080 80ae 	bcs.w	800101e <ILI9341_Draw_Pixel+0x18a>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ec8:	4859      	ldr	r0, [pc, #356]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000eca:	f001 f983 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	4858      	ldr	r0, [pc, #352]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000ed4:	f001 f97e 	bl	80021d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000ed8:	202a      	movs	r0, #42	@ 0x2a
 8000eda:	f7ff fce5 	bl	80008a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000ee4:	4852      	ldr	r0, [pc, #328]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000ee6:	f001 f975 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000eea:	2201      	movs	r2, #1
 8000eec:	2110      	movs	r1, #16
 8000eee:	4851      	ldr	r0, [pc, #324]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000ef0:	f001 f970 	bl	80021d4 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	2110      	movs	r1, #16
 8000ef8:	484e      	ldr	r0, [pc, #312]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000efa:	f001 f96b 	bl	80021d4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	753b      	strb	r3, [r7, #20]
 8000f08:	88fb      	ldrh	r3, [r7, #6]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	757b      	strb	r3, [r7, #21]
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	3301      	adds	r3, #1
 8000f12:	121b      	asrs	r3, r3, #8
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	75bb      	strb	r3, [r7, #22]
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(ili9341_spi, Temp_Buffer, 4, 1);
 8000f22:	4b45      	ldr	r3, [pc, #276]	@ (8001038 <ILI9341_Draw_Pixel+0x1a4>)
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	f107 0114 	add.w	r1, r7, #20
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	f002 f80e 	bl	8002f4e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000f32:	2201      	movs	r2, #1
 8000f34:	2110      	movs	r1, #16
 8000f36:	483f      	ldr	r0, [pc, #252]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000f38:	f001 f94c 	bl	80021d4 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f42:	483b      	ldr	r0, [pc, #236]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000f44:	f001 f946 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2110      	movs	r1, #16
 8000f4c:	4839      	ldr	r0, [pc, #228]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000f4e:	f001 f941 	bl	80021d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000f52:	202b      	movs	r0, #43	@ 0x2b
 8000f54:	f7ff fca8 	bl	80008a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f5e:	4834      	ldr	r0, [pc, #208]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000f60:	f001 f938 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000f64:	2201      	movs	r2, #1
 8000f66:	2110      	movs	r1, #16
 8000f68:	4832      	ldr	r0, [pc, #200]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000f6a:	f001 f933 	bl	80021d4 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2110      	movs	r1, #16
 8000f72:	4830      	ldr	r0, [pc, #192]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000f74:	f001 f92e 	bl	80021d4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000f78:	88bb      	ldrh	r3, [r7, #4]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	743b      	strb	r3, [r7, #16]
 8000f82:	88bb      	ldrh	r3, [r7, #4]
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	747b      	strb	r3, [r7, #17]
 8000f88:	88bb      	ldrh	r3, [r7, #4]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	121b      	asrs	r3, r3, #8
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	74bb      	strb	r3, [r7, #18]
 8000f92:	88bb      	ldrh	r3, [r7, #4]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	3301      	adds	r3, #1
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(ili9341_spi, Temp_Buffer1, 4, 1);
 8000f9c:	4b26      	ldr	r3, [pc, #152]	@ (8001038 <ILI9341_Draw_Pixel+0x1a4>)
 8000f9e:	6818      	ldr	r0, [r3, #0]
 8000fa0:	f107 0110 	add.w	r1, r7, #16
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	f001 ffd1 	bl	8002f4e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2110      	movs	r1, #16
 8000fb0:	4820      	ldr	r0, [pc, #128]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000fb2:	f001 f90f 	bl	80021d4 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fbc:	481c      	ldr	r0, [pc, #112]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000fbe:	f001 f909 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2110      	movs	r1, #16
 8000fc6:	481b      	ldr	r0, [pc, #108]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000fc8:	f001 f904 	bl	80021d4 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000fcc:	202c      	movs	r0, #44	@ 0x2c
 8000fce:	f7ff fc6b 	bl	80008a8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fd8:	4815      	ldr	r0, [pc, #84]	@ (8001030 <ILI9341_Draw_Pixel+0x19c>)
 8000fda:	f001 f8fb 	bl	80021d4 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000fde:	2201      	movs	r2, #1
 8000fe0:	2110      	movs	r1, #16
 8000fe2:	4814      	ldr	r0, [pc, #80]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000fe4:	f001 f8f6 	bl	80021d4 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2110      	movs	r1, #16
 8000fec:	4811      	ldr	r0, [pc, #68]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8000fee:	f001 f8f1 	bl	80021d4 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000ff2:	887b      	ldrh	r3, [r7, #2]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	733b      	strb	r3, [r7, #12]
 8000ffc:	887b      	ldrh	r3, [r7, #2]
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(ili9341_spi, Temp_Buffer2, 2, 1);
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <ILI9341_Draw_Pixel+0x1a4>)
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	f107 010c 	add.w	r1, r7, #12
 800100a:	2301      	movs	r3, #1
 800100c:	2202      	movs	r2, #2
 800100e:	f001 ff9e 	bl	8002f4e <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001012:	2201      	movs	r2, #1
 8001014:	2110      	movs	r1, #16
 8001016:	4807      	ldr	r0, [pc, #28]	@ (8001034 <ILI9341_Draw_Pixel+0x1a0>)
 8001018:	f001 f8dc 	bl	80021d4 <HAL_GPIO_WritePin>
 800101c:	e000      	b.n	8001020 <ILI9341_Draw_Pixel+0x18c>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800101e:	bf00      	nop
	
}
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000002 	.word	0x20000002
 800102c:	20000000 	.word	0x20000000
 8001030:	40020800 	.word	0x40020800
 8001034:	40020000 	.word	0x40020000
 8001038:	200000ac 	.word	0x200000ac

0800103c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b08e      	sub	sp, #56	@ 0x38
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	const char connection_msg[] = "UART to PC success \n";
 8001042:	4b40      	ldr	r3, [pc, #256]	@ (8001144 <main+0x108>)
 8001044:	f107 0418 	add.w	r4, r7, #24
 8001048:	461d      	mov	r5, r3
 800104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800104c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800104e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001052:	6020      	str	r0, [r4, #0]
 8001054:	3404      	adds	r4, #4
 8001056:	7021      	strb	r1, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001058:	f000 fd68 	bl	8001b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800105c:	f000 f880 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001060:	f000 fa34 	bl	80014cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001064:	f000 fa08 	bl	8001478 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001068:	f000 f990 	bl	800138c <MX_TIM2_Init>
  MX_TIM1_Init();
 800106c:	f000 f91a 	bl	80012a4 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001070:	f000 f8e2 	bl	8001238 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2,(const uint8_t*) connection_msg , strlen(connection_msg), TIMEOUT);
 8001074:	f107 0118 	add.w	r1, r7, #24
 8001078:	230f      	movs	r3, #15
 800107a:	2214      	movs	r2, #20
 800107c:	4832      	ldr	r0, [pc, #200]	@ (8001148 <main+0x10c>)
 800107e:	f003 fc23 	bl	80048c8 <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001082:	2100      	movs	r1, #0
 8001084:	4831      	ldr	r0, [pc, #196]	@ (800114c <main+0x110>)
 8001086:	f002 fa95 	bl	80035b4 <HAL_TIM_PWM_Start>
  HCR04_init(&htim1);
 800108a:	4831      	ldr	r0, [pc, #196]	@ (8001150 <main+0x114>)
 800108c:	f7ff fb6e 	bl	800076c <HCR04_init>
  ILI9341_Init(&hspi1);
 8001090:	4830      	ldr	r0, [pc, #192]	@ (8001154 <main+0x118>)
 8001092:	f7ff fd27 	bl	8000ae4 <ILI9341_Init>

  ILI9341_Fill_Screen(RED);
 8001096:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 800109a:	f7ff fed5 	bl	8000e48 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 800109e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010a2:	f000 fdb5 	bl	8001c10 <HAL_Delay>

  ILI9341_Fill_Screen(GREEN);
 80010a6:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80010aa:	f7ff fecd 	bl	8000e48 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 80010ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010b2:	f000 fdad 	bl	8001c10 <HAL_Delay>

  ILI9341_Fill_Screen(BLUE);
 80010b6:	201f      	movs	r0, #31
 80010b8:	f7ff fec6 	bl	8000e48 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 80010bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010c0:	f000 fda6 	bl	8001c10 <HAL_Delay>

  ILI9341_Fill_Screen(BLACK);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff febf 	bl	8000e48 <ILI9341_Fill_Screen>
  HAL_Delay(1000);
 80010ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ce:	f000 fd9f 	bl	8001c10 <HAL_Delay>

  // Draw a single WHITE pixel at (10, 10)
  ILI9341_Draw_Pixel(10, 10, 0xFFFF);
 80010d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010d6:	210a      	movs	r1, #10
 80010d8:	200a      	movs	r0, #10
 80010da:	f7ff fedb 	bl	8000e94 <ILI9341_Draw_Pixel>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(button_state == 0) {
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <main+0x11c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1fb      	bne.n	80010de <main+0xa2>
		  for(uint16_t angle = 0; angle <= 180; angle +=2) {
 80010e6:	2300      	movs	r3, #0
 80010e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80010ea:	e027      	b.n	800113c <main+0x100>
				 set_servo_angle(&htim2, TIM_CHANNEL_1, angle);
 80010ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	2100      	movs	r1, #0
 80010f4:	4815      	ldr	r0, [pc, #84]	@ (800114c <main+0x110>)
 80010f6:	f000 fad7 	bl	80016a8 <set_servo_angle>
				 uint16_t distance = HCSR04_read(&htim1);
 80010fa:	4815      	ldr	r0, [pc, #84]	@ (8001150 <main+0x114>)
 80010fc:	f7ff fb4a 	bl	8000794 <HCSR04_read>
 8001100:	4603      	mov	r3, r0
 8001102:	86bb      	strh	r3, [r7, #52]	@ 0x34
				 uint32_t filtered = median_filter(distance);
 8001104:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff faea 	bl	80006e0 <median_filter>
 800110c:	6338      	str	r0, [r7, #48]	@ 0x30
				 sprintf(transmit_distance_msg, "Dist: %lu cm \r\n", filtered);
 800110e:	463b      	mov	r3, r7
 8001110:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001112:	4912      	ldr	r1, [pc, #72]	@ (800115c <main+0x120>)
 8001114:	4618      	mov	r0, r3
 8001116:	f003 ff93 	bl	8005040 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*)transmit_distance_msg, strlen(transmit_distance_msg), TIMEOUT);
 800111a:	463b      	mov	r3, r7
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f877 	bl	8000210 <strlen>
 8001122:	4603      	mov	r3, r0
 8001124:	b29a      	uxth	r2, r3
 8001126:	4639      	mov	r1, r7
 8001128:	230f      	movs	r3, #15
 800112a:	4807      	ldr	r0, [pc, #28]	@ (8001148 <main+0x10c>)
 800112c:	f003 fbcc 	bl	80048c8 <HAL_UART_Transmit>
				 HAL_Delay(35);
 8001130:	2023      	movs	r0, #35	@ 0x23
 8001132:	f000 fd6d 	bl	8001c10 <HAL_Delay>
		  for(uint16_t angle = 0; angle <= 180; angle +=2) {
 8001136:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8001138:	3302      	adds	r3, #2
 800113a:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800113c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800113e:	2bb4      	cmp	r3, #180	@ 0xb4
 8001140:	d9d4      	bls.n	80010ec <main+0xb0>
	  if(button_state == 0) {
 8001142:	e7cc      	b.n	80010de <main+0xa2>
 8001144:	080059a8 	.word	0x080059a8
 8001148:	20000198 	.word	0x20000198
 800114c:	20000150 	.word	0x20000150
 8001150:	20000108 	.word	0x20000108
 8001154:	200000b0 	.word	0x200000b0
 8001158:	200001e0 	.word	0x200001e0
 800115c:	08005998 	.word	0x08005998

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 031c 	add.w	r3, r7, #28
 800116a:	2234      	movs	r2, #52	@ 0x34
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f003 ff88 	bl	8005084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <SystemClock_Config+0xd0>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118c:	4a28      	ldr	r2, [pc, #160]	@ (8001230 <SystemClock_Config+0xd0>)
 800118e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001192:	6413      	str	r3, [r2, #64]	@ 0x40
 8001194:	4b26      	ldr	r3, [pc, #152]	@ (8001230 <SystemClock_Config+0xd0>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119c:	607b      	str	r3, [r7, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a0:	2300      	movs	r3, #0
 80011a2:	603b      	str	r3, [r7, #0]
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <SystemClock_Config+0xd4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011ac:	4a21      	ldr	r2, [pc, #132]	@ (8001234 <SystemClock_Config+0xd4>)
 80011ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <SystemClock_Config+0xd4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c0:	2302      	movs	r3, #2
 80011c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c8:	2310      	movs	r3, #16
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011cc:	2302      	movs	r3, #2
 80011ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d0:	2300      	movs	r3, #0
 80011d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011d4:	2308      	movs	r3, #8
 80011d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80011d8:	2354      	movs	r3, #84	@ 0x54
 80011da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011dc:	2302      	movs	r3, #2
 80011de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e0:	2302      	movs	r3, #2
 80011e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4618      	mov	r0, r3
 80011ee:	f001 fb87 	bl	8002900 <HAL_RCC_OscConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80011f8:	f000 fa50 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fc:	230f      	movs	r3, #15
 80011fe:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001200:	2302      	movs	r3, #2
 8001202:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001208:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	2102      	movs	r1, #2
 8001218:	4618      	mov	r0, r3
 800121a:	f001 f827 	bl	800226c <HAL_RCC_ClockConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001224:	f000 fa3a 	bl	800169c <Error_Handler>
  }
}
 8001228:	bf00      	nop
 800122a:	3750      	adds	r7, #80	@ 0x50
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000

08001238 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800123c:	4b17      	ldr	r3, [pc, #92]	@ (800129c <MX_SPI1_Init+0x64>)
 800123e:	4a18      	ldr	r2, [pc, #96]	@ (80012a0 <MX_SPI1_Init+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001242:	4b16      	ldr	r3, [pc, #88]	@ (800129c <MX_SPI1_Init+0x64>)
 8001244:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001248:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800124a:	4b14      	ldr	r3, [pc, #80]	@ (800129c <MX_SPI1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001250:	4b12      	ldr	r3, [pc, #72]	@ (800129c <MX_SPI1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001256:	4b11      	ldr	r3, [pc, #68]	@ (800129c <MX_SPI1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800125c:	4b0f      	ldr	r3, [pc, #60]	@ (800129c <MX_SPI1_Init+0x64>)
 800125e:	2200      	movs	r2, #0
 8001260:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001262:	4b0e      	ldr	r3, [pc, #56]	@ (800129c <MX_SPI1_Init+0x64>)
 8001264:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001268:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800126a:	4b0c      	ldr	r3, [pc, #48]	@ (800129c <MX_SPI1_Init+0x64>)
 800126c:	2200      	movs	r2, #0
 800126e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001270:	4b0a      	ldr	r3, [pc, #40]	@ (800129c <MX_SPI1_Init+0x64>)
 8001272:	2200      	movs	r2, #0
 8001274:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001276:	4b09      	ldr	r3, [pc, #36]	@ (800129c <MX_SPI1_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800127c:	4b07      	ldr	r3, [pc, #28]	@ (800129c <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <MX_SPI1_Init+0x64>)
 8001284:	220a      	movs	r2, #10
 8001286:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001288:	4804      	ldr	r0, [pc, #16]	@ (800129c <MX_SPI1_Init+0x64>)
 800128a:	f001 fdd7 	bl	8002e3c <HAL_SPI_Init>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001294:	f000 fa02 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000b0 	.word	0x200000b0
 80012a0:	40013000 	.word	0x40013000

080012a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012aa:	f107 0318 	add.w	r3, r7, #24
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012c2:	463b      	mov	r3, r7
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001384 <MX_TIM1_Init+0xe0>)
 80012d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001388 <MX_TIM1_Init+0xe4>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80012d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <MX_TIM1_Init+0xe0>)
 80012d6:	2253      	movs	r2, #83	@ 0x53
 80012d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012da:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <MX_TIM1_Init+0xe0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80012e0:	4b28      	ldr	r3, [pc, #160]	@ (8001384 <MX_TIM1_Init+0xe0>)
 80012e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80012e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <MX_TIM1_Init+0xe0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ee:	4b25      	ldr	r3, [pc, #148]	@ (8001384 <MX_TIM1_Init+0xe0>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f4:	4b23      	ldr	r3, [pc, #140]	@ (8001384 <MX_TIM1_Init+0xe0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012fa:	4822      	ldr	r0, [pc, #136]	@ (8001384 <MX_TIM1_Init+0xe0>)
 80012fc:	f002 f848 	bl	8003390 <HAL_TIM_Base_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001306:	f000 f9c9 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4619      	mov	r1, r3
 8001316:	481b      	ldr	r0, [pc, #108]	@ (8001384 <MX_TIM1_Init+0xe0>)
 8001318:	f002 fcbc 	bl	8003c94 <HAL_TIM_ConfigClockSource>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001322:	f000 f9bb 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001326:	4817      	ldr	r0, [pc, #92]	@ (8001384 <MX_TIM1_Init+0xe0>)
 8001328:	f002 fa0c 	bl	8003744 <HAL_TIM_IC_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001332:	f000 f9b3 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	480f      	ldr	r0, [pc, #60]	@ (8001384 <MX_TIM1_Init+0xe0>)
 8001346:	f003 f9df 	bl	8004708 <HAL_TIMEx_MasterConfigSynchronization>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001350:	f000 f9a4 	bl	800169c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001354:	2300      	movs	r3, #0
 8001356:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001358:	2301      	movs	r3, #1
 800135a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	@ (8001384 <MX_TIM1_Init+0xe0>)
 800136c:	f002 fb33 	bl	80039d6 <HAL_TIM_IC_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001376:	f000 f991 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	@ 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000108 	.word	0x20000108
 8001388:	40010000 	.word	0x40010000

0800138c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08e      	sub	sp, #56	@ 0x38
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	f107 0320 	add.w	r3, r7, #32
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
 80013b8:	615a      	str	r2, [r3, #20]
 80013ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001474 <MX_TIM2_Init+0xe8>)
 80013be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80013c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <MX_TIM2_Init+0xe8>)
 80013c6:	22c7      	movs	r2, #199	@ 0xc7
 80013c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001474 <MX_TIM2_Init+0xe8>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 80013d0:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <MX_TIM2_Init+0xe8>)
 80013d2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80013d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d8:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <MX_TIM2_Init+0xe8>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013de:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <MX_TIM2_Init+0xe8>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e4:	4823      	ldr	r0, [pc, #140]	@ (8001474 <MX_TIM2_Init+0xe8>)
 80013e6:	f001 ffd3 	bl	8003390 <HAL_TIM_Base_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80013f0:	f000 f954 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013fe:	4619      	mov	r1, r3
 8001400:	481c      	ldr	r0, [pc, #112]	@ (8001474 <MX_TIM2_Init+0xe8>)
 8001402:	f002 fc47 	bl	8003c94 <HAL_TIM_ConfigClockSource>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800140c:	f000 f946 	bl	800169c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001410:	4818      	ldr	r0, [pc, #96]	@ (8001474 <MX_TIM2_Init+0xe8>)
 8001412:	f002 f875 	bl	8003500 <HAL_TIM_PWM_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800141c:	f000 f93e 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001428:	f107 0320 	add.w	r3, r7, #32
 800142c:	4619      	mov	r1, r3
 800142e:	4811      	ldr	r0, [pc, #68]	@ (8001474 <MX_TIM2_Init+0xe8>)
 8001430:	f003 f96a 	bl	8004708 <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800143a:	f000 f92f 	bl	800169c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800143e:	2360      	movs	r3, #96	@ 0x60
 8001440:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	4807      	ldr	r0, [pc, #28]	@ (8001474 <MX_TIM2_Init+0xe8>)
 8001456:	f002 fb5b 	bl	8003b10 <HAL_TIM_PWM_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001460:	f000 f91c 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001464:	4803      	ldr	r0, [pc, #12]	@ (8001474 <MX_TIM2_Init+0xe8>)
 8001466:	f000 fa2d 	bl	80018c4 <HAL_TIM_MspPostInit>

}
 800146a:	bf00      	nop
 800146c:	3738      	adds	r7, #56	@ 0x38
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000150 	.word	0x20000150

08001478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800147c:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 800147e:	4a12      	ldr	r2, [pc, #72]	@ (80014c8 <MX_USART2_UART_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001482:	4b10      	ldr	r3, [pc, #64]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014b0:	f003 f9ba 	bl	8004828 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ba:	f000 f8ef 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000198 	.word	0x20000198
 80014c8:	40004400 	.word	0x40004400

080014cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	@ 0x28
 80014d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	605a      	str	r2, [r3, #4]
 80014dc:	609a      	str	r2, [r3, #8]
 80014de:	60da      	str	r2, [r3, #12]
 80014e0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001624 <MX_GPIO_Init+0x158>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a4e      	ldr	r2, [pc, #312]	@ (8001624 <MX_GPIO_Init+0x158>)
 80014ec:	f043 0304 	orr.w	r3, r3, #4
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001624 <MX_GPIO_Init+0x158>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0304 	and.w	r3, r3, #4
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b48      	ldr	r3, [pc, #288]	@ (8001624 <MX_GPIO_Init+0x158>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a47      	ldr	r2, [pc, #284]	@ (8001624 <MX_GPIO_Init+0x158>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b45      	ldr	r3, [pc, #276]	@ (8001624 <MX_GPIO_Init+0x158>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
 800151e:	4b41      	ldr	r3, [pc, #260]	@ (8001624 <MX_GPIO_Init+0x158>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a40      	ldr	r2, [pc, #256]	@ (8001624 <MX_GPIO_Init+0x158>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b3e      	ldr	r3, [pc, #248]	@ (8001624 <MX_GPIO_Init+0x158>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	4b3a      	ldr	r3, [pc, #232]	@ (8001624 <MX_GPIO_Init+0x158>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a39      	ldr	r2, [pc, #228]	@ (8001624 <MX_GPIO_Init+0x158>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <MX_GPIO_Init+0x158>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001552:	2201      	movs	r2, #1
 8001554:	2110      	movs	r1, #16
 8001556:	4834      	ldr	r0, [pc, #208]	@ (8001628 <MX_GPIO_Init+0x15c>)
 8001558:	f000 fe3c 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_RESET_Pin|SPI1_DC_Pin, GPIO_PIN_RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8001562:	4832      	ldr	r0, [pc, #200]	@ (800162c <MX_GPIO_Init+0x160>)
 8001564:	f000 fe36 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800156e:	482e      	ldr	r0, [pc, #184]	@ (8001628 <MX_GPIO_Init+0x15c>)
 8001570:	f000 fe30 	bl	80021d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001574:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800157a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800157e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4828      	ldr	r0, [pc, #160]	@ (800162c <MX_GPIO_Init+0x160>)
 800158c:	f000 fc76 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001590:	2310      	movs	r3, #16
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4820      	ldr	r0, [pc, #128]	@ (8001628 <MX_GPIO_Init+0x15c>)
 80015a8:	f000 fc68 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RESET_Pin SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_RESET_Pin|SPI1_DC_Pin;
 80015ac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80015b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4819      	ldr	r0, [pc, #100]	@ (800162c <MX_GPIO_Init+0x160>)
 80015c6:	f000 fc59 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4812      	ldr	r0, [pc, #72]	@ (8001628 <MX_GPIO_Init+0x15c>)
 80015e0:	f000 fc4c 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80015e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ea:	2301      	movs	r3, #1
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	480a      	ldr	r0, [pc, #40]	@ (8001628 <MX_GPIO_Init+0x15c>)
 80015fe:	f000 fc3d 	bl	8001e7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	2028      	movs	r0, #40	@ 0x28
 8001608:	f000 fc01 	bl	8001e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800160c:	2028      	movs	r0, #40	@ 0x28
 800160e:	f000 fc1a 	bl	8001e46 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //start with LED on
 8001612:	2201      	movs	r2, #1
 8001614:	2120      	movs	r1, #32
 8001616:	4804      	ldr	r0, [pc, #16]	@ (8001628 <MX_GPIO_Init+0x15c>)
 8001618:	f000 fddc 	bl	80021d4 <HAL_GPIO_WritePin>

  /* USER CODE END MX_GPIO_Init_2 */
}
 800161c:	bf00      	nop
 800161e:	3728      	adds	r7, #40	@ 0x28
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000
 800162c:	40020800 	.word	0x40020800

08001630 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) //blue pushbutton pin
 800163a:	88fb      	ldrh	r3, [r7, #6]
 800163c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001640:	d122      	bne.n	8001688 <HAL_GPIO_EXTI_Callback+0x58>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001642:	2120      	movs	r1, #32
 8001644:	4812      	ldr	r0, [pc, #72]	@ (8001690 <HAL_GPIO_EXTI_Callback+0x60>)
 8001646:	f000 fdde 	bl	8002206 <HAL_GPIO_TogglePin>

		if(button_state == 0) {
 800164a:	4b12      	ldr	r3, [pc, #72]	@ (8001694 <HAL_GPIO_EXTI_Callback+0x64>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <HAL_GPIO_EXTI_Callback+0x36>
			__HAL_RCC_TIM2_CLK_DISABLE(); // pause
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x68>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	4a10      	ldr	r2, [pc, #64]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x68>)
 8001658:	f023 0301 	bic.w	r3, r3, #1
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
			button_state = 1;
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <HAL_GPIO_EXTI_Callback+0x64>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]
		} else {
			__HAL_RCC_TIM2_CLK_ENABLE();
			button_state = 0;
		}
	}
}
 8001664:	e010      	b.n	8001688 <HAL_GPIO_EXTI_Callback+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	4b0b      	ldr	r3, [pc, #44]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x68>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166e:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x68>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	6413      	str	r3, [r2, #64]	@ 0x40
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <HAL_GPIO_EXTI_Callback+0x68>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
			button_state = 0;
 8001682:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <HAL_GPIO_EXTI_Callback+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
}
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40020000 	.word	0x40020000
 8001694:	200001e0 	.word	0x200001e0
 8001698:	40023800 	.word	0x40023800

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <Error_Handler+0x8>

080016a8 <set_servo_angle>:
 */
#include "stm32f4xx_hal.h"
#include "servo.h"

void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	4613      	mov	r3, r2
 80016b4:	71fb      	strb	r3, [r7, #7]
	//map angle (0-180) to pulse width (210-1050 counts)
	uint32_t pulse_length = 210 + (angle * (1050 - 210) / 180);
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f44f 7252 	mov.w	r2, #840	@ 0x348
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	4a15      	ldr	r2, [pc, #84]	@ (8001718 <set_servo_angle+0x70>)
 80016c2:	fb82 1203 	smull	r1, r2, r2, r3
 80016c6:	441a      	add	r2, r3
 80016c8:	11d2      	asrs	r2, r2, #7
 80016ca:	17db      	asrs	r3, r3, #31
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	33d2      	adds	r3, #210	@ 0xd2
 80016d0:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d104      	bne.n	80016e2 <set_servo_angle+0x3a>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80016e0:	e013      	b.n	800170a <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d104      	bne.n	80016f2 <set_servo_angle+0x4a>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80016f0:	e00b      	b.n	800170a <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b08      	cmp	r3, #8
 80016f6:	d104      	bne.n	8001702 <set_servo_angle+0x5a>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001700:	e003      	b.n	800170a <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800170a:	bf00      	nop
 800170c:	371c      	adds	r7, #28
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	b60b60b7 	.word	0xb60b60b7

0800171c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_MspInit+0x4c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	4a0f      	ldr	r2, [pc, #60]	@ (8001768 <HAL_MspInit+0x4c>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001730:	6453      	str	r3, [r2, #68]	@ 0x44
 8001732:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_MspInit+0x4c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <HAL_MspInit+0x4c>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	@ 0x40
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_MspInit+0x4c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800175a:	2007      	movs	r0, #7
 800175c:	f000 fb4c 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40023800 	.word	0x40023800

0800176c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	@ 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	@ (80017f0 <HAL_SPI_MspInit+0x84>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12b      	bne.n	80017e6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <HAL_SPI_MspInit+0x88>)
 8001794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001796:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <HAL_SPI_MspInit+0x88>)
 8001798:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800179c:	6453      	str	r3, [r2, #68]	@ 0x44
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <HAL_SPI_MspInit+0x88>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <HAL_SPI_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a10      	ldr	r2, [pc, #64]	@ (80017f4 <HAL_SPI_MspInit+0x88>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_SPI_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017c6:	23e0      	movs	r3, #224	@ 0xe0
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017d6:	2305      	movs	r3, #5
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <HAL_SPI_MspInit+0x8c>)
 80017e2:	f000 fb4b 	bl	8001e7c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	@ 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40013000 	.word	0x40013000
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a27      	ldr	r2, [pc, #156]	@ (80018b8 <HAL_TIM_Base_MspInit+0xbc>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d135      	bne.n	800188a <HAL_TIM_Base_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b26      	ldr	r3, [pc, #152]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a25      	ldr	r2, [pc, #148]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b1f      	ldr	r3, [pc, #124]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001842:	4a1e      	ldr	r2, [pc, #120]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 8001844:	f043 0301 	orr.w	r3, r3, #1
 8001848:	6313      	str	r3, [r2, #48]	@ 0x30
 800184a:	4b1c      	ldr	r3, [pc, #112]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001868:	2301      	movs	r3, #1
 800186a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186c:	f107 0314 	add.w	r3, r7, #20
 8001870:	4619      	mov	r1, r3
 8001872:	4813      	ldr	r0, [pc, #76]	@ (80018c0 <HAL_TIM_Base_MspInit+0xc4>)
 8001874:	f000 fb02 	bl	8001e7c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	201b      	movs	r0, #27
 800187e:	f000 fac6 	bl	8001e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001882:	201b      	movs	r0, #27
 8001884:	f000 fadf 	bl	8001e46 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001888:	e012      	b.n	80018b0 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001892:	d10d      	bne.n	80018b0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001894:	2300      	movs	r3, #0
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_TIM_Base_MspInit+0xc0>)
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]
}
 80018b0:	bf00      	nop
 80018b2:	3728      	adds	r7, #40	@ 0x28
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40010000 	.word	0x40010000
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000

080018c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e4:	d11d      	bne.n	8001922 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_TIM_MspPostInit+0x68>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a0f      	ldr	r2, [pc, #60]	@ (800192c <HAL_TIM_MspPostInit+0x68>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_TIM_MspPostInit+0x68>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_Pin;
 8001902:	2301      	movs	r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001912:	2301      	movs	r3, #1
 8001914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM2_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 030c 	add.w	r3, r7, #12
 800191a:	4619      	mov	r1, r3
 800191c:	4804      	ldr	r0, [pc, #16]	@ (8001930 <HAL_TIM_MspPostInit+0x6c>)
 800191e:	f000 faad 	bl	8001e7c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001922:	bf00      	nop
 8001924:	3720      	adds	r7, #32
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	@ 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_UART_MspInit+0x84>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d12b      	bne.n	80019ae <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <HAL_UART_MspInit+0x88>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	4a17      	ldr	r2, [pc, #92]	@ (80019bc <HAL_UART_MspInit+0x88>)
 8001960:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001964:	6413      	str	r3, [r2, #64]	@ 0x40
 8001966:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <HAL_UART_MspInit+0x88>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b11      	ldr	r3, [pc, #68]	@ (80019bc <HAL_UART_MspInit+0x88>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a10      	ldr	r2, [pc, #64]	@ (80019bc <HAL_UART_MspInit+0x88>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <HAL_UART_MspInit+0x88>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800198e:	230c      	movs	r3, #12
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800199e:	2307      	movs	r3, #7
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <HAL_UART_MspInit+0x8c>)
 80019aa:	f000 fa67 	bl	8001e7c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80019ae:	bf00      	nop
 80019b0:	3728      	adds	r7, #40	@ 0x28
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40004400 	.word	0x40004400
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40020000 	.word	0x40020000

080019c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019c8:	bf00      	nop
 80019ca:	e7fd      	b.n	80019c8 <NMI_Handler+0x4>

080019cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <MemManage_Handler+0x4>

080019dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	bf00      	nop
 80019ea:	e7fd      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1a:	f000 f8d9 	bl	8001bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <TIM1_CC_IRQHandler+0x10>)
 8001a2a:	f001 fee4 	bl	80037f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000108 	.word	0x20000108

08001a38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a3c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a40:	f000 fbfc 	bl	800223c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	@ (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f003 fb0c 	bl	8005094 <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20020000 	.word	0x20020000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	200001e4 	.word	0x200001e4
 8001ab0:	20000338 	.word	0x20000338

08001ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ab8:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <SystemInit+0x20>)
 8001aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <SystemInit+0x20>)
 8001ac0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ac4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001adc:	f7ff ffea 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae0:	480c      	ldr	r0, [pc, #48]	@ (8001b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ae2:	490d      	ldr	r1, [pc, #52]	@ (8001b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae8:	e002      	b.n	8001af0 <LoopCopyDataInit>

08001aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aee:	3304      	adds	r3, #4

08001af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001af4:	d3f9      	bcc.n	8001aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001af6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001af8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001afc:	e001      	b.n	8001b02 <LoopFillZerobss>

08001afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b00:	3204      	adds	r2, #4

08001b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b04:	d3fb      	bcc.n	8001afe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b06:	f003 facb 	bl	80050a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b0a:	f7ff fa97 	bl	800103c <main>
  bx  lr    
 8001b0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b18:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b1c:	08005a1c 	.word	0x08005a1c
  ldr r2, =_sbss
 8001b20:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b24:	20000334 	.word	0x20000334

08001b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b28:	e7fe      	b.n	8001b28 <ADC_IRQHandler>
	...

08001b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b30:	4b0e      	ldr	r3, [pc, #56]	@ (8001b6c <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <HAL_Init+0x40>)
 8001b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b6c <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0a      	ldr	r2, [pc, #40]	@ (8001b6c <HAL_Init+0x40>)
 8001b42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <HAL_Init+0x40>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <HAL_Init+0x40>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b54:	2003      	movs	r0, #3
 8001b56:	f000 f94f 	bl	8001df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f000 f808 	bl	8001b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b60:	f7ff fddc 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40023c00 	.word	0x40023c00

08001b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b78:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <HAL_InitTick+0x54>)
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <HAL_InitTick+0x58>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f967 	bl	8001e62 <HAL_SYSTICK_Config>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e00e      	b.n	8001bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d80a      	bhi.n	8001bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bac:	f000 f92f 	bl	8001e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb0:	4a06      	ldr	r2, [pc, #24]	@ (8001bcc <HAL_InitTick+0x5c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	e000      	b.n	8001bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000004 	.word	0x20000004
 8001bc8:	2000000c 	.word	0x2000000c
 8001bcc:	20000008 	.word	0x20000008

08001bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_IncTick+0x20>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_IncTick+0x24>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <HAL_IncTick+0x24>)
 8001be2:	6013      	str	r3, [r2, #0]
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	2000000c 	.word	0x2000000c
 8001bf4:	200001e8 	.word	0x200001e8

08001bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	@ (8001c0c <HAL_GetTick+0x14>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	200001e8 	.word	0x200001e8

08001c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff ffee 	bl	8001bf8 <HAL_GetTick>
 8001c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c28:	d005      	beq.n	8001c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c54 <HAL_Delay+0x44>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c36:	bf00      	nop
 8001c38:	f7ff ffde 	bl	8001bf8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d8f7      	bhi.n	8001c38 <HAL_Delay+0x28>
  {
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000000c 	.word	0x2000000c

08001c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c74:	4013      	ands	r3, r2
 8001c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8a:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <__NVIC_SetPriorityGrouping+0x44>)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	60d3      	str	r3, [r2, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 0307 	and.w	r3, r3, #7
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	db0b      	blt.n	8001ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	f003 021f 	and.w	r2, r3, #31
 8001cd4:	4907      	ldr	r1, [pc, #28]	@ (8001cf4 <__NVIC_EnableIRQ+0x38>)
 8001cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cda:	095b      	lsrs	r3, r3, #5
 8001cdc:	2001      	movs	r0, #1
 8001cde:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	6039      	str	r1, [r7, #0]
 8001d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	db0a      	blt.n	8001d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	490c      	ldr	r1, [pc, #48]	@ (8001d44 <__NVIC_SetPriority+0x4c>)
 8001d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d16:	0112      	lsls	r2, r2, #4
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	440b      	add	r3, r1
 8001d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d20:	e00a      	b.n	8001d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4908      	ldr	r1, [pc, #32]	@ (8001d48 <__NVIC_SetPriority+0x50>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3b04      	subs	r3, #4
 8001d30:	0112      	lsls	r2, r2, #4
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	761a      	strb	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	@ 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	f1c3 0307 	rsb	r3, r3, #7
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	bf28      	it	cs
 8001d6a:	2304      	movcs	r3, #4
 8001d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	3304      	adds	r3, #4
 8001d72:	2b06      	cmp	r3, #6
 8001d74:	d902      	bls.n	8001d7c <NVIC_EncodePriority+0x30>
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3b03      	subs	r3, #3
 8001d7a:	e000      	b.n	8001d7e <NVIC_EncodePriority+0x32>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d80:	f04f 32ff 	mov.w	r2, #4294967295
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	401a      	ands	r2, r3
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d94:	f04f 31ff 	mov.w	r1, #4294967295
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	43d9      	mvns	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	4313      	orrs	r3, r2
         );
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	@ 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dc4:	d301      	bcc.n	8001dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e00f      	b.n	8001dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dca:	4a0a      	ldr	r2, [pc, #40]	@ (8001df4 <SysTick_Config+0x40>)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd8:	f7ff ff8e 	bl	8001cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <SysTick_Config+0x40>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	@ (8001df4 <SysTick_Config+0x40>)
 8001de4:	2207      	movs	r2, #7
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff29 	bl	8001c58 <__NVIC_SetPriorityGrouping>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	4603      	mov	r3, r0
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
 8001e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e20:	f7ff ff3e 	bl	8001ca0 <__NVIC_GetPriorityGrouping>
 8001e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	68b9      	ldr	r1, [r7, #8]
 8001e2a:	6978      	ldr	r0, [r7, #20]
 8001e2c:	f7ff ff8e 	bl	8001d4c <NVIC_EncodePriority>
 8001e30:	4602      	mov	r2, r0
 8001e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e36:	4611      	mov	r1, r2
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff5d 	bl	8001cf8 <__NVIC_SetPriority>
}
 8001e3e:	bf00      	nop
 8001e40:	3718      	adds	r7, #24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff31 	bl	8001cbc <__NVIC_EnableIRQ>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ffa2 	bl	8001db4 <SysTick_Config>
 8001e70:	4603      	mov	r3, r0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	@ 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e165      	b.n	8002164 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 8154 	bne.w	800215e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d005      	beq.n	8001ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d130      	bne.n	8001f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	2203      	movs	r2, #3
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	005b      	lsls	r3, r3, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f04:	2201      	movs	r2, #1
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 0201 	and.w	r2, r3, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d017      	beq.n	8001f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	2203      	movs	r2, #3
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80ae 	beq.w	800215e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b5d      	ldr	r3, [pc, #372]	@ (800217c <HAL_GPIO_Init+0x300>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	4a5c      	ldr	r2, [pc, #368]	@ (800217c <HAL_GPIO_Init+0x300>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002010:	6453      	str	r3, [r2, #68]	@ 0x44
 8002012:	4b5a      	ldr	r3, [pc, #360]	@ (800217c <HAL_GPIO_Init+0x300>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201e:	4a58      	ldr	r2, [pc, #352]	@ (8002180 <HAL_GPIO_Init+0x304>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4f      	ldr	r2, [pc, #316]	@ (8002184 <HAL_GPIO_Init+0x308>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d025      	beq.n	8002096 <HAL_GPIO_Init+0x21a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4e      	ldr	r2, [pc, #312]	@ (8002188 <HAL_GPIO_Init+0x30c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01f      	beq.n	8002092 <HAL_GPIO_Init+0x216>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4d      	ldr	r2, [pc, #308]	@ (800218c <HAL_GPIO_Init+0x310>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d019      	beq.n	800208e <HAL_GPIO_Init+0x212>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4c      	ldr	r2, [pc, #304]	@ (8002190 <HAL_GPIO_Init+0x314>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d013      	beq.n	800208a <HAL_GPIO_Init+0x20e>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4b      	ldr	r2, [pc, #300]	@ (8002194 <HAL_GPIO_Init+0x318>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d00d      	beq.n	8002086 <HAL_GPIO_Init+0x20a>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4a      	ldr	r2, [pc, #296]	@ (8002198 <HAL_GPIO_Init+0x31c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d007      	beq.n	8002082 <HAL_GPIO_Init+0x206>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a49      	ldr	r2, [pc, #292]	@ (800219c <HAL_GPIO_Init+0x320>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d101      	bne.n	800207e <HAL_GPIO_Init+0x202>
 800207a:	2306      	movs	r3, #6
 800207c:	e00c      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 800207e:	2307      	movs	r3, #7
 8002080:	e00a      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 8002082:	2305      	movs	r3, #5
 8002084:	e008      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 8002086:	2304      	movs	r3, #4
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 800208a:	2303      	movs	r3, #3
 800208c:	e004      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 800208e:	2302      	movs	r3, #2
 8002090:	e002      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x21c>
 8002096:	2300      	movs	r3, #0
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f002 0203 	and.w	r2, r2, #3
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	4093      	lsls	r3, r2
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a8:	4935      	ldr	r1, [pc, #212]	@ (8002180 <HAL_GPIO_Init+0x304>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b6:	4b3a      	ldr	r3, [pc, #232]	@ (80021a0 <HAL_GPIO_Init+0x324>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020da:	4a31      	ldr	r2, [pc, #196]	@ (80021a0 <HAL_GPIO_Init+0x324>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e0:	4b2f      	ldr	r3, [pc, #188]	@ (80021a0 <HAL_GPIO_Init+0x324>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002104:	4a26      	ldr	r2, [pc, #152]	@ (80021a0 <HAL_GPIO_Init+0x324>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210a:	4b25      	ldr	r3, [pc, #148]	@ (80021a0 <HAL_GPIO_Init+0x324>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212e:	4a1c      	ldr	r2, [pc, #112]	@ (80021a0 <HAL_GPIO_Init+0x324>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002134:	4b1a      	ldr	r3, [pc, #104]	@ (80021a0 <HAL_GPIO_Init+0x324>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002158:	4a11      	ldr	r2, [pc, #68]	@ (80021a0 <HAL_GPIO_Init+0x324>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	f67f ae96 	bls.w	8001e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3724      	adds	r7, #36	@ 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	40013800 	.word	0x40013800
 8002184:	40020000 	.word	0x40020000
 8002188:	40020400 	.word	0x40020400
 800218c:	40020800 	.word	0x40020800
 8002190:	40020c00 	.word	0x40020c00
 8002194:	40021000 	.word	0x40021000
 8002198:	40021400 	.word	0x40021400
 800219c:	40021800 	.word	0x40021800
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	887b      	ldrh	r3, [r7, #2]
 80021b6:	4013      	ands	r3, r2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
 80021c0:	e001      	b.n	80021c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021c2:	2300      	movs	r3, #0
 80021c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	807b      	strh	r3, [r7, #2]
 80021e0:	4613      	mov	r3, r2
 80021e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e4:	787b      	ldrb	r3, [r7, #1]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f0:	e003      	b.n	80021fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	041a      	lsls	r2, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	619a      	str	r2, [r3, #24]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002206:	b480      	push	{r7}
 8002208:	b085      	sub	sp, #20
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	460b      	mov	r3, r1
 8002210:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002218:	887a      	ldrh	r2, [r7, #2]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4013      	ands	r3, r2
 800221e:	041a      	lsls	r2, r3, #16
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	43d9      	mvns	r1, r3
 8002224:	887b      	ldrh	r3, [r7, #2]
 8002226:	400b      	ands	r3, r1
 8002228:	431a      	orrs	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	619a      	str	r2, [r3, #24]
}
 800222e:	bf00      	nop
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002246:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	88fb      	ldrh	r3, [r7, #6]
 800224c:	4013      	ands	r3, r2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d006      	beq.n	8002260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002252:	4a05      	ldr	r2, [pc, #20]	@ (8002268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002258:	88fb      	ldrh	r3, [r7, #6]
 800225a:	4618      	mov	r0, r3
 800225c:	f7ff f9e8 	bl	8001630 <HAL_GPIO_EXTI_Callback>
  }
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40013c00 	.word	0x40013c00

0800226c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0cc      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002280:	4b68      	ldr	r3, [pc, #416]	@ (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 030f 	and.w	r3, r3, #15
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d90c      	bls.n	80022a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b65      	ldr	r3, [pc, #404]	@ (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b63      	ldr	r3, [pc, #396]	@ (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d001      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e0b8      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d020      	beq.n	80022f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d005      	beq.n	80022cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022c0:	4b59      	ldr	r3, [pc, #356]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	4a58      	ldr	r2, [pc, #352]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0308 	and.w	r3, r3, #8
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022d8:	4b53      	ldr	r3, [pc, #332]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a52      	ldr	r2, [pc, #328]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e4:	4b50      	ldr	r3, [pc, #320]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	494d      	ldr	r1, [pc, #308]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80022f2:	4313      	orrs	r3, r2
 80022f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d044      	beq.n	800238c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230a:	4b47      	ldr	r3, [pc, #284]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d119      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e07f      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b02      	cmp	r3, #2
 8002320:	d003      	beq.n	800232a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002326:	2b03      	cmp	r3, #3
 8002328:	d107      	bne.n	800233a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800232a:	4b3f      	ldr	r3, [pc, #252]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e06f      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233a:	4b3b      	ldr	r3, [pc, #236]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e067      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800234a:	4b37      	ldr	r3, [pc, #220]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f023 0203 	bic.w	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4934      	ldr	r1, [pc, #208]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	4313      	orrs	r3, r2
 800235a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800235c:	f7ff fc4c 	bl	8001bf8 <HAL_GetTick>
 8002360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002362:	e00a      	b.n	800237a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002364:	f7ff fc48 	bl	8001bf8 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e04f      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237a:	4b2b      	ldr	r3, [pc, #172]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 020c 	and.w	r2, r3, #12
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	429a      	cmp	r2, r3
 800238a:	d1eb      	bne.n	8002364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800238c:	4b25      	ldr	r3, [pc, #148]	@ (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d20c      	bcs.n	80023b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b22      	ldr	r3, [pc, #136]	@ (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	b2d2      	uxtb	r2, r2
 80023a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a2:	4b20      	ldr	r3, [pc, #128]	@ (8002424 <HAL_RCC_ClockConfig+0x1b8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e032      	b.n	800241a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c0:	4b19      	ldr	r3, [pc, #100]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4916      	ldr	r1, [pc, #88]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023de:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	490e      	ldr	r1, [pc, #56]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023f2:	f000 f855 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 80023f6:	4602      	mov	r2, r0
 80023f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002428 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	490a      	ldr	r1, [pc, #40]	@ (800242c <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	5ccb      	ldrb	r3, [r1, r3]
 8002406:	fa22 f303 	lsr.w	r3, r2, r3
 800240a:	4a09      	ldr	r2, [pc, #36]	@ (8002430 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800240e:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_RCC_ClockConfig+0x1c8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fbac 	bl	8001b70 <HAL_InitTick>

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023c00 	.word	0x40023c00
 8002428:	40023800 	.word	0x40023800
 800242c:	080059c0 	.word	0x080059c0
 8002430:	20000004 	.word	0x20000004
 8002434:	20000008 	.word	0x20000008

08002438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800243c:	4b03      	ldr	r3, [pc, #12]	@ (800244c <HAL_RCC_GetHCLKFreq+0x14>)
 800243e:	681b      	ldr	r3, [r3, #0]
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	20000004 	.word	0x20000004

08002450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002454:	f7ff fff0 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 8002458:	4602      	mov	r2, r0
 800245a:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	0a9b      	lsrs	r3, r3, #10
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	4903      	ldr	r1, [pc, #12]	@ (8002474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002466:	5ccb      	ldrb	r3, [r1, r3]
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800246c:	4618      	mov	r0, r3
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	080059d0 	.word	0x080059d0

08002478 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800247c:	f7ff ffdc 	bl	8002438 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	0b5b      	lsrs	r3, r3, #13
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4903      	ldr	r1, [pc, #12]	@ (800249c <HAL_RCC_GetPCLK2Freq+0x24>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002494:	4618      	mov	r0, r3
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40023800 	.word	0x40023800
 800249c:	080059d0 	.word	0x080059d0

080024a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024a4:	b0ae      	sub	sp, #184	@ 0xb8
 80024a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024c6:	4bcb      	ldr	r3, [pc, #812]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	f200 8206 	bhi.w	80028e0 <HAL_RCC_GetSysClockFreq+0x440>
 80024d4:	a201      	add	r2, pc, #4	@ (adr r2, 80024dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80024d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024da:	bf00      	nop
 80024dc:	08002511 	.word	0x08002511
 80024e0:	080028e1 	.word	0x080028e1
 80024e4:	080028e1 	.word	0x080028e1
 80024e8:	080028e1 	.word	0x080028e1
 80024ec:	08002519 	.word	0x08002519
 80024f0:	080028e1 	.word	0x080028e1
 80024f4:	080028e1 	.word	0x080028e1
 80024f8:	080028e1 	.word	0x080028e1
 80024fc:	08002521 	.word	0x08002521
 8002500:	080028e1 	.word	0x080028e1
 8002504:	080028e1 	.word	0x080028e1
 8002508:	080028e1 	.word	0x080028e1
 800250c:	08002711 	.word	0x08002711
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4bb9      	ldr	r3, [pc, #740]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002512:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002516:	e1e7      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002518:	4bb8      	ldr	r3, [pc, #736]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800251a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800251e:	e1e3      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002520:	4bb4      	ldr	r3, [pc, #720]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002528:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800252c:	4bb1      	ldr	r3, [pc, #708]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d071      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002538:	4bae      	ldr	r3, [pc, #696]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	2200      	movs	r2, #0
 8002540:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002544:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800254c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002550:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800255a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800255e:	4622      	mov	r2, r4
 8002560:	462b      	mov	r3, r5
 8002562:	f04f 0000 	mov.w	r0, #0
 8002566:	f04f 0100 	mov.w	r1, #0
 800256a:	0159      	lsls	r1, r3, #5
 800256c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002570:	0150      	lsls	r0, r2, #5
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4621      	mov	r1, r4
 8002578:	1a51      	subs	r1, r2, r1
 800257a:	6439      	str	r1, [r7, #64]	@ 0x40
 800257c:	4629      	mov	r1, r5
 800257e:	eb63 0301 	sbc.w	r3, r3, r1
 8002582:	647b      	str	r3, [r7, #68]	@ 0x44
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002590:	4649      	mov	r1, r9
 8002592:	018b      	lsls	r3, r1, #6
 8002594:	4641      	mov	r1, r8
 8002596:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800259a:	4641      	mov	r1, r8
 800259c:	018a      	lsls	r2, r1, #6
 800259e:	4641      	mov	r1, r8
 80025a0:	1a51      	subs	r1, r2, r1
 80025a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025a4:	4649      	mov	r1, r9
 80025a6:	eb63 0301 	sbc.w	r3, r3, r1
 80025aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80025b8:	4649      	mov	r1, r9
 80025ba:	00cb      	lsls	r3, r1, #3
 80025bc:	4641      	mov	r1, r8
 80025be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025c2:	4641      	mov	r1, r8
 80025c4:	00ca      	lsls	r2, r1, #3
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	4622      	mov	r2, r4
 80025ce:	189b      	adds	r3, r3, r2
 80025d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80025d2:	462b      	mov	r3, r5
 80025d4:	460a      	mov	r2, r1
 80025d6:	eb42 0303 	adc.w	r3, r2, r3
 80025da:	637b      	str	r3, [r7, #52]	@ 0x34
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025e8:	4629      	mov	r1, r5
 80025ea:	024b      	lsls	r3, r1, #9
 80025ec:	4621      	mov	r1, r4
 80025ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025f2:	4621      	mov	r1, r4
 80025f4:	024a      	lsls	r2, r1, #9
 80025f6:	4610      	mov	r0, r2
 80025f8:	4619      	mov	r1, r3
 80025fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025fe:	2200      	movs	r2, #0
 8002600:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002604:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002608:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800260c:	f7fd fe58 	bl	80002c0 <__aeabi_uldivmod>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4613      	mov	r3, r2
 8002616:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800261a:	e067      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800261c:	4b75      	ldr	r3, [pc, #468]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	099b      	lsrs	r3, r3, #6
 8002622:	2200      	movs	r2, #0
 8002624:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002628:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800262c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002634:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002636:	2300      	movs	r3, #0
 8002638:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800263a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800263e:	4622      	mov	r2, r4
 8002640:	462b      	mov	r3, r5
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f04f 0100 	mov.w	r1, #0
 800264a:	0159      	lsls	r1, r3, #5
 800264c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002650:	0150      	lsls	r0, r2, #5
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4621      	mov	r1, r4
 8002658:	1a51      	subs	r1, r2, r1
 800265a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800265c:	4629      	mov	r1, r5
 800265e:	eb63 0301 	sbc.w	r3, r3, r1
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002664:	f04f 0200 	mov.w	r2, #0
 8002668:	f04f 0300 	mov.w	r3, #0
 800266c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002670:	4649      	mov	r1, r9
 8002672:	018b      	lsls	r3, r1, #6
 8002674:	4641      	mov	r1, r8
 8002676:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800267a:	4641      	mov	r1, r8
 800267c:	018a      	lsls	r2, r1, #6
 800267e:	4641      	mov	r1, r8
 8002680:	ebb2 0a01 	subs.w	sl, r2, r1
 8002684:	4649      	mov	r1, r9
 8002686:	eb63 0b01 	sbc.w	fp, r3, r1
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	f04f 0300 	mov.w	r3, #0
 8002692:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002696:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800269a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800269e:	4692      	mov	sl, r2
 80026a0:	469b      	mov	fp, r3
 80026a2:	4623      	mov	r3, r4
 80026a4:	eb1a 0303 	adds.w	r3, sl, r3
 80026a8:	623b      	str	r3, [r7, #32]
 80026aa:	462b      	mov	r3, r5
 80026ac:	eb4b 0303 	adc.w	r3, fp, r3
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80026be:	4629      	mov	r1, r5
 80026c0:	028b      	lsls	r3, r1, #10
 80026c2:	4621      	mov	r1, r4
 80026c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026c8:	4621      	mov	r1, r4
 80026ca:	028a      	lsls	r2, r1, #10
 80026cc:	4610      	mov	r0, r2
 80026ce:	4619      	mov	r1, r3
 80026d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026d4:	2200      	movs	r2, #0
 80026d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80026d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80026da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80026de:	f7fd fdef 	bl	80002c0 <__aeabi_uldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4613      	mov	r3, r2
 80026e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80026ec:	4b41      	ldr	r3, [pc, #260]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80026fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800270e:	e0eb      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002710:	4b38      	ldr	r3, [pc, #224]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002718:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800271c:	4b35      	ldr	r3, [pc, #212]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d06b      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002728:	4b32      	ldr	r3, [pc, #200]	@ (80027f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	099b      	lsrs	r3, r3, #6
 800272e:	2200      	movs	r2, #0
 8002730:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002732:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800273a:	663b      	str	r3, [r7, #96]	@ 0x60
 800273c:	2300      	movs	r3, #0
 800273e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002740:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002744:	4622      	mov	r2, r4
 8002746:	462b      	mov	r3, r5
 8002748:	f04f 0000 	mov.w	r0, #0
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	0159      	lsls	r1, r3, #5
 8002752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002756:	0150      	lsls	r0, r2, #5
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4621      	mov	r1, r4
 800275e:	1a51      	subs	r1, r2, r1
 8002760:	61b9      	str	r1, [r7, #24]
 8002762:	4629      	mov	r1, r5
 8002764:	eb63 0301 	sbc.w	r3, r3, r1
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002776:	4659      	mov	r1, fp
 8002778:	018b      	lsls	r3, r1, #6
 800277a:	4651      	mov	r1, sl
 800277c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002780:	4651      	mov	r1, sl
 8002782:	018a      	lsls	r2, r1, #6
 8002784:	4651      	mov	r1, sl
 8002786:	ebb2 0801 	subs.w	r8, r2, r1
 800278a:	4659      	mov	r1, fp
 800278c:	eb63 0901 	sbc.w	r9, r3, r1
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800279c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027a4:	4690      	mov	r8, r2
 80027a6:	4699      	mov	r9, r3
 80027a8:	4623      	mov	r3, r4
 80027aa:	eb18 0303 	adds.w	r3, r8, r3
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	462b      	mov	r3, r5
 80027b2:	eb49 0303 	adc.w	r3, r9, r3
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	f04f 0200 	mov.w	r2, #0
 80027bc:	f04f 0300 	mov.w	r3, #0
 80027c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027c4:	4629      	mov	r1, r5
 80027c6:	024b      	lsls	r3, r1, #9
 80027c8:	4621      	mov	r1, r4
 80027ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ce:	4621      	mov	r1, r4
 80027d0:	024a      	lsls	r2, r1, #9
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027da:	2200      	movs	r2, #0
 80027dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80027e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027e4:	f7fd fd6c 	bl	80002c0 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4613      	mov	r3, r2
 80027ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027f2:	e065      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x420>
 80027f4:	40023800 	.word	0x40023800
 80027f8:	00f42400 	.word	0x00f42400
 80027fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002800:	4b3d      	ldr	r3, [pc, #244]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	2200      	movs	r2, #0
 8002808:	4618      	mov	r0, r3
 800280a:	4611      	mov	r1, r2
 800280c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002810:	653b      	str	r3, [r7, #80]	@ 0x50
 8002812:	2300      	movs	r3, #0
 8002814:	657b      	str	r3, [r7, #84]	@ 0x54
 8002816:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800281a:	4642      	mov	r2, r8
 800281c:	464b      	mov	r3, r9
 800281e:	f04f 0000 	mov.w	r0, #0
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	0159      	lsls	r1, r3, #5
 8002828:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800282c:	0150      	lsls	r0, r2, #5
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4641      	mov	r1, r8
 8002834:	1a51      	subs	r1, r2, r1
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	4649      	mov	r1, r9
 800283a:	eb63 0301 	sbc.w	r3, r3, r1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800284c:	4659      	mov	r1, fp
 800284e:	018b      	lsls	r3, r1, #6
 8002850:	4651      	mov	r1, sl
 8002852:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002856:	4651      	mov	r1, sl
 8002858:	018a      	lsls	r2, r1, #6
 800285a:	4651      	mov	r1, sl
 800285c:	1a54      	subs	r4, r2, r1
 800285e:	4659      	mov	r1, fp
 8002860:	eb63 0501 	sbc.w	r5, r3, r1
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	00eb      	lsls	r3, r5, #3
 800286e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002872:	00e2      	lsls	r2, r4, #3
 8002874:	4614      	mov	r4, r2
 8002876:	461d      	mov	r5, r3
 8002878:	4643      	mov	r3, r8
 800287a:	18e3      	adds	r3, r4, r3
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	464b      	mov	r3, r9
 8002880:	eb45 0303 	adc.w	r3, r5, r3
 8002884:	607b      	str	r3, [r7, #4]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002892:	4629      	mov	r1, r5
 8002894:	028b      	lsls	r3, r1, #10
 8002896:	4621      	mov	r1, r4
 8002898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800289c:	4621      	mov	r1, r4
 800289e:	028a      	lsls	r2, r1, #10
 80028a0:	4610      	mov	r0, r2
 80028a2:	4619      	mov	r1, r3
 80028a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028a8:	2200      	movs	r2, #0
 80028aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80028ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80028ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028b2:	f7fd fd05 	bl	80002c0 <__aeabi_uldivmod>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4613      	mov	r3, r2
 80028bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028c0:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0f1b      	lsrs	r3, r3, #28
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80028ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80028d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028de:	e003      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80028e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	37b8      	adds	r7, #184	@ 0xb8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028f6:	bf00      	nop
 80028f8:	40023800 	.word	0x40023800
 80028fc:	00f42400 	.word	0x00f42400

08002900 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e28d      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8083 	beq.w	8002a26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002920:	4b94      	ldr	r3, [pc, #592]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 030c 	and.w	r3, r3, #12
 8002928:	2b04      	cmp	r3, #4
 800292a:	d019      	beq.n	8002960 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800292c:	4b91      	ldr	r3, [pc, #580]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 030c 	and.w	r3, r3, #12
        || \
 8002934:	2b08      	cmp	r3, #8
 8002936:	d106      	bne.n	8002946 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002938:	4b8e      	ldr	r3, [pc, #568]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002940:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002944:	d00c      	beq.n	8002960 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002946:	4b8b      	ldr	r3, [pc, #556]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800294e:	2b0c      	cmp	r3, #12
 8002950:	d112      	bne.n	8002978 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002952:	4b88      	ldr	r3, [pc, #544]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800295e:	d10b      	bne.n	8002978 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	4b84      	ldr	r3, [pc, #528]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d05b      	beq.n	8002a24 <HAL_RCC_OscConfig+0x124>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d157      	bne.n	8002a24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e25a      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x90>
 8002982:	4b7c      	ldr	r3, [pc, #496]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a7b      	ldr	r2, [pc, #492]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e01d      	b.n	80029cc <HAL_RCC_OscConfig+0xcc>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0xb4>
 800299a:	4b76      	ldr	r3, [pc, #472]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a75      	ldr	r2, [pc, #468]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b73      	ldr	r3, [pc, #460]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a72      	ldr	r2, [pc, #456]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0xcc>
 80029b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7ff f910 	bl	8001bf8 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7ff f90c 	bl	8001bf8 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	@ 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e21f      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b61      	ldr	r3, [pc, #388]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0xdc>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7ff f8fc 	bl	8001bf8 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a04:	f7ff f8f8 	bl	8001bf8 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	@ 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e20b      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	4b57      	ldr	r3, [pc, #348]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0x104>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d06f      	beq.n	8002b12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a32:	4b50      	ldr	r3, [pc, #320]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d017      	beq.n	8002a6e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d105      	bne.n	8002a56 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a56:	4b47      	ldr	r3, [pc, #284]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a5e:	2b0c      	cmp	r3, #12
 8002a60:	d11c      	bne.n	8002a9c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a62:	4b44      	ldr	r3, [pc, #272]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d116      	bne.n	8002a9c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6e:	4b41      	ldr	r3, [pc, #260]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d005      	beq.n	8002a86 <HAL_RCC_OscConfig+0x186>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e1d3      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a86:	4b3b      	ldr	r3, [pc, #236]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4937      	ldr	r1, [pc, #220]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	e03a      	b.n	8002b12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa4:	4b34      	ldr	r3, [pc, #208]	@ (8002b78 <HAL_RCC_OscConfig+0x278>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7ff f8a5 	bl	8001bf8 <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ab2:	f7ff f8a1 	bl	8001bf8 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e1b4      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ad0:	4b28      	ldr	r3, [pc, #160]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	4925      	ldr	r1, [pc, #148]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
 8002ae4:	e015      	b.n	8002b12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae6:	4b24      	ldr	r3, [pc, #144]	@ (8002b78 <HAL_RCC_OscConfig+0x278>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aec:	f7ff f884 	bl	8001bf8 <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af4:	f7ff f880 	bl	8001bf8 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e193      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b06:	4b1b      	ldr	r3, [pc, #108]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d1f0      	bne.n	8002af4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d036      	beq.n	8002b8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d016      	beq.n	8002b54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b26:	4b15      	ldr	r3, [pc, #84]	@ (8002b7c <HAL_RCC_OscConfig+0x27c>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2c:	f7ff f864 	bl	8001bf8 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b34:	f7ff f860 	bl	8001bf8 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e173      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b46:	4b0b      	ldr	r3, [pc, #44]	@ (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x234>
 8002b52:	e01b      	b.n	8002b8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b54:	4b09      	ldr	r3, [pc, #36]	@ (8002b7c <HAL_RCC_OscConfig+0x27c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b5a:	f7ff f84d 	bl	8001bf8 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b60:	e00e      	b.n	8002b80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b62:	f7ff f849 	bl	8001bf8 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d907      	bls.n	8002b80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e15c      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
 8002b74:	40023800 	.word	0x40023800
 8002b78:	42470000 	.word	0x42470000
 8002b7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	4b8a      	ldr	r3, [pc, #552]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1ea      	bne.n	8002b62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 8097 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9e:	4b83      	ldr	r3, [pc, #524]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	4b7f      	ldr	r3, [pc, #508]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	4a7e      	ldr	r2, [pc, #504]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bba:	4b7c      	ldr	r3, [pc, #496]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bca:	4b79      	ldr	r3, [pc, #484]	@ (8002db0 <HAL_RCC_OscConfig+0x4b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d118      	bne.n	8002c08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd6:	4b76      	ldr	r3, [pc, #472]	@ (8002db0 <HAL_RCC_OscConfig+0x4b0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a75      	ldr	r2, [pc, #468]	@ (8002db0 <HAL_RCC_OscConfig+0x4b0>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002be2:	f7ff f809 	bl	8001bf8 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bea:	f7ff f805 	bl	8001bf8 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e118      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	4b6c      	ldr	r3, [pc, #432]	@ (8002db0 <HAL_RCC_OscConfig+0x4b0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d106      	bne.n	8002c1e <HAL_RCC_OscConfig+0x31e>
 8002c10:	4b66      	ldr	r3, [pc, #408]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c14:	4a65      	ldr	r2, [pc, #404]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1c:	e01c      	b.n	8002c58 <HAL_RCC_OscConfig+0x358>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d10c      	bne.n	8002c40 <HAL_RCC_OscConfig+0x340>
 8002c26:	4b61      	ldr	r3, [pc, #388]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2a:	4a60      	ldr	r2, [pc, #384]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c32:	4b5e      	ldr	r3, [pc, #376]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c36:	4a5d      	ldr	r2, [pc, #372]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0x358>
 8002c40:	4b5a      	ldr	r3, [pc, #360]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c44:	4a59      	ldr	r2, [pc, #356]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c4c:	4b57      	ldr	r3, [pc, #348]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c50:	4a56      	ldr	r2, [pc, #344]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c52:	f023 0304 	bic.w	r3, r3, #4
 8002c56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c60:	f7fe ffca 	bl	8001bf8 <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c68:	f7fe ffc6 	bl	8001bf8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e0d7      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ee      	beq.n	8002c68 <HAL_RCC_OscConfig+0x368>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe ffb4 	bl	8001bf8 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe ffb0 	bl	8001bf8 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0c1      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002caa:	4b40      	ldr	r3, [pc, #256]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1ee      	bne.n	8002c94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cb6:	7dfb      	ldrb	r3, [r7, #23]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80ad 	beq.w	8002e2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd2:	4b36      	ldr	r3, [pc, #216]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b08      	cmp	r3, #8
 8002cdc:	d060      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d145      	bne.n	8002d72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b33      	ldr	r3, [pc, #204]	@ (8002db4 <HAL_RCC_OscConfig+0x4b4>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe ff84 	bl	8001bf8 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe ff80 	bl	8001bf8 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e093      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d06:	4b29      	ldr	r3, [pc, #164]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69da      	ldr	r2, [r3, #28]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d20:	019b      	lsls	r3, r3, #6
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	085b      	lsrs	r3, r3, #1
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	041b      	lsls	r3, r3, #16
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d34:	061b      	lsls	r3, r3, #24
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3c:	071b      	lsls	r3, r3, #28
 8002d3e:	491b      	ldr	r1, [pc, #108]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d44:	4b1b      	ldr	r3, [pc, #108]	@ (8002db4 <HAL_RCC_OscConfig+0x4b4>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe ff55 	bl	8001bf8 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d52:	f7fe ff51 	bl	8001bf8 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e064      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d64:	4b11      	ldr	r3, [pc, #68]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x452>
 8002d70:	e05c      	b.n	8002e2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	4b10      	ldr	r3, [pc, #64]	@ (8002db4 <HAL_RCC_OscConfig+0x4b4>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe ff3e 	bl	8001bf8 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe ff3a 	bl	8001bf8 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e04d      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d92:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x480>
 8002d9e:	e045      	b.n	8002e2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d107      	bne.n	8002db8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e040      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40007000 	.word	0x40007000
 8002db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db8:	4b1f      	ldr	r3, [pc, #124]	@ (8002e38 <HAL_RCC_OscConfig+0x538>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d030      	beq.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d129      	bne.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d122      	bne.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002de8:	4013      	ands	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d119      	bne.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	3b01      	subs	r3, #1
 8002e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d10f      	bne.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d107      	bne.n	8002e28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d001      	beq.n	8002e2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e000      	b.n	8002e2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3718      	adds	r7, #24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40023800 	.word	0x40023800

08002e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e07b      	b.n	8002f46 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d108      	bne.n	8002e68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e5e:	d009      	beq.n	8002e74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
 8002e66:	e005      	b.n	8002e74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe fc6c 	bl	800176c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eaa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef8:	ea42 0103 	orr.w	r1, r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	0c1b      	lsrs	r3, r3, #16
 8002f12:	f003 0104 	and.w	r1, r3, #4
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1a:	f003 0210 	and.w	r2, r3, #16
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b088      	sub	sp, #32
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	603b      	str	r3, [r7, #0]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f5e:	f7fe fe4b 	bl	8001bf8 <HAL_GetTick>
 8002f62:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d001      	beq.n	8002f78 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002f74:	2302      	movs	r3, #2
 8002f76:	e12a      	b.n	80031ce <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_SPI_Transmit+0x36>
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d101      	bne.n	8002f88 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e122      	b.n	80031ce <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_SPI_Transmit+0x48>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e11b      	b.n	80031ce <HAL_SPI_Transmit+0x280>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	88fa      	ldrh	r2, [r7, #6]
 8002fb6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	88fa      	ldrh	r2, [r7, #6]
 8002fbc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fe4:	d10f      	bne.n	8003006 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ff4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003004:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003010:	2b40      	cmp	r3, #64	@ 0x40
 8003012:	d007      	beq.n	8003024 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003022:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800302c:	d152      	bne.n	80030d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d002      	beq.n	800303c <HAL_SPI_Transmit+0xee>
 8003036:	8b7b      	ldrh	r3, [r7, #26]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d145      	bne.n	80030c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	881a      	ldrh	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	1c9a      	adds	r2, r3, #2
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003056:	b29b      	uxth	r3, r3
 8003058:	3b01      	subs	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003060:	e032      	b.n	80030c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b02      	cmp	r3, #2
 800306e:	d112      	bne.n	8003096 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003074:	881a      	ldrh	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	1c9a      	adds	r2, r3, #2
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003094:	e018      	b.n	80030c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003096:	f7fe fdaf 	bl	8001bf8 <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d803      	bhi.n	80030ae <HAL_SPI_Transmit+0x160>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d102      	bne.n	80030b4 <HAL_SPI_Transmit+0x166>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e082      	b.n	80031ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1c7      	bne.n	8003062 <HAL_SPI_Transmit+0x114>
 80030d2:	e053      	b.n	800317c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d002      	beq.n	80030e2 <HAL_SPI_Transmit+0x194>
 80030dc:	8b7b      	ldrh	r3, [r7, #26]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d147      	bne.n	8003172 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	330c      	adds	r3, #12
 80030ec:	7812      	ldrb	r2, [r2, #0]
 80030ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f4:	1c5a      	adds	r2, r3, #1
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030fe:	b29b      	uxth	r3, r3
 8003100:	3b01      	subs	r3, #1
 8003102:	b29a      	uxth	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003108:	e033      	b.n	8003172 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0302 	and.w	r3, r3, #2
 8003114:	2b02      	cmp	r3, #2
 8003116:	d113      	bne.n	8003140 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	330c      	adds	r3, #12
 8003122:	7812      	ldrb	r2, [r2, #0]
 8003124:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800313e:	e018      	b.n	8003172 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003140:	f7fe fd5a 	bl	8001bf8 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	429a      	cmp	r2, r3
 800314e:	d803      	bhi.n	8003158 <HAL_SPI_Transmit+0x20a>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d102      	bne.n	800315e <HAL_SPI_Transmit+0x210>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e02d      	b.n	80031ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d1c6      	bne.n	800310a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	6839      	ldr	r1, [r7, #0]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 f8b1 	bl	80032e8 <SPI_EndRxTxTransaction>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80031cc:	2300      	movs	r3, #0
  }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031e8:	f7fe fd06 	bl	8001bf8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031f8:	f7fe fcfe 	bl	8001bf8 <HAL_GetTick>
 80031fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031fe:	4b39      	ldr	r3, [pc, #228]	@ (80032e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	015b      	lsls	r3, r3, #5
 8003204:	0d1b      	lsrs	r3, r3, #20
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	fb02 f303 	mul.w	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800320e:	e055      	b.n	80032bc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d051      	beq.n	80032bc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003218:	f7fe fcee 	bl	8001bf8 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	429a      	cmp	r2, r3
 8003226:	d902      	bls.n	800322e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d13d      	bne.n	80032aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800323c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003246:	d111      	bne.n	800326c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003250:	d004      	beq.n	800325c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325a:	d107      	bne.n	800326c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800326a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003274:	d10f      	bne.n	8003296 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003294:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e018      	b.n	80032dc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d102      	bne.n	80032b6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
 80032b4:	e002      	b.n	80032bc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	689a      	ldr	r2, [r3, #8]
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4013      	ands	r3, r2
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d19a      	bne.n	8003210 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000004 	.word	0x20000004

080032e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	9300      	str	r3, [sp, #0]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2201      	movs	r2, #1
 80032fc:	2102      	movs	r1, #2
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f7ff ff6a 	bl	80031d8 <SPI_WaitFlagStateUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d007      	beq.n	800331a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330e:	f043 0220 	orr.w	r2, r3, #32
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e032      	b.n	8003380 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800331a:	4b1b      	ldr	r3, [pc, #108]	@ (8003388 <SPI_EndRxTxTransaction+0xa0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1b      	ldr	r2, [pc, #108]	@ (800338c <SPI_EndRxTxTransaction+0xa4>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	0d5b      	lsrs	r3, r3, #21
 8003326:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800332a:	fb02 f303 	mul.w	r3, r2, r3
 800332e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003338:	d112      	bne.n	8003360 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	9300      	str	r3, [sp, #0]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2200      	movs	r2, #0
 8003342:	2180      	movs	r1, #128	@ 0x80
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff ff47 	bl	80031d8 <SPI_WaitFlagStateUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d016      	beq.n	800337e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e00f      	b.n	8003380 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	3b01      	subs	r3, #1
 800336a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003376:	2b80      	cmp	r3, #128	@ 0x80
 8003378:	d0f2      	beq.n	8003360 <SPI_EndRxTxTransaction+0x78>
 800337a:	e000      	b.n	800337e <SPI_EndRxTxTransaction+0x96>
        break;
 800337c:	bf00      	nop
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	3718      	adds	r7, #24
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000004 	.word	0x20000004
 800338c:	165e9f81 	.word	0x165e9f81

08003390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e041      	b.n	8003426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d106      	bne.n	80033bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f7fe fa20 	bl	80017fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	f000 fd5a 	bl	8003e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d001      	beq.n	8003448 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e046      	b.n	80034d6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a23      	ldr	r2, [pc, #140]	@ (80034e4 <HAL_TIM_Base_Start+0xb4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d022      	beq.n	80034a0 <HAL_TIM_Base_Start+0x70>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003462:	d01d      	beq.n	80034a0 <HAL_TIM_Base_Start+0x70>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1f      	ldr	r2, [pc, #124]	@ (80034e8 <HAL_TIM_Base_Start+0xb8>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d018      	beq.n	80034a0 <HAL_TIM_Base_Start+0x70>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a1e      	ldr	r2, [pc, #120]	@ (80034ec <HAL_TIM_Base_Start+0xbc>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d013      	beq.n	80034a0 <HAL_TIM_Base_Start+0x70>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a1c      	ldr	r2, [pc, #112]	@ (80034f0 <HAL_TIM_Base_Start+0xc0>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00e      	beq.n	80034a0 <HAL_TIM_Base_Start+0x70>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a1b      	ldr	r2, [pc, #108]	@ (80034f4 <HAL_TIM_Base_Start+0xc4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d009      	beq.n	80034a0 <HAL_TIM_Base_Start+0x70>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a19      	ldr	r2, [pc, #100]	@ (80034f8 <HAL_TIM_Base_Start+0xc8>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d004      	beq.n	80034a0 <HAL_TIM_Base_Start+0x70>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a18      	ldr	r2, [pc, #96]	@ (80034fc <HAL_TIM_Base_Start+0xcc>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d111      	bne.n	80034c4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b06      	cmp	r3, #6
 80034b0:	d010      	beq.n	80034d4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f042 0201 	orr.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034c2:	e007      	b.n	80034d4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	40010400 	.word	0x40010400
 80034f8:	40014000 	.word	0x40014000
 80034fc:	40001800 	.word	0x40001800

08003500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e041      	b.n	8003596 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f839 	bl	800359e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f000 fca2 	bl	8003e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d109      	bne.n	80035d8 <HAL_TIM_PWM_Start+0x24>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e022      	b.n	800361e <HAL_TIM_PWM_Start+0x6a>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d109      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x3e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e015      	b.n	800361e <HAL_TIM_PWM_Start+0x6a>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d109      	bne.n	800360c <HAL_TIM_PWM_Start+0x58>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e008      	b.n	800361e <HAL_TIM_PWM_Start+0x6a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e07c      	b.n	8003720 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d104      	bne.n	8003636 <HAL_TIM_PWM_Start+0x82>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003634:	e013      	b.n	800365e <HAL_TIM_PWM_Start+0xaa>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d104      	bne.n	8003646 <HAL_TIM_PWM_Start+0x92>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003644:	e00b      	b.n	800365e <HAL_TIM_PWM_Start+0xaa>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d104      	bne.n	8003656 <HAL_TIM_PWM_Start+0xa2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003654:	e003      	b.n	800365e <HAL_TIM_PWM_Start+0xaa>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2201      	movs	r2, #1
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	4618      	mov	r0, r3
 8003668:	f001 f828 	bl	80046bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a2d      	ldr	r2, [pc, #180]	@ (8003728 <HAL_TIM_PWM_Start+0x174>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d004      	beq.n	8003680 <HAL_TIM_PWM_Start+0xcc>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a2c      	ldr	r2, [pc, #176]	@ (800372c <HAL_TIM_PWM_Start+0x178>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d101      	bne.n	8003684 <HAL_TIM_PWM_Start+0xd0>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <HAL_TIM_PWM_Start+0xd2>
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d007      	beq.n	800369a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a22      	ldr	r2, [pc, #136]	@ (8003728 <HAL_TIM_PWM_Start+0x174>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ac:	d01d      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003730 <HAL_TIM_PWM_Start+0x17c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d018      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003734 <HAL_TIM_PWM_Start+0x180>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003738 <HAL_TIM_PWM_Start+0x184>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00e      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a16      	ldr	r2, [pc, #88]	@ (800372c <HAL_TIM_PWM_Start+0x178>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d009      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a18      	ldr	r2, [pc, #96]	@ (800373c <HAL_TIM_PWM_Start+0x188>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d004      	beq.n	80036ea <HAL_TIM_PWM_Start+0x136>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a16      	ldr	r2, [pc, #88]	@ (8003740 <HAL_TIM_PWM_Start+0x18c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d111      	bne.n	800370e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0307 	and.w	r3, r3, #7
 80036f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2b06      	cmp	r3, #6
 80036fa:	d010      	beq.n	800371e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800370c:	e007      	b.n	800371e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f042 0201 	orr.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40010000 	.word	0x40010000
 800372c:	40010400 	.word	0x40010400
 8003730:	40000400 	.word	0x40000400
 8003734:	40000800 	.word	0x40000800
 8003738:	40000c00 	.word	0x40000c00
 800373c:	40014000 	.word	0x40014000
 8003740:	40001800 	.word	0x40001800

08003744 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e041      	b.n	80037da <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f839 	bl	80037e2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 fb80 	bl	8003e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d020      	beq.n	800385a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01b      	beq.n	800385a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f06f 0202 	mvn.w	r2, #2
 800382a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0303 	and.w	r3, r3, #3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fb02 	bl	8003e4a <HAL_TIM_IC_CaptureCallback>
 8003846:	e005      	b.n	8003854 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 faf4 	bl	8003e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fb05 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	d020      	beq.n	80038a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01b      	beq.n	80038a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f06f 0204 	mvn.w	r2, #4
 8003876:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fadc 	bl	8003e4a <HAL_TIM_IC_CaptureCallback>
 8003892:	e005      	b.n	80038a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 face 	bl	8003e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f000 fadf 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f003 0308 	and.w	r3, r3, #8
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d020      	beq.n	80038f2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01b      	beq.n	80038f2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f06f 0208 	mvn.w	r2, #8
 80038c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2204      	movs	r2, #4
 80038c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f000 fab6 	bl	8003e4a <HAL_TIM_IC_CaptureCallback>
 80038de:	e005      	b.n	80038ec <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 faa8 	bl	8003e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fab9 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f003 0310 	and.w	r3, r3, #16
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d020      	beq.n	800393e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0310 	and.w	r3, r3, #16
 8003902:	2b00      	cmp	r3, #0
 8003904:	d01b      	beq.n	800393e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f06f 0210 	mvn.w	r2, #16
 800390e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2208      	movs	r2, #8
 8003914:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003920:	2b00      	cmp	r3, #0
 8003922:	d003      	beq.n	800392c <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fa90 	bl	8003e4a <HAL_TIM_IC_CaptureCallback>
 800392a:	e005      	b.n	8003938 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fa82 	bl	8003e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 fa93 	bl	8003e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00c      	beq.n	8003962 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f06f 0201 	mvn.w	r2, #1
 800395a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 fa60 	bl	8003e22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00c      	beq.n	8003986 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800397e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 ff47 	bl	8004814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00c      	beq.n	80039aa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80039a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 fa64 	bl	8003e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00c      	beq.n	80039ce <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f06f 0220 	mvn.w	r2, #32
 80039c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 ff19 	bl	8004800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b086      	sub	sp, #24
 80039da:	af00      	add	r7, sp, #0
 80039dc:	60f8      	str	r0, [r7, #12]
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d101      	bne.n	80039f4 <HAL_TIM_IC_ConfigChannel+0x1e>
 80039f0:	2302      	movs	r3, #2
 80039f2:	e088      	b.n	8003b06 <HAL_TIM_IC_ConfigChannel+0x130>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d11b      	bne.n	8003a3a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003a12:	f000 fc8f 	bl	8004334 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699a      	ldr	r2, [r3, #24]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 020c 	bic.w	r2, r2, #12
 8003a24:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6999      	ldr	r1, [r3, #24]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	619a      	str	r2, [r3, #24]
 8003a38:	e060      	b.n	8003afc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d11c      	bne.n	8003a7a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003a50:	f000 fd13 	bl	800447a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	699a      	ldr	r2, [r3, #24]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003a62:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6999      	ldr	r1, [r3, #24]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	021a      	lsls	r2, r3, #8
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	619a      	str	r2, [r3, #24]
 8003a78:	e040      	b.n	8003afc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d11b      	bne.n	8003ab8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003a90:	f000 fd60 	bl	8004554 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69da      	ldr	r2, [r3, #28]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 020c 	bic.w	r2, r2, #12
 8003aa2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69d9      	ldr	r1, [r3, #28]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	61da      	str	r2, [r3, #28]
 8003ab6:	e021      	b.n	8003afc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b0c      	cmp	r3, #12
 8003abc:	d11c      	bne.n	8003af8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003ace:	f000 fd7d 	bl	80045cc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003ae0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69d9      	ldr	r1, [r3, #28]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	021a      	lsls	r2, r3, #8
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	61da      	str	r2, [r3, #28]
 8003af6:	e001      	b.n	8003afc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0ae      	b.n	8003c8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b0c      	cmp	r3, #12
 8003b3a:	f200 809f 	bhi.w	8003c7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8003b44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b44:	08003b79 	.word	0x08003b79
 8003b48:	08003c7d 	.word	0x08003c7d
 8003b4c:	08003c7d 	.word	0x08003c7d
 8003b50:	08003c7d 	.word	0x08003c7d
 8003b54:	08003bb9 	.word	0x08003bb9
 8003b58:	08003c7d 	.word	0x08003c7d
 8003b5c:	08003c7d 	.word	0x08003c7d
 8003b60:	08003c7d 	.word	0x08003c7d
 8003b64:	08003bfb 	.word	0x08003bfb
 8003b68:	08003c7d 	.word	0x08003c7d
 8003b6c:	08003c7d 	.word	0x08003c7d
 8003b70:	08003c7d 	.word	0x08003c7d
 8003b74:	08003c3b 	.word	0x08003c3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fa28 	bl	8003fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	699a      	ldr	r2, [r3, #24]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0208 	orr.w	r2, r2, #8
 8003b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	699a      	ldr	r2, [r3, #24]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0204 	bic.w	r2, r2, #4
 8003ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6999      	ldr	r1, [r3, #24]
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	691a      	ldr	r2, [r3, #16]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	619a      	str	r2, [r3, #24]
      break;
 8003bb6:	e064      	b.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fa78 	bl	80040b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699a      	ldr	r2, [r3, #24]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6999      	ldr	r1, [r3, #24]
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	021a      	lsls	r2, r3, #8
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	619a      	str	r2, [r3, #24]
      break;
 8003bf8:	e043      	b.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68b9      	ldr	r1, [r7, #8]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f000 facd 	bl	80041a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69da      	ldr	r2, [r3, #28]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0208 	orr.w	r2, r2, #8
 8003c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	69da      	ldr	r2, [r3, #28]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0204 	bic.w	r2, r2, #4
 8003c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69d9      	ldr	r1, [r3, #28]
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	691a      	ldr	r2, [r3, #16]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	61da      	str	r2, [r3, #28]
      break;
 8003c38:	e023      	b.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 fb21 	bl	8004288 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69da      	ldr	r2, [r3, #28]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	69da      	ldr	r2, [r3, #28]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69d9      	ldr	r1, [r3, #28]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	021a      	lsls	r2, r3, #8
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	61da      	str	r2, [r3, #28]
      break;
 8003c7a:	e002      	b.n	8003c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e0b4      	b.n	8003e1a <HAL_TIM_ConfigClockSource+0x186>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ce8:	d03e      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0xd4>
 8003cea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cee:	f200 8087 	bhi.w	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003cf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf6:	f000 8086 	beq.w	8003e06 <HAL_TIM_ConfigClockSource+0x172>
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cfe:	d87f      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d00:	2b70      	cmp	r3, #112	@ 0x70
 8003d02:	d01a      	beq.n	8003d3a <HAL_TIM_ConfigClockSource+0xa6>
 8003d04:	2b70      	cmp	r3, #112	@ 0x70
 8003d06:	d87b      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b60      	cmp	r3, #96	@ 0x60
 8003d0a:	d050      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0x11a>
 8003d0c:	2b60      	cmp	r3, #96	@ 0x60
 8003d0e:	d877      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b50      	cmp	r3, #80	@ 0x50
 8003d12:	d03c      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0xfa>
 8003d14:	2b50      	cmp	r3, #80	@ 0x50
 8003d16:	d873      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b40      	cmp	r3, #64	@ 0x40
 8003d1a:	d058      	beq.n	8003dce <HAL_TIM_ConfigClockSource+0x13a>
 8003d1c:	2b40      	cmp	r3, #64	@ 0x40
 8003d1e:	d86f      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d20:	2b30      	cmp	r3, #48	@ 0x30
 8003d22:	d064      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d24:	2b30      	cmp	r3, #48	@ 0x30
 8003d26:	d86b      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d060      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d867      	bhi.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d05c      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d34:	2b10      	cmp	r3, #16
 8003d36:	d05a      	beq.n	8003dee <HAL_TIM_ConfigClockSource+0x15a>
 8003d38:	e062      	b.n	8003e00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d4a:	f000 fc97 	bl	800467c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68ba      	ldr	r2, [r7, #8]
 8003d64:	609a      	str	r2, [r3, #8]
      break;
 8003d66:	e04f      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	f000 fc80 	bl	800467c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d8a:	609a      	str	r2, [r3, #8]
      break;
 8003d8c:	e03c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	f000 fb3e 	bl	800441c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	2150      	movs	r1, #80	@ 0x50
 8003da6:	4618      	mov	r0, r3
 8003da8:	f000 fc4d 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8003dac:	e02c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f000 fb9a 	bl	80044f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2160      	movs	r1, #96	@ 0x60
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f000 fc3d 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8003dcc:	e01c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dda:	461a      	mov	r2, r3
 8003ddc:	f000 fb1e 	bl	800441c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2140      	movs	r1, #64	@ 0x40
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fc2d 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8003dec:	e00c      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4619      	mov	r1, r3
 8003df8:	4610      	mov	r0, r2
 8003dfa:	f000 fc24 	bl	8004646 <TIM_ITRx_SetConfig>
      break;
 8003dfe:	e003      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e2a:	bf00      	nop
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b083      	sub	sp, #12
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a43      	ldr	r2, [pc, #268]	@ (8003fa8 <TIM_Base_SetConfig+0x120>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ea6:	d00f      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a40      	ldr	r2, [pc, #256]	@ (8003fac <TIM_Base_SetConfig+0x124>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d00b      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a3f      	ldr	r2, [pc, #252]	@ (8003fb0 <TIM_Base_SetConfig+0x128>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d007      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb4 <TIM_Base_SetConfig+0x12c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d003      	beq.n	8003ec8 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a3d      	ldr	r2, [pc, #244]	@ (8003fb8 <TIM_Base_SetConfig+0x130>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d108      	bne.n	8003eda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a32      	ldr	r2, [pc, #200]	@ (8003fa8 <TIM_Base_SetConfig+0x120>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02b      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ee8:	d027      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2f      	ldr	r2, [pc, #188]	@ (8003fac <TIM_Base_SetConfig+0x124>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d023      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb0 <TIM_Base_SetConfig+0x128>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01f      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb4 <TIM_Base_SetConfig+0x12c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01b      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2c      	ldr	r2, [pc, #176]	@ (8003fb8 <TIM_Base_SetConfig+0x130>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d017      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fbc <TIM_Base_SetConfig+0x134>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d013      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc0 <TIM_Base_SetConfig+0x138>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00f      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a29      	ldr	r2, [pc, #164]	@ (8003fc4 <TIM_Base_SetConfig+0x13c>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00b      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a28      	ldr	r2, [pc, #160]	@ (8003fc8 <TIM_Base_SetConfig+0x140>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a27      	ldr	r2, [pc, #156]	@ (8003fcc <TIM_Base_SetConfig+0x144>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a26      	ldr	r2, [pc, #152]	@ (8003fd0 <TIM_Base_SetConfig+0x148>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d108      	bne.n	8003f4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	4313      	orrs	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a0e      	ldr	r2, [pc, #56]	@ (8003fa8 <TIM_Base_SetConfig+0x120>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d003      	beq.n	8003f7a <TIM_Base_SetConfig+0xf2>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a10      	ldr	r2, [pc, #64]	@ (8003fb8 <TIM_Base_SetConfig+0x130>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d103      	bne.n	8003f82 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f043 0204 	orr.w	r2, r3, #4
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	601a      	str	r2, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	40010000 	.word	0x40010000
 8003fac:	40000400 	.word	0x40000400
 8003fb0:	40000800 	.word	0x40000800
 8003fb4:	40000c00 	.word	0x40000c00
 8003fb8:	40010400 	.word	0x40010400
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800
 8003fc8:	40001800 	.word	0x40001800
 8003fcc:	40001c00 	.word	0x40001c00
 8003fd0:	40002000 	.word	0x40002000

08003fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	f023 0201 	bic.w	r2, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 0303 	bic.w	r3, r3, #3
 800400a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4313      	orrs	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f023 0302 	bic.w	r3, r3, #2
 800401c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a20      	ldr	r2, [pc, #128]	@ (80040ac <TIM_OC1_SetConfig+0xd8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d003      	beq.n	8004038 <TIM_OC1_SetConfig+0x64>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a1f      	ldr	r2, [pc, #124]	@ (80040b0 <TIM_OC1_SetConfig+0xdc>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d10c      	bne.n	8004052 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f023 0308 	bic.w	r3, r3, #8
 800403e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a15      	ldr	r2, [pc, #84]	@ (80040ac <TIM_OC1_SetConfig+0xd8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d003      	beq.n	8004062 <TIM_OC1_SetConfig+0x8e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a14      	ldr	r2, [pc, #80]	@ (80040b0 <TIM_OC1_SetConfig+0xdc>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d111      	bne.n	8004086 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004068:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004070:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4313      	orrs	r3, r2
 8004084:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	621a      	str	r2, [r3, #32]
}
 80040a0:	bf00      	nop
 80040a2:	371c      	adds	r7, #28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40010400 	.word	0x40010400

080040b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b087      	sub	sp, #28
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f023 0210 	bic.w	r2, r3, #16
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f023 0320 	bic.w	r3, r3, #32
 80040fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a22      	ldr	r2, [pc, #136]	@ (8004198 <TIM_OC2_SetConfig+0xe4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d003      	beq.n	800411c <TIM_OC2_SetConfig+0x68>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a21      	ldr	r2, [pc, #132]	@ (800419c <TIM_OC2_SetConfig+0xe8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d10d      	bne.n	8004138 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004136:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a17      	ldr	r2, [pc, #92]	@ (8004198 <TIM_OC2_SetConfig+0xe4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_OC2_SetConfig+0x94>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a16      	ldr	r2, [pc, #88]	@ (800419c <TIM_OC2_SetConfig+0xe8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d113      	bne.n	8004170 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800414e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40010000 	.word	0x40010000
 800419c:	40010400 	.word	0x40010400

080041a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b087      	sub	sp, #28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0303 	bic.w	r3, r3, #3
 80041d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a21      	ldr	r2, [pc, #132]	@ (8004280 <TIM_OC3_SetConfig+0xe0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d003      	beq.n	8004206 <TIM_OC3_SetConfig+0x66>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a20      	ldr	r2, [pc, #128]	@ (8004284 <TIM_OC3_SetConfig+0xe4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d10d      	bne.n	8004222 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800420c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a16      	ldr	r2, [pc, #88]	@ (8004280 <TIM_OC3_SetConfig+0xe0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d003      	beq.n	8004232 <TIM_OC3_SetConfig+0x92>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a15      	ldr	r2, [pc, #84]	@ (8004284 <TIM_OC3_SetConfig+0xe4>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d113      	bne.n	800425a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4313      	orrs	r3, r2
 800424c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	693a      	ldr	r2, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	621a      	str	r2, [r3, #32]
}
 8004274:	bf00      	nop
 8004276:	371c      	adds	r7, #28
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	40010000 	.word	0x40010000
 8004284:	40010400 	.word	0x40010400

08004288 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	021b      	lsls	r3, r3, #8
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	031b      	lsls	r3, r3, #12
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a12      	ldr	r2, [pc, #72]	@ (800432c <TIM_OC4_SetConfig+0xa4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d003      	beq.n	80042f0 <TIM_OC4_SetConfig+0x68>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a11      	ldr	r2, [pc, #68]	@ (8004330 <TIM_OC4_SetConfig+0xa8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d109      	bne.n	8004304 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	019b      	lsls	r3, r3, #6
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	697a      	ldr	r2, [r7, #20]
 8004308:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	621a      	str	r2, [r3, #32]
}
 800431e:	bf00      	nop
 8004320:	371c      	adds	r7, #28
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000
 8004330:	40010400 	.word	0x40010400

08004334 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004334:	b480      	push	{r7}
 8004336:	b087      	sub	sp, #28
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f023 0201 	bic.w	r2, r3, #1
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4a28      	ldr	r2, [pc, #160]	@ (8004400 <TIM_TI1_SetConfig+0xcc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01b      	beq.n	800439a <TIM_TI1_SetConfig+0x66>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004368:	d017      	beq.n	800439a <TIM_TI1_SetConfig+0x66>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4a25      	ldr	r2, [pc, #148]	@ (8004404 <TIM_TI1_SetConfig+0xd0>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d013      	beq.n	800439a <TIM_TI1_SetConfig+0x66>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4a24      	ldr	r2, [pc, #144]	@ (8004408 <TIM_TI1_SetConfig+0xd4>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00f      	beq.n	800439a <TIM_TI1_SetConfig+0x66>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4a23      	ldr	r2, [pc, #140]	@ (800440c <TIM_TI1_SetConfig+0xd8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00b      	beq.n	800439a <TIM_TI1_SetConfig+0x66>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4a22      	ldr	r2, [pc, #136]	@ (8004410 <TIM_TI1_SetConfig+0xdc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <TIM_TI1_SetConfig+0x66>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4a21      	ldr	r2, [pc, #132]	@ (8004414 <TIM_TI1_SetConfig+0xe0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_TI1_SetConfig+0x66>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4a20      	ldr	r2, [pc, #128]	@ (8004418 <TIM_TI1_SetConfig+0xe4>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d101      	bne.n	800439e <TIM_TI1_SetConfig+0x6a>
 800439a:	2301      	movs	r3, #1
 800439c:	e000      	b.n	80043a0 <TIM_TI1_SetConfig+0x6c>
 800439e:	2300      	movs	r3, #0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0303 	bic.w	r3, r3, #3
 80043aa:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80043ac:	697a      	ldr	r2, [r7, #20]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e003      	b.n	80043be <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f043 0301 	orr.w	r3, r3, #1
 80043bc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f023 030a 	bic.w	r3, r3, #10
 80043d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f003 030a 	and.w	r3, r3, #10
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000
 8004404:	40000400 	.word	0x40000400
 8004408:	40000800 	.word	0x40000800
 800440c:	40000c00 	.word	0x40000c00
 8004410:	40010400 	.word	0x40010400
 8004414:	40014000 	.word	0x40014000
 8004418:	40001800 	.word	0x40001800

0800441c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800441c:	b480      	push	{r7}
 800441e:	b087      	sub	sp, #28
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	f023 0201 	bic.w	r2, r3, #1
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4313      	orrs	r3, r2
 8004450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f023 030a 	bic.w	r3, r3, #10
 8004458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	621a      	str	r2, [r3, #32]
}
 800446e:	bf00      	nop
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800447a:	b480      	push	{r7}
 800447c:	b087      	sub	sp, #28
 800447e:	af00      	add	r7, sp, #0
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0210 	bic.w	r2, r3, #16
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	021b      	lsls	r3, r3, #8
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	031b      	lsls	r3, r3, #12
 80044be:	b29b      	uxth	r3, r3
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044cc:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	621a      	str	r2, [r3, #32]
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0210 	bic.w	r2, r3, #16
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800451e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	031b      	lsls	r3, r3, #12
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004530:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	011b      	lsls	r3, r3, #4
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	697a      	ldr	r2, [r7, #20]
 8004546:	621a      	str	r2, [r3, #32]
}
 8004548:	bf00      	nop
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f023 0303 	bic.w	r3, r3, #3
 8004580:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4313      	orrs	r3, r2
 8004588:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004590:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	b2db      	uxtb	r3, r3
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80045a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	621a      	str	r2, [r3, #32]
}
 80045c0:	bf00      	nop
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
 80045d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	021b      	lsls	r3, r3, #8
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800460a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	031b      	lsls	r3, r3, #12
 8004610:	b29b      	uxth	r3, r3
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800461e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	031b      	lsls	r3, r3, #12
 8004624:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004646:	b480      	push	{r7}
 8004648:	b085      	sub	sp, #20
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	f043 0307 	orr.w	r3, r3, #7
 8004668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	609a      	str	r2, [r3, #8]
}
 8004670:	bf00      	nop
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
 8004688:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004696:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	021a      	lsls	r2, r3, #8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	431a      	orrs	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	697a      	ldr	r2, [r7, #20]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	609a      	str	r2, [r3, #8]
}
 80046b0:	bf00      	nop
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 031f 	and.w	r3, r3, #31
 80046ce:	2201      	movs	r2, #1
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a1a      	ldr	r2, [r3, #32]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	43db      	mvns	r3, r3
 80046de:	401a      	ands	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6a1a      	ldr	r2, [r3, #32]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	fa01 f303 	lsl.w	r3, r1, r3
 80046f4:	431a      	orrs	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	621a      	str	r2, [r3, #32]
}
 80046fa:	bf00      	nop
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800471c:	2302      	movs	r3, #2
 800471e:	e05a      	b.n	80047d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a21      	ldr	r2, [pc, #132]	@ (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d022      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476c:	d01d      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1d      	ldr	r2, [pc, #116]	@ (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d018      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a1b      	ldr	r2, [pc, #108]	@ (80047ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1a      	ldr	r2, [pc, #104]	@ (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00e      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a18      	ldr	r2, [pc, #96]	@ (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d009      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a17      	ldr	r2, [pc, #92]	@ (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a15      	ldr	r2, [pc, #84]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d10c      	bne.n	80047c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3714      	adds	r7, #20
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40000400 	.word	0x40000400
 80047ec:	40000800 	.word	0x40000800
 80047f0:	40000c00 	.word	0x40000c00
 80047f4:	40010400 	.word	0x40010400
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40001800 	.word	0x40001800

08004800 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e042      	b.n	80048c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd f870 	bl	8001934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2224      	movs	r2, #36	@ 0x24
 8004858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68da      	ldr	r2, [r3, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800486a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f973 	bl	8004b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004880:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695a      	ldr	r2, [r3, #20]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004890:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08a      	sub	sp, #40	@ 0x28
 80048cc:	af02      	add	r7, sp, #8
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048d8:	2300      	movs	r3, #0
 80048da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	d175      	bne.n	80049d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <HAL_UART_Transmit+0x2c>
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e06e      	b.n	80049d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2221      	movs	r2, #33	@ 0x21
 8004902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004906:	f7fd f977 	bl	8001bf8 <HAL_GetTick>
 800490a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	88fa      	ldrh	r2, [r7, #6]
 8004916:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004920:	d108      	bne.n	8004934 <HAL_UART_Transmit+0x6c>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d104      	bne.n	8004934 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	e003      	b.n	800493c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004938:	2300      	movs	r3, #0
 800493a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800493c:	e02e      	b.n	800499c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	2180      	movs	r1, #128	@ 0x80
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f848 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2220      	movs	r2, #32
 8004958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e03a      	b.n	80049d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10b      	bne.n	800497e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004974:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	3302      	adds	r3, #2
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e007      	b.n	800498e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	781a      	ldrb	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	3301      	adds	r3, #1
 800498c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004992:	b29b      	uxth	r3, r3
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1cb      	bne.n	800493e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2140      	movs	r1, #64	@ 0x40
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 f814 	bl	80049de <UART_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e006      	b.n	80049d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2220      	movs	r2, #32
 80049cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3720      	adds	r7, #32
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b086      	sub	sp, #24
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	60f8      	str	r0, [r7, #12]
 80049e6:	60b9      	str	r1, [r7, #8]
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	4613      	mov	r3, r2
 80049ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ee:	e03b      	b.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f6:	d037      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f8:	f7fd f8fe 	bl	8001bf8 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	6a3a      	ldr	r2, [r7, #32]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d302      	bcc.n	8004a0e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e03a      	b.n	8004a88 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d023      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b80      	cmp	r3, #128	@ 0x80
 8004a24:	d020      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b40      	cmp	r3, #64	@ 0x40
 8004a2a:	d01d      	beq.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d116      	bne.n	8004a68 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	617b      	str	r3, [r7, #20]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f81d 	bl	8004a90 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2208      	movs	r2, #8
 8004a5a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e00f      	b.n	8004a88 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	4013      	ands	r3, r2
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d0b4      	beq.n	80049f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b095      	sub	sp, #84	@ 0x54
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ab8:	643a      	str	r2, [r7, #64]	@ 0x40
 8004aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004abe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e5      	bne.n	8004a98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3314      	adds	r3, #20
 8004ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3314      	adds	r3, #20
 8004aea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004aec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e5      	bne.n	8004acc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d119      	bne.n	8004b3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	e853 3f00 	ldrex	r3, [r3]
 8004b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f023 0310 	bic.w	r3, r3, #16
 8004b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	330c      	adds	r3, #12
 8004b26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b28:	61ba      	str	r2, [r7, #24]
 8004b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6979      	ldr	r1, [r7, #20]
 8004b2e:	69ba      	ldr	r2, [r7, #24]
 8004b30:	e841 2300 	strex	r3, r2, [r1]
 8004b34:	613b      	str	r3, [r7, #16]
   return(result);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1e5      	bne.n	8004b08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004b4a:	bf00      	nop
 8004b4c:	3754      	adds	r7, #84	@ 0x54
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b5c:	b0c0      	sub	sp, #256	@ 0x100
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	68d9      	ldr	r1, [r3, #12]
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	ea40 0301 	orr.w	r3, r0, r1
 8004b80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bb0:	f021 010c 	bic.w	r1, r1, #12
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd2:	6999      	ldr	r1, [r3, #24]
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	ea40 0301 	orr.w	r3, r0, r1
 8004bde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b8f      	ldr	r3, [pc, #572]	@ (8004e24 <UART_SetConfig+0x2cc>)
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d005      	beq.n	8004bf8 <UART_SetConfig+0xa0>
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4b8d      	ldr	r3, [pc, #564]	@ (8004e28 <UART_SetConfig+0x2d0>)
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d104      	bne.n	8004c02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fd fc3e 	bl	8002478 <HAL_RCC_GetPCLK2Freq>
 8004bfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c00:	e003      	b.n	8004c0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c02:	f7fd fc25 	bl	8002450 <HAL_RCC_GetPCLK1Freq>
 8004c06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c14:	f040 810c 	bne.w	8004e30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	1891      	adds	r1, r2, r2
 8004c30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c32:	415b      	adcs	r3, r3
 8004c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	eb12 0801 	adds.w	r8, r2, r1
 8004c40:	4629      	mov	r1, r5
 8004c42:	eb43 0901 	adc.w	r9, r3, r1
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c5a:	4690      	mov	r8, r2
 8004c5c:	4699      	mov	r9, r3
 8004c5e:	4623      	mov	r3, r4
 8004c60:	eb18 0303 	adds.w	r3, r8, r3
 8004c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c68:	462b      	mov	r3, r5
 8004c6a:	eb49 0303 	adc.w	r3, r9, r3
 8004c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c86:	460b      	mov	r3, r1
 8004c88:	18db      	adds	r3, r3, r3
 8004c8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	eb42 0303 	adc.w	r3, r2, r3
 8004c92:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c9c:	f7fb fb10 	bl	80002c0 <__aeabi_uldivmod>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4b61      	ldr	r3, [pc, #388]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	011c      	lsls	r4, r3, #4
 8004cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	1891      	adds	r1, r2, r2
 8004cc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cc8:	415b      	adcs	r3, r3
 8004cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ccc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	eb12 0a01 	adds.w	sl, r2, r1
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ce8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf0:	4692      	mov	sl, r2
 8004cf2:	469b      	mov	fp, r3
 8004cf4:	4643      	mov	r3, r8
 8004cf6:	eb1a 0303 	adds.w	r3, sl, r3
 8004cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	eb4b 0303 	adc.w	r3, fp, r3
 8004d04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	18db      	adds	r3, r3, r3
 8004d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d22:	4613      	mov	r3, r2
 8004d24:	eb42 0303 	adc.w	r3, r2, r3
 8004d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d32:	f7fb fac5 	bl	80002c0 <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	2264      	movs	r2, #100	@ 0x64
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	1acb      	subs	r3, r1, r3
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d52:	4b36      	ldr	r3, [pc, #216]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004d54:	fba3 2302 	umull	r2, r3, r3, r2
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d60:	441c      	add	r4, r3
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d84:	4641      	mov	r1, r8
 8004d86:	1851      	adds	r1, r2, r1
 8004d88:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	414b      	adcs	r3, r1
 8004d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	00cb      	lsls	r3, r1, #3
 8004da0:	4651      	mov	r1, sl
 8004da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da6:	4651      	mov	r1, sl
 8004da8:	00ca      	lsls	r2, r1, #3
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	4642      	mov	r2, r8
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004db8:	464b      	mov	r3, r9
 8004dba:	460a      	mov	r2, r1
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dd8:	460b      	mov	r3, r1
 8004dda:	18db      	adds	r3, r3, r3
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dde:	4613      	mov	r3, r2
 8004de0:	eb42 0303 	adc.w	r3, r2, r3
 8004de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004de6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dee:	f7fb fa67 	bl	80002c0 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004df8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	2164      	movs	r1, #100	@ 0x64
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	3332      	adds	r3, #50	@ 0x32
 8004e0a:	4a08      	ldr	r2, [pc, #32]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	f003 0207 	and.w	r2, r3, #7
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4422      	add	r2, r4
 8004e1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e20:	e106      	b.n	8005030 <UART_SetConfig+0x4d8>
 8004e22:	bf00      	nop
 8004e24:	40011000 	.word	0x40011000
 8004e28:	40011400 	.word	0x40011400
 8004e2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e34:	2200      	movs	r2, #0
 8004e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e42:	4642      	mov	r2, r8
 8004e44:	464b      	mov	r3, r9
 8004e46:	1891      	adds	r1, r2, r2
 8004e48:	6239      	str	r1, [r7, #32]
 8004e4a:	415b      	adcs	r3, r3
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e52:	4641      	mov	r1, r8
 8004e54:	1854      	adds	r4, r2, r1
 8004e56:	4649      	mov	r1, r9
 8004e58:	eb43 0501 	adc.w	r5, r3, r1
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	00eb      	lsls	r3, r5, #3
 8004e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e6a:	00e2      	lsls	r2, r4, #3
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	461d      	mov	r5, r3
 8004e70:	4643      	mov	r3, r8
 8004e72:	18e3      	adds	r3, r4, r3
 8004e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e78:	464b      	mov	r3, r9
 8004e7a:	eb45 0303 	adc.w	r3, r5, r3
 8004e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	008b      	lsls	r3, r1, #2
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	008a      	lsls	r2, r1, #2
 8004eac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004eb0:	f7fb fa06 	bl	80002c0 <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4b60      	ldr	r3, [pc, #384]	@ (800503c <UART_SetConfig+0x4e4>)
 8004eba:	fba3 2302 	umull	r2, r3, r3, r2
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	011c      	lsls	r4, r3, #4
 8004ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ecc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ed0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	1891      	adds	r1, r2, r2
 8004eda:	61b9      	str	r1, [r7, #24]
 8004edc:	415b      	adcs	r3, r3
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	1851      	adds	r1, r2, r1
 8004ee8:	6139      	str	r1, [r7, #16]
 8004eea:	4649      	mov	r1, r9
 8004eec:	414b      	adcs	r3, r1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004efc:	4659      	mov	r1, fp
 8004efe:	00cb      	lsls	r3, r1, #3
 8004f00:	4651      	mov	r1, sl
 8004f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f06:	4651      	mov	r1, sl
 8004f08:	00ca      	lsls	r2, r1, #3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4642      	mov	r2, r8
 8004f12:	189b      	adds	r3, r3, r2
 8004f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f18:	464b      	mov	r3, r9
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	eb42 0303 	adc.w	r3, r2, r3
 8004f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	008b      	lsls	r3, r1, #2
 8004f40:	4641      	mov	r1, r8
 8004f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f46:	4641      	mov	r1, r8
 8004f48:	008a      	lsls	r2, r1, #2
 8004f4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f4e:	f7fb f9b7 	bl	80002c0 <__aeabi_uldivmod>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	4b38      	ldr	r3, [pc, #224]	@ (800503c <UART_SetConfig+0x4e4>)
 8004f5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	2264      	movs	r2, #100	@ 0x64
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	1acb      	subs	r3, r1, r3
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	3332      	adds	r3, #50	@ 0x32
 8004f6c:	4a33      	ldr	r2, [pc, #204]	@ (800503c <UART_SetConfig+0x4e4>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f78:	441c      	add	r4, r3
 8004f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f7e:	2200      	movs	r2, #0
 8004f80:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f82:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	1891      	adds	r1, r2, r2
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	415b      	adcs	r3, r3
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f98:	4641      	mov	r1, r8
 8004f9a:	1851      	adds	r1, r2, r1
 8004f9c:	6039      	str	r1, [r7, #0]
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	414b      	adcs	r3, r1
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	00cb      	lsls	r3, r1, #3
 8004fb4:	4651      	mov	r1, sl
 8004fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fba:	4651      	mov	r1, sl
 8004fbc:	00ca      	lsls	r2, r1, #3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	189b      	adds	r3, r3, r2
 8004fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fca:	464b      	mov	r3, r9
 8004fcc:	460a      	mov	r2, r1
 8004fce:	eb42 0303 	adc.w	r3, r2, r3
 8004fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fde:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fec:	4649      	mov	r1, r9
 8004fee:	008b      	lsls	r3, r1, #2
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	008a      	lsls	r2, r1, #2
 8004ffa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ffe:	f7fb f95f 	bl	80002c0 <__aeabi_uldivmod>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <UART_SetConfig+0x4e4>)
 8005008:	fba3 1302 	umull	r1, r3, r3, r2
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	2164      	movs	r1, #100	@ 0x64
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	3332      	adds	r3, #50	@ 0x32
 800501a:	4a08      	ldr	r2, [pc, #32]	@ (800503c <UART_SetConfig+0x4e4>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	f003 020f 	and.w	r2, r3, #15
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4422      	add	r2, r4
 800502e:	609a      	str	r2, [r3, #8]
}
 8005030:	bf00      	nop
 8005032:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005036:	46bd      	mov	sp, r7
 8005038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800503c:	51eb851f 	.word	0x51eb851f

08005040 <siprintf>:
 8005040:	b40e      	push	{r1, r2, r3}
 8005042:	b510      	push	{r4, lr}
 8005044:	b09d      	sub	sp, #116	@ 0x74
 8005046:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005048:	9002      	str	r0, [sp, #8]
 800504a:	9006      	str	r0, [sp, #24]
 800504c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005050:	480a      	ldr	r0, [pc, #40]	@ (800507c <siprintf+0x3c>)
 8005052:	9107      	str	r1, [sp, #28]
 8005054:	9104      	str	r1, [sp, #16]
 8005056:	490a      	ldr	r1, [pc, #40]	@ (8005080 <siprintf+0x40>)
 8005058:	f853 2b04 	ldr.w	r2, [r3], #4
 800505c:	9105      	str	r1, [sp, #20]
 800505e:	2400      	movs	r4, #0
 8005060:	a902      	add	r1, sp, #8
 8005062:	6800      	ldr	r0, [r0, #0]
 8005064:	9301      	str	r3, [sp, #4]
 8005066:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005068:	f000 f9a2 	bl	80053b0 <_svfiprintf_r>
 800506c:	9b02      	ldr	r3, [sp, #8]
 800506e:	701c      	strb	r4, [r3, #0]
 8005070:	b01d      	add	sp, #116	@ 0x74
 8005072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005076:	b003      	add	sp, #12
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000010 	.word	0x20000010
 8005080:	ffff0208 	.word	0xffff0208

08005084 <memset>:
 8005084:	4402      	add	r2, r0
 8005086:	4603      	mov	r3, r0
 8005088:	4293      	cmp	r3, r2
 800508a:	d100      	bne.n	800508e <memset+0xa>
 800508c:	4770      	bx	lr
 800508e:	f803 1b01 	strb.w	r1, [r3], #1
 8005092:	e7f9      	b.n	8005088 <memset+0x4>

08005094 <__errno>:
 8005094:	4b01      	ldr	r3, [pc, #4]	@ (800509c <__errno+0x8>)
 8005096:	6818      	ldr	r0, [r3, #0]
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20000010 	.word	0x20000010

080050a0 <__libc_init_array>:
 80050a0:	b570      	push	{r4, r5, r6, lr}
 80050a2:	4d0d      	ldr	r5, [pc, #52]	@ (80050d8 <__libc_init_array+0x38>)
 80050a4:	4c0d      	ldr	r4, [pc, #52]	@ (80050dc <__libc_init_array+0x3c>)
 80050a6:	1b64      	subs	r4, r4, r5
 80050a8:	10a4      	asrs	r4, r4, #2
 80050aa:	2600      	movs	r6, #0
 80050ac:	42a6      	cmp	r6, r4
 80050ae:	d109      	bne.n	80050c4 <__libc_init_array+0x24>
 80050b0:	4d0b      	ldr	r5, [pc, #44]	@ (80050e0 <__libc_init_array+0x40>)
 80050b2:	4c0c      	ldr	r4, [pc, #48]	@ (80050e4 <__libc_init_array+0x44>)
 80050b4:	f000 fc64 	bl	8005980 <_init>
 80050b8:	1b64      	subs	r4, r4, r5
 80050ba:	10a4      	asrs	r4, r4, #2
 80050bc:	2600      	movs	r6, #0
 80050be:	42a6      	cmp	r6, r4
 80050c0:	d105      	bne.n	80050ce <__libc_init_array+0x2e>
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
 80050c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c8:	4798      	blx	r3
 80050ca:	3601      	adds	r6, #1
 80050cc:	e7ee      	b.n	80050ac <__libc_init_array+0xc>
 80050ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80050d2:	4798      	blx	r3
 80050d4:	3601      	adds	r6, #1
 80050d6:	e7f2      	b.n	80050be <__libc_init_array+0x1e>
 80050d8:	08005a14 	.word	0x08005a14
 80050dc:	08005a14 	.word	0x08005a14
 80050e0:	08005a14 	.word	0x08005a14
 80050e4:	08005a18 	.word	0x08005a18

080050e8 <__retarget_lock_acquire_recursive>:
 80050e8:	4770      	bx	lr

080050ea <__retarget_lock_release_recursive>:
 80050ea:	4770      	bx	lr

080050ec <memcpy>:
 80050ec:	440a      	add	r2, r1
 80050ee:	4291      	cmp	r1, r2
 80050f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80050f4:	d100      	bne.n	80050f8 <memcpy+0xc>
 80050f6:	4770      	bx	lr
 80050f8:	b510      	push	{r4, lr}
 80050fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005102:	4291      	cmp	r1, r2
 8005104:	d1f9      	bne.n	80050fa <memcpy+0xe>
 8005106:	bd10      	pop	{r4, pc}

08005108 <_free_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4605      	mov	r5, r0
 800510c:	2900      	cmp	r1, #0
 800510e:	d041      	beq.n	8005194 <_free_r+0x8c>
 8005110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005114:	1f0c      	subs	r4, r1, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	bfb8      	it	lt
 800511a:	18e4      	addlt	r4, r4, r3
 800511c:	f000 f8e0 	bl	80052e0 <__malloc_lock>
 8005120:	4a1d      	ldr	r2, [pc, #116]	@ (8005198 <_free_r+0x90>)
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	b933      	cbnz	r3, 8005134 <_free_r+0x2c>
 8005126:	6063      	str	r3, [r4, #4]
 8005128:	6014      	str	r4, [r2, #0]
 800512a:	4628      	mov	r0, r5
 800512c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005130:	f000 b8dc 	b.w	80052ec <__malloc_unlock>
 8005134:	42a3      	cmp	r3, r4
 8005136:	d908      	bls.n	800514a <_free_r+0x42>
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	1821      	adds	r1, r4, r0
 800513c:	428b      	cmp	r3, r1
 800513e:	bf01      	itttt	eq
 8005140:	6819      	ldreq	r1, [r3, #0]
 8005142:	685b      	ldreq	r3, [r3, #4]
 8005144:	1809      	addeq	r1, r1, r0
 8005146:	6021      	streq	r1, [r4, #0]
 8005148:	e7ed      	b.n	8005126 <_free_r+0x1e>
 800514a:	461a      	mov	r2, r3
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	b10b      	cbz	r3, 8005154 <_free_r+0x4c>
 8005150:	42a3      	cmp	r3, r4
 8005152:	d9fa      	bls.n	800514a <_free_r+0x42>
 8005154:	6811      	ldr	r1, [r2, #0]
 8005156:	1850      	adds	r0, r2, r1
 8005158:	42a0      	cmp	r0, r4
 800515a:	d10b      	bne.n	8005174 <_free_r+0x6c>
 800515c:	6820      	ldr	r0, [r4, #0]
 800515e:	4401      	add	r1, r0
 8005160:	1850      	adds	r0, r2, r1
 8005162:	4283      	cmp	r3, r0
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	d1e0      	bne.n	800512a <_free_r+0x22>
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	6053      	str	r3, [r2, #4]
 800516e:	4408      	add	r0, r1
 8005170:	6010      	str	r0, [r2, #0]
 8005172:	e7da      	b.n	800512a <_free_r+0x22>
 8005174:	d902      	bls.n	800517c <_free_r+0x74>
 8005176:	230c      	movs	r3, #12
 8005178:	602b      	str	r3, [r5, #0]
 800517a:	e7d6      	b.n	800512a <_free_r+0x22>
 800517c:	6820      	ldr	r0, [r4, #0]
 800517e:	1821      	adds	r1, r4, r0
 8005180:	428b      	cmp	r3, r1
 8005182:	bf04      	itt	eq
 8005184:	6819      	ldreq	r1, [r3, #0]
 8005186:	685b      	ldreq	r3, [r3, #4]
 8005188:	6063      	str	r3, [r4, #4]
 800518a:	bf04      	itt	eq
 800518c:	1809      	addeq	r1, r1, r0
 800518e:	6021      	streq	r1, [r4, #0]
 8005190:	6054      	str	r4, [r2, #4]
 8005192:	e7ca      	b.n	800512a <_free_r+0x22>
 8005194:	bd38      	pop	{r3, r4, r5, pc}
 8005196:	bf00      	nop
 8005198:	20000330 	.word	0x20000330

0800519c <sbrk_aligned>:
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	4e0f      	ldr	r6, [pc, #60]	@ (80051dc <sbrk_aligned+0x40>)
 80051a0:	460c      	mov	r4, r1
 80051a2:	6831      	ldr	r1, [r6, #0]
 80051a4:	4605      	mov	r5, r0
 80051a6:	b911      	cbnz	r1, 80051ae <sbrk_aligned+0x12>
 80051a8:	f000 fba4 	bl	80058f4 <_sbrk_r>
 80051ac:	6030      	str	r0, [r6, #0]
 80051ae:	4621      	mov	r1, r4
 80051b0:	4628      	mov	r0, r5
 80051b2:	f000 fb9f 	bl	80058f4 <_sbrk_r>
 80051b6:	1c43      	adds	r3, r0, #1
 80051b8:	d103      	bne.n	80051c2 <sbrk_aligned+0x26>
 80051ba:	f04f 34ff 	mov.w	r4, #4294967295
 80051be:	4620      	mov	r0, r4
 80051c0:	bd70      	pop	{r4, r5, r6, pc}
 80051c2:	1cc4      	adds	r4, r0, #3
 80051c4:	f024 0403 	bic.w	r4, r4, #3
 80051c8:	42a0      	cmp	r0, r4
 80051ca:	d0f8      	beq.n	80051be <sbrk_aligned+0x22>
 80051cc:	1a21      	subs	r1, r4, r0
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 fb90 	bl	80058f4 <_sbrk_r>
 80051d4:	3001      	adds	r0, #1
 80051d6:	d1f2      	bne.n	80051be <sbrk_aligned+0x22>
 80051d8:	e7ef      	b.n	80051ba <sbrk_aligned+0x1e>
 80051da:	bf00      	nop
 80051dc:	2000032c 	.word	0x2000032c

080051e0 <_malloc_r>:
 80051e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051e4:	1ccd      	adds	r5, r1, #3
 80051e6:	f025 0503 	bic.w	r5, r5, #3
 80051ea:	3508      	adds	r5, #8
 80051ec:	2d0c      	cmp	r5, #12
 80051ee:	bf38      	it	cc
 80051f0:	250c      	movcc	r5, #12
 80051f2:	2d00      	cmp	r5, #0
 80051f4:	4606      	mov	r6, r0
 80051f6:	db01      	blt.n	80051fc <_malloc_r+0x1c>
 80051f8:	42a9      	cmp	r1, r5
 80051fa:	d904      	bls.n	8005206 <_malloc_r+0x26>
 80051fc:	230c      	movs	r3, #12
 80051fe:	6033      	str	r3, [r6, #0]
 8005200:	2000      	movs	r0, #0
 8005202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005206:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052dc <_malloc_r+0xfc>
 800520a:	f000 f869 	bl	80052e0 <__malloc_lock>
 800520e:	f8d8 3000 	ldr.w	r3, [r8]
 8005212:	461c      	mov	r4, r3
 8005214:	bb44      	cbnz	r4, 8005268 <_malloc_r+0x88>
 8005216:	4629      	mov	r1, r5
 8005218:	4630      	mov	r0, r6
 800521a:	f7ff ffbf 	bl	800519c <sbrk_aligned>
 800521e:	1c43      	adds	r3, r0, #1
 8005220:	4604      	mov	r4, r0
 8005222:	d158      	bne.n	80052d6 <_malloc_r+0xf6>
 8005224:	f8d8 4000 	ldr.w	r4, [r8]
 8005228:	4627      	mov	r7, r4
 800522a:	2f00      	cmp	r7, #0
 800522c:	d143      	bne.n	80052b6 <_malloc_r+0xd6>
 800522e:	2c00      	cmp	r4, #0
 8005230:	d04b      	beq.n	80052ca <_malloc_r+0xea>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	4639      	mov	r1, r7
 8005236:	4630      	mov	r0, r6
 8005238:	eb04 0903 	add.w	r9, r4, r3
 800523c:	f000 fb5a 	bl	80058f4 <_sbrk_r>
 8005240:	4581      	cmp	r9, r0
 8005242:	d142      	bne.n	80052ca <_malloc_r+0xea>
 8005244:	6821      	ldr	r1, [r4, #0]
 8005246:	1a6d      	subs	r5, r5, r1
 8005248:	4629      	mov	r1, r5
 800524a:	4630      	mov	r0, r6
 800524c:	f7ff ffa6 	bl	800519c <sbrk_aligned>
 8005250:	3001      	adds	r0, #1
 8005252:	d03a      	beq.n	80052ca <_malloc_r+0xea>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	442b      	add	r3, r5
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	f8d8 3000 	ldr.w	r3, [r8]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	bb62      	cbnz	r2, 80052bc <_malloc_r+0xdc>
 8005262:	f8c8 7000 	str.w	r7, [r8]
 8005266:	e00f      	b.n	8005288 <_malloc_r+0xa8>
 8005268:	6822      	ldr	r2, [r4, #0]
 800526a:	1b52      	subs	r2, r2, r5
 800526c:	d420      	bmi.n	80052b0 <_malloc_r+0xd0>
 800526e:	2a0b      	cmp	r2, #11
 8005270:	d917      	bls.n	80052a2 <_malloc_r+0xc2>
 8005272:	1961      	adds	r1, r4, r5
 8005274:	42a3      	cmp	r3, r4
 8005276:	6025      	str	r5, [r4, #0]
 8005278:	bf18      	it	ne
 800527a:	6059      	strne	r1, [r3, #4]
 800527c:	6863      	ldr	r3, [r4, #4]
 800527e:	bf08      	it	eq
 8005280:	f8c8 1000 	streq.w	r1, [r8]
 8005284:	5162      	str	r2, [r4, r5]
 8005286:	604b      	str	r3, [r1, #4]
 8005288:	4630      	mov	r0, r6
 800528a:	f000 f82f 	bl	80052ec <__malloc_unlock>
 800528e:	f104 000b 	add.w	r0, r4, #11
 8005292:	1d23      	adds	r3, r4, #4
 8005294:	f020 0007 	bic.w	r0, r0, #7
 8005298:	1ac2      	subs	r2, r0, r3
 800529a:	bf1c      	itt	ne
 800529c:	1a1b      	subne	r3, r3, r0
 800529e:	50a3      	strne	r3, [r4, r2]
 80052a0:	e7af      	b.n	8005202 <_malloc_r+0x22>
 80052a2:	6862      	ldr	r2, [r4, #4]
 80052a4:	42a3      	cmp	r3, r4
 80052a6:	bf0c      	ite	eq
 80052a8:	f8c8 2000 	streq.w	r2, [r8]
 80052ac:	605a      	strne	r2, [r3, #4]
 80052ae:	e7eb      	b.n	8005288 <_malloc_r+0xa8>
 80052b0:	4623      	mov	r3, r4
 80052b2:	6864      	ldr	r4, [r4, #4]
 80052b4:	e7ae      	b.n	8005214 <_malloc_r+0x34>
 80052b6:	463c      	mov	r4, r7
 80052b8:	687f      	ldr	r7, [r7, #4]
 80052ba:	e7b6      	b.n	800522a <_malloc_r+0x4a>
 80052bc:	461a      	mov	r2, r3
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	42a3      	cmp	r3, r4
 80052c2:	d1fb      	bne.n	80052bc <_malloc_r+0xdc>
 80052c4:	2300      	movs	r3, #0
 80052c6:	6053      	str	r3, [r2, #4]
 80052c8:	e7de      	b.n	8005288 <_malloc_r+0xa8>
 80052ca:	230c      	movs	r3, #12
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	4630      	mov	r0, r6
 80052d0:	f000 f80c 	bl	80052ec <__malloc_unlock>
 80052d4:	e794      	b.n	8005200 <_malloc_r+0x20>
 80052d6:	6005      	str	r5, [r0, #0]
 80052d8:	e7d6      	b.n	8005288 <_malloc_r+0xa8>
 80052da:	bf00      	nop
 80052dc:	20000330 	.word	0x20000330

080052e0 <__malloc_lock>:
 80052e0:	4801      	ldr	r0, [pc, #4]	@ (80052e8 <__malloc_lock+0x8>)
 80052e2:	f7ff bf01 	b.w	80050e8 <__retarget_lock_acquire_recursive>
 80052e6:	bf00      	nop
 80052e8:	20000328 	.word	0x20000328

080052ec <__malloc_unlock>:
 80052ec:	4801      	ldr	r0, [pc, #4]	@ (80052f4 <__malloc_unlock+0x8>)
 80052ee:	f7ff befc 	b.w	80050ea <__retarget_lock_release_recursive>
 80052f2:	bf00      	nop
 80052f4:	20000328 	.word	0x20000328

080052f8 <__ssputs_r>:
 80052f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052fc:	688e      	ldr	r6, [r1, #8]
 80052fe:	461f      	mov	r7, r3
 8005300:	42be      	cmp	r6, r7
 8005302:	680b      	ldr	r3, [r1, #0]
 8005304:	4682      	mov	sl, r0
 8005306:	460c      	mov	r4, r1
 8005308:	4690      	mov	r8, r2
 800530a:	d82d      	bhi.n	8005368 <__ssputs_r+0x70>
 800530c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005310:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005314:	d026      	beq.n	8005364 <__ssputs_r+0x6c>
 8005316:	6965      	ldr	r5, [r4, #20]
 8005318:	6909      	ldr	r1, [r1, #16]
 800531a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800531e:	eba3 0901 	sub.w	r9, r3, r1
 8005322:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005326:	1c7b      	adds	r3, r7, #1
 8005328:	444b      	add	r3, r9
 800532a:	106d      	asrs	r5, r5, #1
 800532c:	429d      	cmp	r5, r3
 800532e:	bf38      	it	cc
 8005330:	461d      	movcc	r5, r3
 8005332:	0553      	lsls	r3, r2, #21
 8005334:	d527      	bpl.n	8005386 <__ssputs_r+0x8e>
 8005336:	4629      	mov	r1, r5
 8005338:	f7ff ff52 	bl	80051e0 <_malloc_r>
 800533c:	4606      	mov	r6, r0
 800533e:	b360      	cbz	r0, 800539a <__ssputs_r+0xa2>
 8005340:	6921      	ldr	r1, [r4, #16]
 8005342:	464a      	mov	r2, r9
 8005344:	f7ff fed2 	bl	80050ec <memcpy>
 8005348:	89a3      	ldrh	r3, [r4, #12]
 800534a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800534e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005352:	81a3      	strh	r3, [r4, #12]
 8005354:	6126      	str	r6, [r4, #16]
 8005356:	6165      	str	r5, [r4, #20]
 8005358:	444e      	add	r6, r9
 800535a:	eba5 0509 	sub.w	r5, r5, r9
 800535e:	6026      	str	r6, [r4, #0]
 8005360:	60a5      	str	r5, [r4, #8]
 8005362:	463e      	mov	r6, r7
 8005364:	42be      	cmp	r6, r7
 8005366:	d900      	bls.n	800536a <__ssputs_r+0x72>
 8005368:	463e      	mov	r6, r7
 800536a:	6820      	ldr	r0, [r4, #0]
 800536c:	4632      	mov	r2, r6
 800536e:	4641      	mov	r1, r8
 8005370:	f000 faa6 	bl	80058c0 <memmove>
 8005374:	68a3      	ldr	r3, [r4, #8]
 8005376:	1b9b      	subs	r3, r3, r6
 8005378:	60a3      	str	r3, [r4, #8]
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	4433      	add	r3, r6
 800537e:	6023      	str	r3, [r4, #0]
 8005380:	2000      	movs	r0, #0
 8005382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005386:	462a      	mov	r2, r5
 8005388:	f000 fac4 	bl	8005914 <_realloc_r>
 800538c:	4606      	mov	r6, r0
 800538e:	2800      	cmp	r0, #0
 8005390:	d1e0      	bne.n	8005354 <__ssputs_r+0x5c>
 8005392:	6921      	ldr	r1, [r4, #16]
 8005394:	4650      	mov	r0, sl
 8005396:	f7ff feb7 	bl	8005108 <_free_r>
 800539a:	230c      	movs	r3, #12
 800539c:	f8ca 3000 	str.w	r3, [sl]
 80053a0:	89a3      	ldrh	r3, [r4, #12]
 80053a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053a6:	81a3      	strh	r3, [r4, #12]
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	e7e9      	b.n	8005382 <__ssputs_r+0x8a>
	...

080053b0 <_svfiprintf_r>:
 80053b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b4:	4698      	mov	r8, r3
 80053b6:	898b      	ldrh	r3, [r1, #12]
 80053b8:	061b      	lsls	r3, r3, #24
 80053ba:	b09d      	sub	sp, #116	@ 0x74
 80053bc:	4607      	mov	r7, r0
 80053be:	460d      	mov	r5, r1
 80053c0:	4614      	mov	r4, r2
 80053c2:	d510      	bpl.n	80053e6 <_svfiprintf_r+0x36>
 80053c4:	690b      	ldr	r3, [r1, #16]
 80053c6:	b973      	cbnz	r3, 80053e6 <_svfiprintf_r+0x36>
 80053c8:	2140      	movs	r1, #64	@ 0x40
 80053ca:	f7ff ff09 	bl	80051e0 <_malloc_r>
 80053ce:	6028      	str	r0, [r5, #0]
 80053d0:	6128      	str	r0, [r5, #16]
 80053d2:	b930      	cbnz	r0, 80053e2 <_svfiprintf_r+0x32>
 80053d4:	230c      	movs	r3, #12
 80053d6:	603b      	str	r3, [r7, #0]
 80053d8:	f04f 30ff 	mov.w	r0, #4294967295
 80053dc:	b01d      	add	sp, #116	@ 0x74
 80053de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e2:	2340      	movs	r3, #64	@ 0x40
 80053e4:	616b      	str	r3, [r5, #20]
 80053e6:	2300      	movs	r3, #0
 80053e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80053ea:	2320      	movs	r3, #32
 80053ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80053f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80053f4:	2330      	movs	r3, #48	@ 0x30
 80053f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005594 <_svfiprintf_r+0x1e4>
 80053fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80053fe:	f04f 0901 	mov.w	r9, #1
 8005402:	4623      	mov	r3, r4
 8005404:	469a      	mov	sl, r3
 8005406:	f813 2b01 	ldrb.w	r2, [r3], #1
 800540a:	b10a      	cbz	r2, 8005410 <_svfiprintf_r+0x60>
 800540c:	2a25      	cmp	r2, #37	@ 0x25
 800540e:	d1f9      	bne.n	8005404 <_svfiprintf_r+0x54>
 8005410:	ebba 0b04 	subs.w	fp, sl, r4
 8005414:	d00b      	beq.n	800542e <_svfiprintf_r+0x7e>
 8005416:	465b      	mov	r3, fp
 8005418:	4622      	mov	r2, r4
 800541a:	4629      	mov	r1, r5
 800541c:	4638      	mov	r0, r7
 800541e:	f7ff ff6b 	bl	80052f8 <__ssputs_r>
 8005422:	3001      	adds	r0, #1
 8005424:	f000 80a7 	beq.w	8005576 <_svfiprintf_r+0x1c6>
 8005428:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800542a:	445a      	add	r2, fp
 800542c:	9209      	str	r2, [sp, #36]	@ 0x24
 800542e:	f89a 3000 	ldrb.w	r3, [sl]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 809f 	beq.w	8005576 <_svfiprintf_r+0x1c6>
 8005438:	2300      	movs	r3, #0
 800543a:	f04f 32ff 	mov.w	r2, #4294967295
 800543e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005442:	f10a 0a01 	add.w	sl, sl, #1
 8005446:	9304      	str	r3, [sp, #16]
 8005448:	9307      	str	r3, [sp, #28]
 800544a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800544e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005450:	4654      	mov	r4, sl
 8005452:	2205      	movs	r2, #5
 8005454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005458:	484e      	ldr	r0, [pc, #312]	@ (8005594 <_svfiprintf_r+0x1e4>)
 800545a:	f7fa fee1 	bl	8000220 <memchr>
 800545e:	9a04      	ldr	r2, [sp, #16]
 8005460:	b9d8      	cbnz	r0, 800549a <_svfiprintf_r+0xea>
 8005462:	06d0      	lsls	r0, r2, #27
 8005464:	bf44      	itt	mi
 8005466:	2320      	movmi	r3, #32
 8005468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800546c:	0711      	lsls	r1, r2, #28
 800546e:	bf44      	itt	mi
 8005470:	232b      	movmi	r3, #43	@ 0x2b
 8005472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005476:	f89a 3000 	ldrb.w	r3, [sl]
 800547a:	2b2a      	cmp	r3, #42	@ 0x2a
 800547c:	d015      	beq.n	80054aa <_svfiprintf_r+0xfa>
 800547e:	9a07      	ldr	r2, [sp, #28]
 8005480:	4654      	mov	r4, sl
 8005482:	2000      	movs	r0, #0
 8005484:	f04f 0c0a 	mov.w	ip, #10
 8005488:	4621      	mov	r1, r4
 800548a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800548e:	3b30      	subs	r3, #48	@ 0x30
 8005490:	2b09      	cmp	r3, #9
 8005492:	d94b      	bls.n	800552c <_svfiprintf_r+0x17c>
 8005494:	b1b0      	cbz	r0, 80054c4 <_svfiprintf_r+0x114>
 8005496:	9207      	str	r2, [sp, #28]
 8005498:	e014      	b.n	80054c4 <_svfiprintf_r+0x114>
 800549a:	eba0 0308 	sub.w	r3, r0, r8
 800549e:	fa09 f303 	lsl.w	r3, r9, r3
 80054a2:	4313      	orrs	r3, r2
 80054a4:	9304      	str	r3, [sp, #16]
 80054a6:	46a2      	mov	sl, r4
 80054a8:	e7d2      	b.n	8005450 <_svfiprintf_r+0xa0>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	1d19      	adds	r1, r3, #4
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	9103      	str	r1, [sp, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	bfbb      	ittet	lt
 80054b6:	425b      	neglt	r3, r3
 80054b8:	f042 0202 	orrlt.w	r2, r2, #2
 80054bc:	9307      	strge	r3, [sp, #28]
 80054be:	9307      	strlt	r3, [sp, #28]
 80054c0:	bfb8      	it	lt
 80054c2:	9204      	strlt	r2, [sp, #16]
 80054c4:	7823      	ldrb	r3, [r4, #0]
 80054c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80054c8:	d10a      	bne.n	80054e0 <_svfiprintf_r+0x130>
 80054ca:	7863      	ldrb	r3, [r4, #1]
 80054cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80054ce:	d132      	bne.n	8005536 <_svfiprintf_r+0x186>
 80054d0:	9b03      	ldr	r3, [sp, #12]
 80054d2:	1d1a      	adds	r2, r3, #4
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	9203      	str	r2, [sp, #12]
 80054d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80054dc:	3402      	adds	r4, #2
 80054de:	9305      	str	r3, [sp, #20]
 80054e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80055a4 <_svfiprintf_r+0x1f4>
 80054e4:	7821      	ldrb	r1, [r4, #0]
 80054e6:	2203      	movs	r2, #3
 80054e8:	4650      	mov	r0, sl
 80054ea:	f7fa fe99 	bl	8000220 <memchr>
 80054ee:	b138      	cbz	r0, 8005500 <_svfiprintf_r+0x150>
 80054f0:	9b04      	ldr	r3, [sp, #16]
 80054f2:	eba0 000a 	sub.w	r0, r0, sl
 80054f6:	2240      	movs	r2, #64	@ 0x40
 80054f8:	4082      	lsls	r2, r0
 80054fa:	4313      	orrs	r3, r2
 80054fc:	3401      	adds	r4, #1
 80054fe:	9304      	str	r3, [sp, #16]
 8005500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005504:	4824      	ldr	r0, [pc, #144]	@ (8005598 <_svfiprintf_r+0x1e8>)
 8005506:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800550a:	2206      	movs	r2, #6
 800550c:	f7fa fe88 	bl	8000220 <memchr>
 8005510:	2800      	cmp	r0, #0
 8005512:	d036      	beq.n	8005582 <_svfiprintf_r+0x1d2>
 8005514:	4b21      	ldr	r3, [pc, #132]	@ (800559c <_svfiprintf_r+0x1ec>)
 8005516:	bb1b      	cbnz	r3, 8005560 <_svfiprintf_r+0x1b0>
 8005518:	9b03      	ldr	r3, [sp, #12]
 800551a:	3307      	adds	r3, #7
 800551c:	f023 0307 	bic.w	r3, r3, #7
 8005520:	3308      	adds	r3, #8
 8005522:	9303      	str	r3, [sp, #12]
 8005524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005526:	4433      	add	r3, r6
 8005528:	9309      	str	r3, [sp, #36]	@ 0x24
 800552a:	e76a      	b.n	8005402 <_svfiprintf_r+0x52>
 800552c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005530:	460c      	mov	r4, r1
 8005532:	2001      	movs	r0, #1
 8005534:	e7a8      	b.n	8005488 <_svfiprintf_r+0xd8>
 8005536:	2300      	movs	r3, #0
 8005538:	3401      	adds	r4, #1
 800553a:	9305      	str	r3, [sp, #20]
 800553c:	4619      	mov	r1, r3
 800553e:	f04f 0c0a 	mov.w	ip, #10
 8005542:	4620      	mov	r0, r4
 8005544:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005548:	3a30      	subs	r2, #48	@ 0x30
 800554a:	2a09      	cmp	r2, #9
 800554c:	d903      	bls.n	8005556 <_svfiprintf_r+0x1a6>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0c6      	beq.n	80054e0 <_svfiprintf_r+0x130>
 8005552:	9105      	str	r1, [sp, #20]
 8005554:	e7c4      	b.n	80054e0 <_svfiprintf_r+0x130>
 8005556:	fb0c 2101 	mla	r1, ip, r1, r2
 800555a:	4604      	mov	r4, r0
 800555c:	2301      	movs	r3, #1
 800555e:	e7f0      	b.n	8005542 <_svfiprintf_r+0x192>
 8005560:	ab03      	add	r3, sp, #12
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	462a      	mov	r2, r5
 8005566:	4b0e      	ldr	r3, [pc, #56]	@ (80055a0 <_svfiprintf_r+0x1f0>)
 8005568:	a904      	add	r1, sp, #16
 800556a:	4638      	mov	r0, r7
 800556c:	f3af 8000 	nop.w
 8005570:	1c42      	adds	r2, r0, #1
 8005572:	4606      	mov	r6, r0
 8005574:	d1d6      	bne.n	8005524 <_svfiprintf_r+0x174>
 8005576:	89ab      	ldrh	r3, [r5, #12]
 8005578:	065b      	lsls	r3, r3, #25
 800557a:	f53f af2d 	bmi.w	80053d8 <_svfiprintf_r+0x28>
 800557e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005580:	e72c      	b.n	80053dc <_svfiprintf_r+0x2c>
 8005582:	ab03      	add	r3, sp, #12
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	462a      	mov	r2, r5
 8005588:	4b05      	ldr	r3, [pc, #20]	@ (80055a0 <_svfiprintf_r+0x1f0>)
 800558a:	a904      	add	r1, sp, #16
 800558c:	4638      	mov	r0, r7
 800558e:	f000 f879 	bl	8005684 <_printf_i>
 8005592:	e7ed      	b.n	8005570 <_svfiprintf_r+0x1c0>
 8005594:	080059d8 	.word	0x080059d8
 8005598:	080059e2 	.word	0x080059e2
 800559c:	00000000 	.word	0x00000000
 80055a0:	080052f9 	.word	0x080052f9
 80055a4:	080059de 	.word	0x080059de

080055a8 <_printf_common>:
 80055a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ac:	4616      	mov	r6, r2
 80055ae:	4698      	mov	r8, r3
 80055b0:	688a      	ldr	r2, [r1, #8]
 80055b2:	690b      	ldr	r3, [r1, #16]
 80055b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055b8:	4293      	cmp	r3, r2
 80055ba:	bfb8      	it	lt
 80055bc:	4613      	movlt	r3, r2
 80055be:	6033      	str	r3, [r6, #0]
 80055c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055c4:	4607      	mov	r7, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	b10a      	cbz	r2, 80055ce <_printf_common+0x26>
 80055ca:	3301      	adds	r3, #1
 80055cc:	6033      	str	r3, [r6, #0]
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	0699      	lsls	r1, r3, #26
 80055d2:	bf42      	ittt	mi
 80055d4:	6833      	ldrmi	r3, [r6, #0]
 80055d6:	3302      	addmi	r3, #2
 80055d8:	6033      	strmi	r3, [r6, #0]
 80055da:	6825      	ldr	r5, [r4, #0]
 80055dc:	f015 0506 	ands.w	r5, r5, #6
 80055e0:	d106      	bne.n	80055f0 <_printf_common+0x48>
 80055e2:	f104 0a19 	add.w	sl, r4, #25
 80055e6:	68e3      	ldr	r3, [r4, #12]
 80055e8:	6832      	ldr	r2, [r6, #0]
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	42ab      	cmp	r3, r5
 80055ee:	dc26      	bgt.n	800563e <_printf_common+0x96>
 80055f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055f4:	6822      	ldr	r2, [r4, #0]
 80055f6:	3b00      	subs	r3, #0
 80055f8:	bf18      	it	ne
 80055fa:	2301      	movne	r3, #1
 80055fc:	0692      	lsls	r2, r2, #26
 80055fe:	d42b      	bmi.n	8005658 <_printf_common+0xb0>
 8005600:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005604:	4641      	mov	r1, r8
 8005606:	4638      	mov	r0, r7
 8005608:	47c8      	blx	r9
 800560a:	3001      	adds	r0, #1
 800560c:	d01e      	beq.n	800564c <_printf_common+0xa4>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	6922      	ldr	r2, [r4, #16]
 8005612:	f003 0306 	and.w	r3, r3, #6
 8005616:	2b04      	cmp	r3, #4
 8005618:	bf02      	ittt	eq
 800561a:	68e5      	ldreq	r5, [r4, #12]
 800561c:	6833      	ldreq	r3, [r6, #0]
 800561e:	1aed      	subeq	r5, r5, r3
 8005620:	68a3      	ldr	r3, [r4, #8]
 8005622:	bf0c      	ite	eq
 8005624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005628:	2500      	movne	r5, #0
 800562a:	4293      	cmp	r3, r2
 800562c:	bfc4      	itt	gt
 800562e:	1a9b      	subgt	r3, r3, r2
 8005630:	18ed      	addgt	r5, r5, r3
 8005632:	2600      	movs	r6, #0
 8005634:	341a      	adds	r4, #26
 8005636:	42b5      	cmp	r5, r6
 8005638:	d11a      	bne.n	8005670 <_printf_common+0xc8>
 800563a:	2000      	movs	r0, #0
 800563c:	e008      	b.n	8005650 <_printf_common+0xa8>
 800563e:	2301      	movs	r3, #1
 8005640:	4652      	mov	r2, sl
 8005642:	4641      	mov	r1, r8
 8005644:	4638      	mov	r0, r7
 8005646:	47c8      	blx	r9
 8005648:	3001      	adds	r0, #1
 800564a:	d103      	bne.n	8005654 <_printf_common+0xac>
 800564c:	f04f 30ff 	mov.w	r0, #4294967295
 8005650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005654:	3501      	adds	r5, #1
 8005656:	e7c6      	b.n	80055e6 <_printf_common+0x3e>
 8005658:	18e1      	adds	r1, r4, r3
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	2030      	movs	r0, #48	@ 0x30
 800565e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005662:	4422      	add	r2, r4
 8005664:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005668:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800566c:	3302      	adds	r3, #2
 800566e:	e7c7      	b.n	8005600 <_printf_common+0x58>
 8005670:	2301      	movs	r3, #1
 8005672:	4622      	mov	r2, r4
 8005674:	4641      	mov	r1, r8
 8005676:	4638      	mov	r0, r7
 8005678:	47c8      	blx	r9
 800567a:	3001      	adds	r0, #1
 800567c:	d0e6      	beq.n	800564c <_printf_common+0xa4>
 800567e:	3601      	adds	r6, #1
 8005680:	e7d9      	b.n	8005636 <_printf_common+0x8e>
	...

08005684 <_printf_i>:
 8005684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005688:	7e0f      	ldrb	r7, [r1, #24]
 800568a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800568c:	2f78      	cmp	r7, #120	@ 0x78
 800568e:	4691      	mov	r9, r2
 8005690:	4680      	mov	r8, r0
 8005692:	460c      	mov	r4, r1
 8005694:	469a      	mov	sl, r3
 8005696:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800569a:	d807      	bhi.n	80056ac <_printf_i+0x28>
 800569c:	2f62      	cmp	r7, #98	@ 0x62
 800569e:	d80a      	bhi.n	80056b6 <_printf_i+0x32>
 80056a0:	2f00      	cmp	r7, #0
 80056a2:	f000 80d1 	beq.w	8005848 <_printf_i+0x1c4>
 80056a6:	2f58      	cmp	r7, #88	@ 0x58
 80056a8:	f000 80b8 	beq.w	800581c <_printf_i+0x198>
 80056ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056b4:	e03a      	b.n	800572c <_printf_i+0xa8>
 80056b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056ba:	2b15      	cmp	r3, #21
 80056bc:	d8f6      	bhi.n	80056ac <_printf_i+0x28>
 80056be:	a101      	add	r1, pc, #4	@ (adr r1, 80056c4 <_printf_i+0x40>)
 80056c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056c4:	0800571d 	.word	0x0800571d
 80056c8:	08005731 	.word	0x08005731
 80056cc:	080056ad 	.word	0x080056ad
 80056d0:	080056ad 	.word	0x080056ad
 80056d4:	080056ad 	.word	0x080056ad
 80056d8:	080056ad 	.word	0x080056ad
 80056dc:	08005731 	.word	0x08005731
 80056e0:	080056ad 	.word	0x080056ad
 80056e4:	080056ad 	.word	0x080056ad
 80056e8:	080056ad 	.word	0x080056ad
 80056ec:	080056ad 	.word	0x080056ad
 80056f0:	0800582f 	.word	0x0800582f
 80056f4:	0800575b 	.word	0x0800575b
 80056f8:	080057e9 	.word	0x080057e9
 80056fc:	080056ad 	.word	0x080056ad
 8005700:	080056ad 	.word	0x080056ad
 8005704:	08005851 	.word	0x08005851
 8005708:	080056ad 	.word	0x080056ad
 800570c:	0800575b 	.word	0x0800575b
 8005710:	080056ad 	.word	0x080056ad
 8005714:	080056ad 	.word	0x080056ad
 8005718:	080057f1 	.word	0x080057f1
 800571c:	6833      	ldr	r3, [r6, #0]
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6032      	str	r2, [r6, #0]
 8005724:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005728:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800572c:	2301      	movs	r3, #1
 800572e:	e09c      	b.n	800586a <_printf_i+0x1e6>
 8005730:	6833      	ldr	r3, [r6, #0]
 8005732:	6820      	ldr	r0, [r4, #0]
 8005734:	1d19      	adds	r1, r3, #4
 8005736:	6031      	str	r1, [r6, #0]
 8005738:	0606      	lsls	r6, r0, #24
 800573a:	d501      	bpl.n	8005740 <_printf_i+0xbc>
 800573c:	681d      	ldr	r5, [r3, #0]
 800573e:	e003      	b.n	8005748 <_printf_i+0xc4>
 8005740:	0645      	lsls	r5, r0, #25
 8005742:	d5fb      	bpl.n	800573c <_printf_i+0xb8>
 8005744:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005748:	2d00      	cmp	r5, #0
 800574a:	da03      	bge.n	8005754 <_printf_i+0xd0>
 800574c:	232d      	movs	r3, #45	@ 0x2d
 800574e:	426d      	negs	r5, r5
 8005750:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005754:	4858      	ldr	r0, [pc, #352]	@ (80058b8 <_printf_i+0x234>)
 8005756:	230a      	movs	r3, #10
 8005758:	e011      	b.n	800577e <_printf_i+0xfa>
 800575a:	6821      	ldr	r1, [r4, #0]
 800575c:	6833      	ldr	r3, [r6, #0]
 800575e:	0608      	lsls	r0, r1, #24
 8005760:	f853 5b04 	ldr.w	r5, [r3], #4
 8005764:	d402      	bmi.n	800576c <_printf_i+0xe8>
 8005766:	0649      	lsls	r1, r1, #25
 8005768:	bf48      	it	mi
 800576a:	b2ad      	uxthmi	r5, r5
 800576c:	2f6f      	cmp	r7, #111	@ 0x6f
 800576e:	4852      	ldr	r0, [pc, #328]	@ (80058b8 <_printf_i+0x234>)
 8005770:	6033      	str	r3, [r6, #0]
 8005772:	bf14      	ite	ne
 8005774:	230a      	movne	r3, #10
 8005776:	2308      	moveq	r3, #8
 8005778:	2100      	movs	r1, #0
 800577a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800577e:	6866      	ldr	r6, [r4, #4]
 8005780:	60a6      	str	r6, [r4, #8]
 8005782:	2e00      	cmp	r6, #0
 8005784:	db05      	blt.n	8005792 <_printf_i+0x10e>
 8005786:	6821      	ldr	r1, [r4, #0]
 8005788:	432e      	orrs	r6, r5
 800578a:	f021 0104 	bic.w	r1, r1, #4
 800578e:	6021      	str	r1, [r4, #0]
 8005790:	d04b      	beq.n	800582a <_printf_i+0x1a6>
 8005792:	4616      	mov	r6, r2
 8005794:	fbb5 f1f3 	udiv	r1, r5, r3
 8005798:	fb03 5711 	mls	r7, r3, r1, r5
 800579c:	5dc7      	ldrb	r7, [r0, r7]
 800579e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057a2:	462f      	mov	r7, r5
 80057a4:	42bb      	cmp	r3, r7
 80057a6:	460d      	mov	r5, r1
 80057a8:	d9f4      	bls.n	8005794 <_printf_i+0x110>
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d10b      	bne.n	80057c6 <_printf_i+0x142>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	07df      	lsls	r7, r3, #31
 80057b2:	d508      	bpl.n	80057c6 <_printf_i+0x142>
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	6861      	ldr	r1, [r4, #4]
 80057b8:	4299      	cmp	r1, r3
 80057ba:	bfde      	ittt	le
 80057bc:	2330      	movle	r3, #48	@ 0x30
 80057be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057c6:	1b92      	subs	r2, r2, r6
 80057c8:	6122      	str	r2, [r4, #16]
 80057ca:	f8cd a000 	str.w	sl, [sp]
 80057ce:	464b      	mov	r3, r9
 80057d0:	aa03      	add	r2, sp, #12
 80057d2:	4621      	mov	r1, r4
 80057d4:	4640      	mov	r0, r8
 80057d6:	f7ff fee7 	bl	80055a8 <_printf_common>
 80057da:	3001      	adds	r0, #1
 80057dc:	d14a      	bne.n	8005874 <_printf_i+0x1f0>
 80057de:	f04f 30ff 	mov.w	r0, #4294967295
 80057e2:	b004      	add	sp, #16
 80057e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	f043 0320 	orr.w	r3, r3, #32
 80057ee:	6023      	str	r3, [r4, #0]
 80057f0:	4832      	ldr	r0, [pc, #200]	@ (80058bc <_printf_i+0x238>)
 80057f2:	2778      	movs	r7, #120	@ 0x78
 80057f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	6831      	ldr	r1, [r6, #0]
 80057fc:	061f      	lsls	r7, r3, #24
 80057fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8005802:	d402      	bmi.n	800580a <_printf_i+0x186>
 8005804:	065f      	lsls	r7, r3, #25
 8005806:	bf48      	it	mi
 8005808:	b2ad      	uxthmi	r5, r5
 800580a:	6031      	str	r1, [r6, #0]
 800580c:	07d9      	lsls	r1, r3, #31
 800580e:	bf44      	itt	mi
 8005810:	f043 0320 	orrmi.w	r3, r3, #32
 8005814:	6023      	strmi	r3, [r4, #0]
 8005816:	b11d      	cbz	r5, 8005820 <_printf_i+0x19c>
 8005818:	2310      	movs	r3, #16
 800581a:	e7ad      	b.n	8005778 <_printf_i+0xf4>
 800581c:	4826      	ldr	r0, [pc, #152]	@ (80058b8 <_printf_i+0x234>)
 800581e:	e7e9      	b.n	80057f4 <_printf_i+0x170>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	f023 0320 	bic.w	r3, r3, #32
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	e7f6      	b.n	8005818 <_printf_i+0x194>
 800582a:	4616      	mov	r6, r2
 800582c:	e7bd      	b.n	80057aa <_printf_i+0x126>
 800582e:	6833      	ldr	r3, [r6, #0]
 8005830:	6825      	ldr	r5, [r4, #0]
 8005832:	6961      	ldr	r1, [r4, #20]
 8005834:	1d18      	adds	r0, r3, #4
 8005836:	6030      	str	r0, [r6, #0]
 8005838:	062e      	lsls	r6, r5, #24
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	d501      	bpl.n	8005842 <_printf_i+0x1be>
 800583e:	6019      	str	r1, [r3, #0]
 8005840:	e002      	b.n	8005848 <_printf_i+0x1c4>
 8005842:	0668      	lsls	r0, r5, #25
 8005844:	d5fb      	bpl.n	800583e <_printf_i+0x1ba>
 8005846:	8019      	strh	r1, [r3, #0]
 8005848:	2300      	movs	r3, #0
 800584a:	6123      	str	r3, [r4, #16]
 800584c:	4616      	mov	r6, r2
 800584e:	e7bc      	b.n	80057ca <_printf_i+0x146>
 8005850:	6833      	ldr	r3, [r6, #0]
 8005852:	1d1a      	adds	r2, r3, #4
 8005854:	6032      	str	r2, [r6, #0]
 8005856:	681e      	ldr	r6, [r3, #0]
 8005858:	6862      	ldr	r2, [r4, #4]
 800585a:	2100      	movs	r1, #0
 800585c:	4630      	mov	r0, r6
 800585e:	f7fa fcdf 	bl	8000220 <memchr>
 8005862:	b108      	cbz	r0, 8005868 <_printf_i+0x1e4>
 8005864:	1b80      	subs	r0, r0, r6
 8005866:	6060      	str	r0, [r4, #4]
 8005868:	6863      	ldr	r3, [r4, #4]
 800586a:	6123      	str	r3, [r4, #16]
 800586c:	2300      	movs	r3, #0
 800586e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005872:	e7aa      	b.n	80057ca <_printf_i+0x146>
 8005874:	6923      	ldr	r3, [r4, #16]
 8005876:	4632      	mov	r2, r6
 8005878:	4649      	mov	r1, r9
 800587a:	4640      	mov	r0, r8
 800587c:	47d0      	blx	sl
 800587e:	3001      	adds	r0, #1
 8005880:	d0ad      	beq.n	80057de <_printf_i+0x15a>
 8005882:	6823      	ldr	r3, [r4, #0]
 8005884:	079b      	lsls	r3, r3, #30
 8005886:	d413      	bmi.n	80058b0 <_printf_i+0x22c>
 8005888:	68e0      	ldr	r0, [r4, #12]
 800588a:	9b03      	ldr	r3, [sp, #12]
 800588c:	4298      	cmp	r0, r3
 800588e:	bfb8      	it	lt
 8005890:	4618      	movlt	r0, r3
 8005892:	e7a6      	b.n	80057e2 <_printf_i+0x15e>
 8005894:	2301      	movs	r3, #1
 8005896:	4632      	mov	r2, r6
 8005898:	4649      	mov	r1, r9
 800589a:	4640      	mov	r0, r8
 800589c:	47d0      	blx	sl
 800589e:	3001      	adds	r0, #1
 80058a0:	d09d      	beq.n	80057de <_printf_i+0x15a>
 80058a2:	3501      	adds	r5, #1
 80058a4:	68e3      	ldr	r3, [r4, #12]
 80058a6:	9903      	ldr	r1, [sp, #12]
 80058a8:	1a5b      	subs	r3, r3, r1
 80058aa:	42ab      	cmp	r3, r5
 80058ac:	dcf2      	bgt.n	8005894 <_printf_i+0x210>
 80058ae:	e7eb      	b.n	8005888 <_printf_i+0x204>
 80058b0:	2500      	movs	r5, #0
 80058b2:	f104 0619 	add.w	r6, r4, #25
 80058b6:	e7f5      	b.n	80058a4 <_printf_i+0x220>
 80058b8:	080059e9 	.word	0x080059e9
 80058bc:	080059fa 	.word	0x080059fa

080058c0 <memmove>:
 80058c0:	4288      	cmp	r0, r1
 80058c2:	b510      	push	{r4, lr}
 80058c4:	eb01 0402 	add.w	r4, r1, r2
 80058c8:	d902      	bls.n	80058d0 <memmove+0x10>
 80058ca:	4284      	cmp	r4, r0
 80058cc:	4623      	mov	r3, r4
 80058ce:	d807      	bhi.n	80058e0 <memmove+0x20>
 80058d0:	1e43      	subs	r3, r0, #1
 80058d2:	42a1      	cmp	r1, r4
 80058d4:	d008      	beq.n	80058e8 <memmove+0x28>
 80058d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80058da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80058de:	e7f8      	b.n	80058d2 <memmove+0x12>
 80058e0:	4402      	add	r2, r0
 80058e2:	4601      	mov	r1, r0
 80058e4:	428a      	cmp	r2, r1
 80058e6:	d100      	bne.n	80058ea <memmove+0x2a>
 80058e8:	bd10      	pop	{r4, pc}
 80058ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80058ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80058f2:	e7f7      	b.n	80058e4 <memmove+0x24>

080058f4 <_sbrk_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4d06      	ldr	r5, [pc, #24]	@ (8005910 <_sbrk_r+0x1c>)
 80058f8:	2300      	movs	r3, #0
 80058fa:	4604      	mov	r4, r0
 80058fc:	4608      	mov	r0, r1
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	f7fc f8a2 	bl	8001a48 <_sbrk>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d102      	bne.n	800590e <_sbrk_r+0x1a>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	b103      	cbz	r3, 800590e <_sbrk_r+0x1a>
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	bd38      	pop	{r3, r4, r5, pc}
 8005910:	20000324 	.word	0x20000324

08005914 <_realloc_r>:
 8005914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005918:	4607      	mov	r7, r0
 800591a:	4614      	mov	r4, r2
 800591c:	460d      	mov	r5, r1
 800591e:	b921      	cbnz	r1, 800592a <_realloc_r+0x16>
 8005920:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005924:	4611      	mov	r1, r2
 8005926:	f7ff bc5b 	b.w	80051e0 <_malloc_r>
 800592a:	b92a      	cbnz	r2, 8005938 <_realloc_r+0x24>
 800592c:	f7ff fbec 	bl	8005108 <_free_r>
 8005930:	4625      	mov	r5, r4
 8005932:	4628      	mov	r0, r5
 8005934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005938:	f000 f81a 	bl	8005970 <_malloc_usable_size_r>
 800593c:	4284      	cmp	r4, r0
 800593e:	4606      	mov	r6, r0
 8005940:	d802      	bhi.n	8005948 <_realloc_r+0x34>
 8005942:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005946:	d8f4      	bhi.n	8005932 <_realloc_r+0x1e>
 8005948:	4621      	mov	r1, r4
 800594a:	4638      	mov	r0, r7
 800594c:	f7ff fc48 	bl	80051e0 <_malloc_r>
 8005950:	4680      	mov	r8, r0
 8005952:	b908      	cbnz	r0, 8005958 <_realloc_r+0x44>
 8005954:	4645      	mov	r5, r8
 8005956:	e7ec      	b.n	8005932 <_realloc_r+0x1e>
 8005958:	42b4      	cmp	r4, r6
 800595a:	4622      	mov	r2, r4
 800595c:	4629      	mov	r1, r5
 800595e:	bf28      	it	cs
 8005960:	4632      	movcs	r2, r6
 8005962:	f7ff fbc3 	bl	80050ec <memcpy>
 8005966:	4629      	mov	r1, r5
 8005968:	4638      	mov	r0, r7
 800596a:	f7ff fbcd 	bl	8005108 <_free_r>
 800596e:	e7f1      	b.n	8005954 <_realloc_r+0x40>

08005970 <_malloc_usable_size_r>:
 8005970:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005974:	1f18      	subs	r0, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	bfbc      	itt	lt
 800597a:	580b      	ldrlt	r3, [r1, r0]
 800597c:	18c0      	addlt	r0, r0, r3
 800597e:	4770      	bx	lr

08005980 <_init>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	bf00      	nop
 8005984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005986:	bc08      	pop	{r3}
 8005988:	469e      	mov	lr, r3
 800598a:	4770      	bx	lr

0800598c <_fini>:
 800598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800598e:	bf00      	nop
 8005990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005992:	bc08      	pop	{r3}
 8005994:	469e      	mov	lr, r3
 8005996:	4770      	bx	lr
