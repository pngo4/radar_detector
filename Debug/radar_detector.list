
radar_detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002028  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080021ec  080021ec  000031ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002204  08002204  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002204  08002204  00003204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800220c  0800220c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800220c  0800220c  0000320c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002210  08002210  00003210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002214  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002220  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002220  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e76  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014f4  00000000  00000000  0000beb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  0000d3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051d  00000000  00000000  0000da58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000201fc  00000000  00000000  0000df75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000089cc  00000000  00000000  0002e171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4a0e  00000000  00000000  00036b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb54b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a64  00000000  00000000  000fb590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000fcff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080021d4 	.word	0x080021d4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080021d4 	.word	0x080021d4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fa12 	bl	800095c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f806 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f89a 	bl	8000674 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f86e 	bl	8000620 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <main+0x14>

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b094      	sub	sp, #80	@ 0x50
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 031c 	add.w	r3, r7, #28
 8000552:	2234      	movs	r2, #52	@ 0x34
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fe10 	bl	800217c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <SystemClock_Config+0xd0>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000574:	4a28      	ldr	r2, [pc, #160]	@ (8000618 <SystemClock_Config+0xd0>)
 8000576:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800057a:	6413      	str	r3, [r2, #64]	@ 0x40
 800057c:	4b26      	ldr	r3, [pc, #152]	@ (8000618 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000588:	2300      	movs	r3, #0
 800058a:	603b      	str	r3, [r7, #0]
 800058c:	4b23      	ldr	r3, [pc, #140]	@ (800061c <SystemClock_Config+0xd4>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000594:	4a21      	ldr	r2, [pc, #132]	@ (800061c <SystemClock_Config+0xd4>)
 8000596:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	4b1f      	ldr	r3, [pc, #124]	@ (800061c <SystemClock_Config+0xd4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	2301      	movs	r3, #1
 80005ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b0:	2310      	movs	r3, #16
 80005b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b8:	2300      	movs	r3, #0
 80005ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005bc:	2308      	movs	r3, #8
 80005be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005c0:	2354      	movs	r3, #84	@ 0x54
 80005c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 f86f 	bl	80016b8 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005e0:	f000 f8d2 	bl	8000788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fd0f 	bl	8001024 <HAL_RCC_ClockConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800060c:	f000 f8bc 	bl	8000788 <Error_Handler>
  }
}
 8000610:	bf00      	nop
 8000612:	3750      	adds	r7, #80	@ 0x50
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_USART2_UART_Init+0x4c>)
 8000626:	4a12      	ldr	r2, [pc, #72]	@ (8000670 <MX_USART2_UART_Init+0x50>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062a:	4b10      	ldr	r3, [pc, #64]	@ (800066c <MX_USART2_UART_Init+0x4c>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_USART2_UART_Init+0x4c>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_USART2_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	@ (800066c <MX_USART2_UART_Init+0x4c>)
 8000658:	f001 facc 	bl	8001bf4 <HAL_UART_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000662:	f000 f891 	bl	8000788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000028 	.word	0x20000028
 8000670:	40004400 	.word	0x40004400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b08a      	sub	sp, #40	@ 0x28
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b31      	ldr	r3, [pc, #196]	@ (8000754 <MX_GPIO_Init+0xe0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a30      	ldr	r2, [pc, #192]	@ (8000754 <MX_GPIO_Init+0xe0>)
 8000694:	f043 0304 	orr.w	r3, r3, #4
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <MX_GPIO_Init+0xe0>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0304 	and.w	r3, r3, #4
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000754 <MX_GPIO_Init+0xe0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a29      	ldr	r2, [pc, #164]	@ (8000754 <MX_GPIO_Init+0xe0>)
 80006b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <MX_GPIO_Init+0xe0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <MX_GPIO_Init+0xe0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a22      	ldr	r2, [pc, #136]	@ (8000754 <MX_GPIO_Init+0xe0>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b20      	ldr	r3, [pc, #128]	@ (8000754 <MX_GPIO_Init+0xe0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_GPIO_Init+0xe0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a1b      	ldr	r2, [pc, #108]	@ (8000754 <MX_GPIO_Init+0xe0>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <MX_GPIO_Init+0xe0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2120      	movs	r1, #32
 80006fe:	4816      	ldr	r0, [pc, #88]	@ (8000758 <MX_GPIO_Init+0xe4>)
 8000700:	f000 fc44 	bl	8000f8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000704:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800070a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800070e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4619      	mov	r1, r3
 800071a:	4810      	ldr	r0, [pc, #64]	@ (800075c <MX_GPIO_Init+0xe8>)
 800071c:	f000 faa2 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000720:	2320      	movs	r3, #32
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	4808      	ldr	r0, [pc, #32]	@ (8000758 <MX_GPIO_Init+0xe4>)
 8000738:	f000 fa94 	bl	8000c64 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	2028      	movs	r0, #40	@ 0x28
 8000742:	f000 fa58 	bl	8000bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000746:	2028      	movs	r0, #40	@ 0x28
 8000748:	f000 fa71 	bl	8000c2e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800074c:	bf00      	nop
 800074e:	3728      	adds	r7, #40	@ 0x28
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	40020800 	.word	0x40020800

08000760 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) //blue pushbutton pin
 800076a:	88fb      	ldrh	r3, [r7, #6]
 800076c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000770:	d103      	bne.n	800077a <HAL_GPIO_EXTI_Callback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000772:	2120      	movs	r1, #32
 8000774:	4803      	ldr	r0, [pc, #12]	@ (8000784 <HAL_GPIO_EXTI_Callback+0x24>)
 8000776:	f000 fc22 	bl	8000fbe <HAL_GPIO_TogglePin>
	};
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40020000 	.word	0x40020000

08000788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800078c:	b672      	cpsid	i
}
 800078e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <Error_Handler+0x8>

08000794 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <HAL_MspInit+0x4c>)
 80007a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007a2:	4a0f      	ldr	r2, [pc, #60]	@ (80007e0 <HAL_MspInit+0x4c>)
 80007a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80007aa:	4b0d      	ldr	r3, [pc, #52]	@ (80007e0 <HAL_MspInit+0x4c>)
 80007ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <HAL_MspInit+0x4c>)
 80007bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007be:	4a08      	ldr	r2, [pc, #32]	@ (80007e0 <HAL_MspInit+0x4c>)
 80007c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <HAL_MspInit+0x4c>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007d2:	2007      	movs	r0, #7
 80007d4:	f000 fa04 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800

080007e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	@ 0x28
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a19      	ldr	r2, [pc, #100]	@ (8000868 <HAL_UART_MspInit+0x84>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d12b      	bne.n	800085e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b18      	ldr	r3, [pc, #96]	@ (800086c <HAL_UART_MspInit+0x88>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	4a17      	ldr	r2, [pc, #92]	@ (800086c <HAL_UART_MspInit+0x88>)
 8000810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000814:	6413      	str	r3, [r2, #64]	@ 0x40
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <HAL_UART_MspInit+0x88>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800081a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <HAL_UART_MspInit+0x88>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a10      	ldr	r2, [pc, #64]	@ (800086c <HAL_UART_MspInit+0x88>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <HAL_UART_MspInit+0x88>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800083e:	230c      	movs	r3, #12
 8000840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800084e:	2307      	movs	r3, #7
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	4805      	ldr	r0, [pc, #20]	@ (8000870 <HAL_UART_MspInit+0x8c>)
 800085a:	f000 fa03 	bl	8000c64 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	@ 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40004400 	.word	0x40004400
 800086c:	40023800 	.word	0x40023800
 8000870:	40020000 	.word	0x40020000

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <NMI_Handler+0x4>

0800087c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <MemManage_Handler+0x4>

0800088c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <UsageFault_Handler+0x4>

0800089c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ca:	f000 f899 	bl	8000a00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008d6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008da:	f000 fb8b 	bl	8000ff4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000940 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800090c:	f7ff ffea 	bl	80008e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000912:	490d      	ldr	r1, [pc, #52]	@ (8000948 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800091c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000920:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000922:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000928:	4c0a      	ldr	r4, [pc, #40]	@ (8000954 <LoopFillZerobss+0x22>)
  movs r3, #0
 800092a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000932:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000936:	f001 fc29 	bl	800218c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800093a:	f7ff fdf9 	bl	8000530 <main>
  bx  lr    
 800093e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000940:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000944:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000948:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800094c:	08002214 	.word	0x08002214
  ldr r2, =_sbss
 8000950:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000954:	20000074 	.word	0x20000074

08000958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000958:	e7fe      	b.n	8000958 <ADC_IRQHandler>
	...

0800095c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000960:	4b0e      	ldr	r3, [pc, #56]	@ (800099c <HAL_Init+0x40>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <HAL_Init+0x40>)
 8000966:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800096a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <HAL_Init+0x40>)
 8000972:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000976:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b08      	ldr	r3, [pc, #32]	@ (800099c <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a07      	ldr	r2, [pc, #28]	@ (800099c <HAL_Init+0x40>)
 800097e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000982:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 f92b 	bl	8000be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800098a:	2000      	movs	r0, #0
 800098c:	f000 f808 	bl	80009a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000990:	f7ff ff00 	bl	8000794 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023c00 	.word	0x40023c00

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009a8:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_InitTick+0x54>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_InitTick+0x58>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	4619      	mov	r1, r3
 80009b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 f943 	bl	8000c4a <HAL_SYSTICK_Config>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00e      	b.n	80009ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b0f      	cmp	r3, #15
 80009d2:	d80a      	bhi.n	80009ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009d4:	2200      	movs	r2, #0
 80009d6:	6879      	ldr	r1, [r7, #4]
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f000 f90b 	bl	8000bf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009e0:	4a06      	ldr	r2, [pc, #24]	@ (80009fc <HAL_InitTick+0x5c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
 80009e8:	e000      	b.n	80009ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000004 	.word	0x20000004

08000a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a04:	4b06      	ldr	r3, [pc, #24]	@ (8000a20 <HAL_IncTick+0x20>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_IncTick+0x24>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
 8000a10:	4a04      	ldr	r2, [pc, #16]	@ (8000a24 <HAL_IncTick+0x24>)
 8000a12:	6013      	str	r3, [r2, #0]
}
 8000a14:	bf00      	nop
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20000070 	.word	0x20000070

08000a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a2c:	4b03      	ldr	r3, [pc, #12]	@ (8000a3c <HAL_GetTick+0x14>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000070 	.word	0x20000070

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4907      	ldr	r1, [pc, #28]	@ (8000adc <__NVIC_EnableIRQ+0x38>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000e100 	.word	0xe000e100

08000ae0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	6039      	str	r1, [r7, #0]
 8000aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	db0a      	blt.n	8000b0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	490c      	ldr	r1, [pc, #48]	@ (8000b2c <__NVIC_SetPriority+0x4c>)
 8000afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afe:	0112      	lsls	r2, r2, #4
 8000b00:	b2d2      	uxtb	r2, r2
 8000b02:	440b      	add	r3, r1
 8000b04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b08:	e00a      	b.n	8000b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	4908      	ldr	r1, [pc, #32]	@ (8000b30 <__NVIC_SetPriority+0x50>)
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 030f 	and.w	r3, r3, #15
 8000b16:	3b04      	subs	r3, #4
 8000b18:	0112      	lsls	r2, r2, #4
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	761a      	strb	r2, [r3, #24]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b089      	sub	sp, #36	@ 0x24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b48:	69fb      	ldr	r3, [r7, #28]
 8000b4a:	f1c3 0307 	rsb	r3, r3, #7
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	bf28      	it	cs
 8000b52:	2304      	movcs	r3, #4
 8000b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	2b06      	cmp	r3, #6
 8000b5c:	d902      	bls.n	8000b64 <NVIC_EncodePriority+0x30>
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3b03      	subs	r3, #3
 8000b62:	e000      	b.n	8000b66 <NVIC_EncodePriority+0x32>
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43da      	mvns	r2, r3
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	401a      	ands	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	fa01 f303 	lsl.w	r3, r1, r3
 8000b86:	43d9      	mvns	r1, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	4313      	orrs	r3, r2
         );
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3724      	adds	r7, #36	@ 0x24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
	...

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bac:	d301      	bcc.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e00f      	b.n	8000bd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <SysTick_Config+0x40>)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	210f      	movs	r1, #15
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	f7ff ff8e 	bl	8000ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc4:	4b05      	ldr	r3, [pc, #20]	@ (8000bdc <SysTick_Config+0x40>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bca:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <SysTick_Config+0x40>)
 8000bcc:	2207      	movs	r2, #7
 8000bce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	e000e010 	.word	0xe000e010

08000be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff ff29 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	b086      	sub	sp, #24
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	60b9      	str	r1, [r7, #8]
 8000c00:	607a      	str	r2, [r7, #4]
 8000c02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c08:	f7ff ff3e 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f7ff ff8e 	bl	8000b34 <NVIC_EncodePriority>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <__NVIC_SetPriority>
}
 8000c26:	bf00      	nop
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff31 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffa2 	bl	8000b9c <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	@ 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	e165      	b.n	8000f4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c80:	2201      	movs	r2, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	697a      	ldr	r2, [r7, #20]
 8000c90:	4013      	ands	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	f040 8154 	bne.w	8000f46 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d005      	beq.n	8000cb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d130      	bne.n	8000d18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cec:	2201      	movs	r2, #1
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	091b      	lsrs	r3, r3, #4
 8000d02:	f003 0201 	and.w	r2, r3, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b03      	cmp	r3, #3
 8000d22:	d017      	beq.n	8000d54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	2203      	movs	r2, #3
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	005b      	lsls	r3, r3, #1
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d123      	bne.n	8000da8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	08da      	lsrs	r2, r3, #3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3208      	adds	r2, #8
 8000d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	220f      	movs	r2, #15
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	691a      	ldr	r2, [r3, #16]
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	08da      	lsrs	r2, r3, #3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3208      	adds	r2, #8
 8000da2:	69b9      	ldr	r1, [r7, #24]
 8000da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f003 0203 	and.w	r2, r3, #3
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80ae 	beq.w	8000f46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b5d      	ldr	r3, [pc, #372]	@ (8000f64 <HAL_GPIO_Init+0x300>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	4a5c      	ldr	r2, [pc, #368]	@ (8000f64 <HAL_GPIO_Init+0x300>)
 8000df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfa:	4b5a      	ldr	r3, [pc, #360]	@ (8000f64 <HAL_GPIO_Init+0x300>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e06:	4a58      	ldr	r2, [pc, #352]	@ (8000f68 <HAL_GPIO_Init+0x304>)
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	220f      	movs	r2, #15
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a4f      	ldr	r2, [pc, #316]	@ (8000f6c <HAL_GPIO_Init+0x308>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d025      	beq.n	8000e7e <HAL_GPIO_Init+0x21a>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a4e      	ldr	r2, [pc, #312]	@ (8000f70 <HAL_GPIO_Init+0x30c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d01f      	beq.n	8000e7a <HAL_GPIO_Init+0x216>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4a4d      	ldr	r2, [pc, #308]	@ (8000f74 <HAL_GPIO_Init+0x310>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d019      	beq.n	8000e76 <HAL_GPIO_Init+0x212>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4c      	ldr	r2, [pc, #304]	@ (8000f78 <HAL_GPIO_Init+0x314>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d013      	beq.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f7c <HAL_GPIO_Init+0x318>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d00d      	beq.n	8000e6e <HAL_GPIO_Init+0x20a>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4a      	ldr	r2, [pc, #296]	@ (8000f80 <HAL_GPIO_Init+0x31c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d007      	beq.n	8000e6a <HAL_GPIO_Init+0x206>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a49      	ldr	r2, [pc, #292]	@ (8000f84 <HAL_GPIO_Init+0x320>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_GPIO_Init+0x202>
 8000e62:	2306      	movs	r3, #6
 8000e64:	e00c      	b.n	8000e80 <HAL_GPIO_Init+0x21c>
 8000e66:	2307      	movs	r3, #7
 8000e68:	e00a      	b.n	8000e80 <HAL_GPIO_Init+0x21c>
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e008      	b.n	8000e80 <HAL_GPIO_Init+0x21c>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x21c>
 8000e72:	2303      	movs	r3, #3
 8000e74:	e004      	b.n	8000e80 <HAL_GPIO_Init+0x21c>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e002      	b.n	8000e80 <HAL_GPIO_Init+0x21c>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x21c>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	f002 0203 	and.w	r2, r2, #3
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	4093      	lsls	r3, r2
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e90:	4935      	ldr	r1, [pc, #212]	@ (8000f68 <HAL_GPIO_Init+0x304>)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f88 <HAL_GPIO_Init+0x324>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ec2:	4a31      	ldr	r2, [pc, #196]	@ (8000f88 <HAL_GPIO_Init+0x324>)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8000f88 <HAL_GPIO_Init+0x324>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000eec:	4a26      	ldr	r2, [pc, #152]	@ (8000f88 <HAL_GPIO_Init+0x324>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ef2:	4b25      	ldr	r3, [pc, #148]	@ (8000f88 <HAL_GPIO_Init+0x324>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f16:	4a1c      	ldr	r2, [pc, #112]	@ (8000f88 <HAL_GPIO_Init+0x324>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <HAL_GPIO_Init+0x324>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f40:	4a11      	ldr	r2, [pc, #68]	@ (8000f88 <HAL_GPIO_Init+0x324>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	f67f ae96 	bls.w	8000c80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3724      	adds	r7, #36	@ 0x24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40013800 	.word	0x40013800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40021400 	.word	0x40021400
 8000f84:	40021800 	.word	0x40021800
 8000f88:	40013c00 	.word	0x40013c00

08000f8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f9c:	787b      	ldrb	r3, [r7, #1]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa2:	887a      	ldrh	r2, [r7, #2]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fa8:	e003      	b.n	8000fb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000faa:	887b      	ldrh	r3, [r7, #2]
 8000fac:	041a      	lsls	r2, r3, #16
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	619a      	str	r2, [r3, #24]
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b085      	sub	sp, #20
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fd0:	887a      	ldrh	r2, [r7, #2]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	041a      	lsls	r2, r3, #16
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	43d9      	mvns	r1, r3
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	400b      	ands	r3, r1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	619a      	str	r2, [r3, #24]
}
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001000:	695a      	ldr	r2, [r3, #20]
 8001002:	88fb      	ldrh	r3, [r7, #6]
 8001004:	4013      	ands	r3, r2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d006      	beq.n	8001018 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800100a:	4a05      	ldr	r2, [pc, #20]	@ (8001020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001010:	88fb      	ldrh	r3, [r7, #6]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fba4 	bl	8000760 <HAL_GPIO_EXTI_Callback>
  }
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40013c00 	.word	0x40013c00

08001024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	e0cc      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001038:	4b68      	ldr	r3, [pc, #416]	@ (80011dc <HAL_RCC_ClockConfig+0x1b8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 030f 	and.w	r3, r3, #15
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	429a      	cmp	r2, r3
 8001044:	d90c      	bls.n	8001060 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001046:	4b65      	ldr	r3, [pc, #404]	@ (80011dc <HAL_RCC_ClockConfig+0x1b8>)
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800104e:	4b63      	ldr	r3, [pc, #396]	@ (80011dc <HAL_RCC_ClockConfig+0x1b8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d001      	beq.n	8001060 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e0b8      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d020      	beq.n	80010ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001078:	4b59      	ldr	r3, [pc, #356]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	4a58      	ldr	r2, [pc, #352]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001082:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001090:	4b53      	ldr	r3, [pc, #332]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	4a52      	ldr	r2, [pc, #328]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800109a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800109c:	4b50      	ldr	r3, [pc, #320]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	494d      	ldr	r1, [pc, #308]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d044      	beq.n	8001144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d107      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c2:	4b47      	ldr	r3, [pc, #284]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d119      	bne.n	8001102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e07f      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d003      	beq.n	80010e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d107      	bne.n	80010f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e2:	4b3f      	ldr	r3, [pc, #252]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d109      	bne.n	8001102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e06f      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f2:	4b3b      	ldr	r3, [pc, #236]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e067      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001102:	4b37      	ldr	r3, [pc, #220]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	f023 0203 	bic.w	r2, r3, #3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4934      	ldr	r1, [pc, #208]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001110:	4313      	orrs	r3, r2
 8001112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001114:	f7ff fc88 	bl	8000a28 <HAL_GetTick>
 8001118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111a:	e00a      	b.n	8001132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800111c:	f7ff fc84 	bl	8000a28 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800112a:	4293      	cmp	r3, r2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e04f      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001132:	4b2b      	ldr	r3, [pc, #172]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	f003 020c 	and.w	r2, r3, #12
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	429a      	cmp	r2, r3
 8001142:	d1eb      	bne.n	800111c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001144:	4b25      	ldr	r3, [pc, #148]	@ (80011dc <HAL_RCC_ClockConfig+0x1b8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 030f 	and.w	r3, r3, #15
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d20c      	bcs.n	800116c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4b22      	ldr	r3, [pc, #136]	@ (80011dc <HAL_RCC_ClockConfig+0x1b8>)
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115a:	4b20      	ldr	r3, [pc, #128]	@ (80011dc <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d001      	beq.n	800116c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e032      	b.n	80011d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	2b00      	cmp	r3, #0
 8001176:	d008      	beq.n	800118a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001178:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	4916      	ldr	r1, [pc, #88]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	4313      	orrs	r3, r2
 8001188:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0308 	and.w	r3, r3, #8
 8001192:	2b00      	cmp	r3, #0
 8001194:	d009      	beq.n	80011aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	490e      	ldr	r1, [pc, #56]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011aa:	f000 f855 	bl	8001258 <HAL_RCC_GetSysClockFreq>
 80011ae:	4602      	mov	r2, r0
 80011b0:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	490a      	ldr	r1, [pc, #40]	@ (80011e4 <HAL_RCC_ClockConfig+0x1c0>)
 80011bc:	5ccb      	ldrb	r3, [r1, r3]
 80011be:	fa22 f303 	lsr.w	r3, r2, r3
 80011c2:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <HAL_RCC_ClockConfig+0x1c4>)
 80011c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <HAL_RCC_ClockConfig+0x1c8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fbe8 	bl	80009a0 <HAL_InitTick>

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023c00 	.word	0x40023c00
 80011e0:	40023800 	.word	0x40023800
 80011e4:	080021ec 	.word	0x080021ec
 80011e8:	20000000 	.word	0x20000000
 80011ec:	20000004 	.word	0x20000004

080011f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011f4:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <HAL_RCC_GetHCLKFreq+0x14>)
 80011f6:	681b      	ldr	r3, [r3, #0]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	20000000 	.word	0x20000000

08001208 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800120c:	f7ff fff0 	bl	80011f0 <HAL_RCC_GetHCLKFreq>
 8001210:	4602      	mov	r2, r0
 8001212:	4b05      	ldr	r3, [pc, #20]	@ (8001228 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	0a9b      	lsrs	r3, r3, #10
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	4903      	ldr	r1, [pc, #12]	@ (800122c <HAL_RCC_GetPCLK1Freq+0x24>)
 800121e:	5ccb      	ldrb	r3, [r1, r3]
 8001220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001224:	4618      	mov	r0, r3
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40023800 	.word	0x40023800
 800122c:	080021fc 	.word	0x080021fc

08001230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001234:	f7ff ffdc 	bl	80011f0 <HAL_RCC_GetHCLKFreq>
 8001238:	4602      	mov	r2, r0
 800123a:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <HAL_RCC_GetPCLK2Freq+0x20>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	0b5b      	lsrs	r3, r3, #13
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	4903      	ldr	r1, [pc, #12]	@ (8001254 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001246:	5ccb      	ldrb	r3, [r1, r3]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	080021fc 	.word	0x080021fc

08001258 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800125c:	b0ae      	sub	sp, #184	@ 0xb8
 800125e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800127e:	4bcb      	ldr	r3, [pc, #812]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x354>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b0c      	cmp	r3, #12
 8001288:	f200 8206 	bhi.w	8001698 <HAL_RCC_GetSysClockFreq+0x440>
 800128c:	a201      	add	r2, pc, #4	@ (adr r2, 8001294 <HAL_RCC_GetSysClockFreq+0x3c>)
 800128e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001292:	bf00      	nop
 8001294:	080012c9 	.word	0x080012c9
 8001298:	08001699 	.word	0x08001699
 800129c:	08001699 	.word	0x08001699
 80012a0:	08001699 	.word	0x08001699
 80012a4:	080012d1 	.word	0x080012d1
 80012a8:	08001699 	.word	0x08001699
 80012ac:	08001699 	.word	0x08001699
 80012b0:	08001699 	.word	0x08001699
 80012b4:	080012d9 	.word	0x080012d9
 80012b8:	08001699 	.word	0x08001699
 80012bc:	08001699 	.word	0x08001699
 80012c0:	08001699 	.word	0x08001699
 80012c4:	080014c9 	.word	0x080014c9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012c8:	4bb9      	ldr	r3, [pc, #740]	@ (80015b0 <HAL_RCC_GetSysClockFreq+0x358>)
 80012ca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80012ce:	e1e7      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012d0:	4bb8      	ldr	r3, [pc, #736]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80012d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80012d6:	e1e3      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012d8:	4bb4      	ldr	r3, [pc, #720]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x354>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012e0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012e4:	4bb1      	ldr	r3, [pc, #708]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x354>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d071      	beq.n	80013d4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012f0:	4bae      	ldr	r3, [pc, #696]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x354>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	099b      	lsrs	r3, r3, #6
 80012f6:	2200      	movs	r2, #0
 80012f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80012fc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001300:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001308:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001312:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001316:	4622      	mov	r2, r4
 8001318:	462b      	mov	r3, r5
 800131a:	f04f 0000 	mov.w	r0, #0
 800131e:	f04f 0100 	mov.w	r1, #0
 8001322:	0159      	lsls	r1, r3, #5
 8001324:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001328:	0150      	lsls	r0, r2, #5
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4621      	mov	r1, r4
 8001330:	1a51      	subs	r1, r2, r1
 8001332:	6439      	str	r1, [r7, #64]	@ 0x40
 8001334:	4629      	mov	r1, r5
 8001336:	eb63 0301 	sbc.w	r3, r3, r1
 800133a:	647b      	str	r3, [r7, #68]	@ 0x44
 800133c:	f04f 0200 	mov.w	r2, #0
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001348:	4649      	mov	r1, r9
 800134a:	018b      	lsls	r3, r1, #6
 800134c:	4641      	mov	r1, r8
 800134e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001352:	4641      	mov	r1, r8
 8001354:	018a      	lsls	r2, r1, #6
 8001356:	4641      	mov	r1, r8
 8001358:	1a51      	subs	r1, r2, r1
 800135a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800135c:	4649      	mov	r1, r9
 800135e:	eb63 0301 	sbc.w	r3, r3, r1
 8001362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001370:	4649      	mov	r1, r9
 8001372:	00cb      	lsls	r3, r1, #3
 8001374:	4641      	mov	r1, r8
 8001376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800137a:	4641      	mov	r1, r8
 800137c:	00ca      	lsls	r2, r1, #3
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	4603      	mov	r3, r0
 8001384:	4622      	mov	r2, r4
 8001386:	189b      	adds	r3, r3, r2
 8001388:	633b      	str	r3, [r7, #48]	@ 0x30
 800138a:	462b      	mov	r3, r5
 800138c:	460a      	mov	r2, r1
 800138e:	eb42 0303 	adc.w	r3, r2, r3
 8001392:	637b      	str	r3, [r7, #52]	@ 0x34
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80013a0:	4629      	mov	r1, r5
 80013a2:	024b      	lsls	r3, r1, #9
 80013a4:	4621      	mov	r1, r4
 80013a6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013aa:	4621      	mov	r1, r4
 80013ac:	024a      	lsls	r2, r1, #9
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013b6:	2200      	movs	r2, #0
 80013b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80013bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80013c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80013c4:	f7fe ff1e 	bl	8000204 <__aeabi_uldivmod>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4613      	mov	r3, r2
 80013ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80013d2:	e067      	b.n	80014a4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d4:	4b75      	ldr	r3, [pc, #468]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x354>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	099b      	lsrs	r3, r3, #6
 80013da:	2200      	movs	r2, #0
 80013dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80013e0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80013e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80013ee:	2300      	movs	r3, #0
 80013f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80013f2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80013f6:	4622      	mov	r2, r4
 80013f8:	462b      	mov	r3, r5
 80013fa:	f04f 0000 	mov.w	r0, #0
 80013fe:	f04f 0100 	mov.w	r1, #0
 8001402:	0159      	lsls	r1, r3, #5
 8001404:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001408:	0150      	lsls	r0, r2, #5
 800140a:	4602      	mov	r2, r0
 800140c:	460b      	mov	r3, r1
 800140e:	4621      	mov	r1, r4
 8001410:	1a51      	subs	r1, r2, r1
 8001412:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001414:	4629      	mov	r1, r5
 8001416:	eb63 0301 	sbc.w	r3, r3, r1
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001428:	4649      	mov	r1, r9
 800142a:	018b      	lsls	r3, r1, #6
 800142c:	4641      	mov	r1, r8
 800142e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001432:	4641      	mov	r1, r8
 8001434:	018a      	lsls	r2, r1, #6
 8001436:	4641      	mov	r1, r8
 8001438:	ebb2 0a01 	subs.w	sl, r2, r1
 800143c:	4649      	mov	r1, r9
 800143e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800144e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001452:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001456:	4692      	mov	sl, r2
 8001458:	469b      	mov	fp, r3
 800145a:	4623      	mov	r3, r4
 800145c:	eb1a 0303 	adds.w	r3, sl, r3
 8001460:	623b      	str	r3, [r7, #32]
 8001462:	462b      	mov	r3, r5
 8001464:	eb4b 0303 	adc.w	r3, fp, r3
 8001468:	627b      	str	r3, [r7, #36]	@ 0x24
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001476:	4629      	mov	r1, r5
 8001478:	028b      	lsls	r3, r1, #10
 800147a:	4621      	mov	r1, r4
 800147c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001480:	4621      	mov	r1, r4
 8001482:	028a      	lsls	r2, r1, #10
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800148c:	2200      	movs	r2, #0
 800148e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001490:	677a      	str	r2, [r7, #116]	@ 0x74
 8001492:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001496:	f7fe feb5 	bl	8000204 <__aeabi_uldivmod>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4613      	mov	r3, r2
 80014a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80014a4:	4b41      	ldr	r3, [pc, #260]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x354>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	0c1b      	lsrs	r3, r3, #16
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	3301      	adds	r3, #1
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80014b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014c6:	e0eb      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014c8:	4b38      	ldr	r3, [pc, #224]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x354>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014d4:	4b35      	ldr	r3, [pc, #212]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x354>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d06b      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e0:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x354>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	099b      	lsrs	r3, r3, #6
 80014e6:	2200      	movs	r2, #0
 80014e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80014ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80014ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80014ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80014f4:	2300      	movs	r3, #0
 80014f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80014f8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80014fc:	4622      	mov	r2, r4
 80014fe:	462b      	mov	r3, r5
 8001500:	f04f 0000 	mov.w	r0, #0
 8001504:	f04f 0100 	mov.w	r1, #0
 8001508:	0159      	lsls	r1, r3, #5
 800150a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800150e:	0150      	lsls	r0, r2, #5
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	4621      	mov	r1, r4
 8001516:	1a51      	subs	r1, r2, r1
 8001518:	61b9      	str	r1, [r7, #24]
 800151a:	4629      	mov	r1, r5
 800151c:	eb63 0301 	sbc.w	r3, r3, r1
 8001520:	61fb      	str	r3, [r7, #28]
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800152e:	4659      	mov	r1, fp
 8001530:	018b      	lsls	r3, r1, #6
 8001532:	4651      	mov	r1, sl
 8001534:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001538:	4651      	mov	r1, sl
 800153a:	018a      	lsls	r2, r1, #6
 800153c:	4651      	mov	r1, sl
 800153e:	ebb2 0801 	subs.w	r8, r2, r1
 8001542:	4659      	mov	r1, fp
 8001544:	eb63 0901 	sbc.w	r9, r3, r1
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f04f 0300 	mov.w	r3, #0
 8001550:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001554:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001558:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800155c:	4690      	mov	r8, r2
 800155e:	4699      	mov	r9, r3
 8001560:	4623      	mov	r3, r4
 8001562:	eb18 0303 	adds.w	r3, r8, r3
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	462b      	mov	r3, r5
 800156a:	eb49 0303 	adc.w	r3, r9, r3
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800157c:	4629      	mov	r1, r5
 800157e:	024b      	lsls	r3, r1, #9
 8001580:	4621      	mov	r1, r4
 8001582:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001586:	4621      	mov	r1, r4
 8001588:	024a      	lsls	r2, r1, #9
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001592:	2200      	movs	r2, #0
 8001594:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001596:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001598:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800159c:	f7fe fe32 	bl	8000204 <__aeabi_uldivmod>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4613      	mov	r3, r2
 80015a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015aa:	e065      	b.n	8001678 <HAL_RCC_GetSysClockFreq+0x420>
 80015ac:	40023800 	.word	0x40023800
 80015b0:	00f42400 	.word	0x00f42400
 80015b4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b8:	4b3d      	ldr	r3, [pc, #244]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x458>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	2200      	movs	r2, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	4611      	mov	r1, r2
 80015c4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80015ca:	2300      	movs	r3, #0
 80015cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80015ce:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80015d2:	4642      	mov	r2, r8
 80015d4:	464b      	mov	r3, r9
 80015d6:	f04f 0000 	mov.w	r0, #0
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	0159      	lsls	r1, r3, #5
 80015e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015e4:	0150      	lsls	r0, r2, #5
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4641      	mov	r1, r8
 80015ec:	1a51      	subs	r1, r2, r1
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	4649      	mov	r1, r9
 80015f2:	eb63 0301 	sbc.w	r3, r3, r1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	f04f 0300 	mov.w	r3, #0
 8001600:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001604:	4659      	mov	r1, fp
 8001606:	018b      	lsls	r3, r1, #6
 8001608:	4651      	mov	r1, sl
 800160a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800160e:	4651      	mov	r1, sl
 8001610:	018a      	lsls	r2, r1, #6
 8001612:	4651      	mov	r1, sl
 8001614:	1a54      	subs	r4, r2, r1
 8001616:	4659      	mov	r1, fp
 8001618:	eb63 0501 	sbc.w	r5, r3, r1
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	f04f 0300 	mov.w	r3, #0
 8001624:	00eb      	lsls	r3, r5, #3
 8001626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800162a:	00e2      	lsls	r2, r4, #3
 800162c:	4614      	mov	r4, r2
 800162e:	461d      	mov	r5, r3
 8001630:	4643      	mov	r3, r8
 8001632:	18e3      	adds	r3, r4, r3
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	464b      	mov	r3, r9
 8001638:	eb45 0303 	adc.w	r3, r5, r3
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800164a:	4629      	mov	r1, r5
 800164c:	028b      	lsls	r3, r1, #10
 800164e:	4621      	mov	r1, r4
 8001650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001654:	4621      	mov	r1, r4
 8001656:	028a      	lsls	r2, r1, #10
 8001658:	4610      	mov	r0, r2
 800165a:	4619      	mov	r1, r3
 800165c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001660:	2200      	movs	r2, #0
 8001662:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001664:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001666:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800166a:	f7fe fdcb 	bl	8000204 <__aeabi_uldivmod>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4613      	mov	r3, r2
 8001674:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001678:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x458>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	0f1b      	lsrs	r3, r3, #28
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800168a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001696:	e003      	b.n	80016a0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0x45c>)
 800169a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800169e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	37b8      	adds	r7, #184	@ 0xb8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	00f42400 	.word	0x00f42400

080016b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e28d      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8083 	beq.w	80017de <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80016d8:	4b94      	ldr	r3, [pc, #592]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d019      	beq.n	8001718 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80016e4:	4b91      	ldr	r3, [pc, #580]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	f003 030c 	and.w	r3, r3, #12
        || \
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d106      	bne.n	80016fe <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80016f0:	4b8e      	ldr	r3, [pc, #568]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80016fc:	d00c      	beq.n	8001718 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fe:	4b8b      	ldr	r3, [pc, #556]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d112      	bne.n	8001730 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800170a:	4b88      	ldr	r3, [pc, #544]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001716:	d10b      	bne.n	8001730 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001718:	4b84      	ldr	r3, [pc, #528]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d05b      	beq.n	80017dc <HAL_RCC_OscConfig+0x124>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d157      	bne.n	80017dc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e25a      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001738:	d106      	bne.n	8001748 <HAL_RCC_OscConfig+0x90>
 800173a:	4b7c      	ldr	r3, [pc, #496]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a7b      	ldr	r2, [pc, #492]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001740:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	e01d      	b.n	8001784 <HAL_RCC_OscConfig+0xcc>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001750:	d10c      	bne.n	800176c <HAL_RCC_OscConfig+0xb4>
 8001752:	4b76      	ldr	r3, [pc, #472]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a75      	ldr	r2, [pc, #468]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001758:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	4b73      	ldr	r3, [pc, #460]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a72      	ldr	r2, [pc, #456]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001764:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	e00b      	b.n	8001784 <HAL_RCC_OscConfig+0xcc>
 800176c:	4b6f      	ldr	r3, [pc, #444]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a6e      	ldr	r2, [pc, #440]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001772:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b6c      	ldr	r3, [pc, #432]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a6b      	ldr	r2, [pc, #428]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 800177e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178c:	f7ff f94c 	bl	8000a28 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001794:	f7ff f948 	bl	8000a28 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b64      	cmp	r3, #100	@ 0x64
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e21f      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017a6:	4b61      	ldr	r3, [pc, #388]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d0f0      	beq.n	8001794 <HAL_RCC_OscConfig+0xdc>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff f938 	bl	8000a28 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff f934 	bl	8000a28 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	@ 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e20b      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ce:	4b57      	ldr	r3, [pc, #348]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x104>
 80017da:	e000      	b.n	80017de <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d06f      	beq.n	80018ca <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80017ea:	4b50      	ldr	r3, [pc, #320]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d017      	beq.n	8001826 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80017f6:	4b4d      	ldr	r3, [pc, #308]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
        || \
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d105      	bne.n	800180e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001802:	4b4a      	ldr	r3, [pc, #296]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00b      	beq.n	8001826 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800180e:	4b47      	ldr	r3, [pc, #284]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001816:	2b0c      	cmp	r3, #12
 8001818:	d11c      	bne.n	8001854 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800181a:	4b44      	ldr	r3, [pc, #272]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d116      	bne.n	8001854 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	4b41      	ldr	r3, [pc, #260]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <HAL_RCC_OscConfig+0x186>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e1d3      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b3b      	ldr	r3, [pc, #236]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4937      	ldr	r1, [pc, #220]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	e03a      	b.n	80018ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800185c:	4b34      	ldr	r3, [pc, #208]	@ (8001930 <HAL_RCC_OscConfig+0x278>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7ff f8e1 	bl	8000a28 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186a:	f7ff f8dd 	bl	8000a28 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e1b4      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	4b2b      	ldr	r3, [pc, #172]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b28      	ldr	r3, [pc, #160]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4925      	ldr	r1, [pc, #148]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
 800189c:	e015      	b.n	80018ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189e:	4b24      	ldr	r3, [pc, #144]	@ (8001930 <HAL_RCC_OscConfig+0x278>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff f8c0 	bl	8000a28 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ac:	f7ff f8bc 	bl	8000a28 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e193      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d036      	beq.n	8001944 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d016      	beq.n	800190c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018e4:	f7ff f8a0 	bl	8000a28 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff f89c 	bl	8000a28 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e173      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <HAL_RCC_OscConfig+0x274>)
 8001900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x234>
 800190a:	e01b      	b.n	8001944 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_RCC_OscConfig+0x27c>)
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff f889 	bl	8000a28 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001918:	e00e      	b.n	8001938 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191a:	f7ff f885 	bl	8000a28 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d907      	bls.n	8001938 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e15c      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
 800192c:	40023800 	.word	0x40023800
 8001930:	42470000 	.word	0x42470000
 8001934:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	4b8a      	ldr	r3, [pc, #552]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 800193a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1ea      	bne.n	800191a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0304 	and.w	r3, r3, #4
 800194c:	2b00      	cmp	r3, #0
 800194e:	f000 8097 	beq.w	8001a80 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001952:	2300      	movs	r3, #0
 8001954:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001956:	4b83      	ldr	r3, [pc, #524]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10f      	bne.n	8001982 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b7f      	ldr	r3, [pc, #508]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	4a7e      	ldr	r2, [pc, #504]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 800196c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001970:	6413      	str	r3, [r2, #64]	@ 0x40
 8001972:	4b7c      	ldr	r3, [pc, #496]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800197e:	2301      	movs	r3, #1
 8001980:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001982:	4b79      	ldr	r3, [pc, #484]	@ (8001b68 <HAL_RCC_OscConfig+0x4b0>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d118      	bne.n	80019c0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800198e:	4b76      	ldr	r3, [pc, #472]	@ (8001b68 <HAL_RCC_OscConfig+0x4b0>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a75      	ldr	r2, [pc, #468]	@ (8001b68 <HAL_RCC_OscConfig+0x4b0>)
 8001994:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001998:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199a:	f7ff f845 	bl	8000a28 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a2:	f7ff f841 	bl	8000a28 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e118      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001b68 <HAL_RCC_OscConfig+0x4b0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x31e>
 80019c8:	4b66      	ldr	r3, [pc, #408]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019cc:	4a65      	ldr	r2, [pc, #404]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d4:	e01c      	b.n	8001a10 <HAL_RCC_OscConfig+0x358>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x340>
 80019de:	4b61      	ldr	r3, [pc, #388]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 80019e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019e2:	4a60      	ldr	r2, [pc, #384]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80019ea:	4b5e      	ldr	r3, [pc, #376]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ee:	4a5d      	ldr	r2, [pc, #372]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0x358>
 80019f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 80019fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fc:	4a59      	ldr	r2, [pc, #356]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 80019fe:	f023 0301 	bic.w	r3, r3, #1
 8001a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a04:	4b57      	ldr	r3, [pc, #348]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a08:	4a56      	ldr	r2, [pc, #344]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001a0a:	f023 0304 	bic.w	r3, r3, #4
 8001a0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d015      	beq.n	8001a44 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a18:	f7ff f806 	bl	8000a28 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a1e:	e00a      	b.n	8001a36 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a20:	f7ff f802 	bl	8000a28 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e0d7      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a36:	4b4b      	ldr	r3, [pc, #300]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0ee      	beq.n	8001a20 <HAL_RCC_OscConfig+0x368>
 8001a42:	e014      	b.n	8001a6e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7fe fff0 	bl	8000a28 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4c:	f7fe ffec 	bl	8000a28 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0c1      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a62:	4b40      	ldr	r3, [pc, #256]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1ee      	bne.n	8001a4c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a6e:	7dfb      	ldrb	r3, [r7, #23]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d105      	bne.n	8001a80 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a74:	4b3b      	ldr	r3, [pc, #236]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	4a3a      	ldr	r2, [pc, #232]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a7e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80ad 	beq.w	8001be4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a8a:	4b36      	ldr	r3, [pc, #216]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d060      	beq.n	8001b58 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d145      	bne.n	8001b2a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9e:	4b33      	ldr	r3, [pc, #204]	@ (8001b6c <HAL_RCC_OscConfig+0x4b4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7fe ffc0 	bl	8000a28 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7fe ffbc 	bl	8000a28 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e093      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abe:	4b29      	ldr	r3, [pc, #164]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69da      	ldr	r2, [r3, #28]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	431a      	orrs	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad8:	019b      	lsls	r3, r3, #6
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	041b      	lsls	r3, r3, #16
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aec:	061b      	lsls	r3, r3, #24
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	071b      	lsls	r3, r3, #28
 8001af6:	491b      	ldr	r1, [pc, #108]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <HAL_RCC_OscConfig+0x4b4>)
 8001afe:	2201      	movs	r2, #1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b02:	f7fe ff91 	bl	8000a28 <HAL_GetTick>
 8001b06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0a:	f7fe ff8d 	bl	8000a28 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e064      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b1c:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x452>
 8001b28:	e05c      	b.n	8001be4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2a:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <HAL_RCC_OscConfig+0x4b4>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7fe ff7a 	bl	8000a28 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7fe ff76 	bl	8000a28 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e04d      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x480>
 8001b56:	e045      	b.n	8001be4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d107      	bne.n	8001b70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e040      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40007000 	.word	0x40007000
 8001b6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <HAL_RCC_OscConfig+0x538>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d030      	beq.n	8001be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d129      	bne.n	8001be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d122      	bne.n	8001be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ba6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d119      	bne.n	8001be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bb6:	085b      	lsrs	r3, r3, #1
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d10f      	bne.n	8001be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bda:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800

08001bf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e042      	b.n	8001c8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe fde2 	bl	80007e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	@ 0x24
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f82b 	bl	8001c94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	691a      	ldr	r2, [r3, #16]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2220      	movs	r2, #32
 8001c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c98:	b0c0      	sub	sp, #256	@ 0x100
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cb0:	68d9      	ldr	r1, [r3, #12]
 8001cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	ea40 0301 	orr.w	r3, r0, r1
 8001cbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001cec:	f021 010c 	bic.w	r1, r1, #12
 8001cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d0e:	6999      	ldr	r1, [r3, #24]
 8001d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	ea40 0301 	orr.w	r3, r0, r1
 8001d1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4b8f      	ldr	r3, [pc, #572]	@ (8001f60 <UART_SetConfig+0x2cc>)
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d005      	beq.n	8001d34 <UART_SetConfig+0xa0>
 8001d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f64 <UART_SetConfig+0x2d0>)
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d104      	bne.n	8001d3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d34:	f7ff fa7c 	bl	8001230 <HAL_RCC_GetPCLK2Freq>
 8001d38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001d3c:	e003      	b.n	8001d46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d3e:	f7ff fa63 	bl	8001208 <HAL_RCC_GetPCLK1Freq>
 8001d42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d50:	f040 810c 	bne.w	8001f6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001d5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001d62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001d66:	4622      	mov	r2, r4
 8001d68:	462b      	mov	r3, r5
 8001d6a:	1891      	adds	r1, r2, r2
 8001d6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001d6e:	415b      	adcs	r3, r3
 8001d70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d76:	4621      	mov	r1, r4
 8001d78:	eb12 0801 	adds.w	r8, r2, r1
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	eb43 0901 	adc.w	r9, r3, r1
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d96:	4690      	mov	r8, r2
 8001d98:	4699      	mov	r9, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	eb18 0303 	adds.w	r3, r8, r3
 8001da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001da4:	462b      	mov	r3, r5
 8001da6:	eb49 0303 	adc.w	r3, r9, r3
 8001daa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001dba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001dbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	18db      	adds	r3, r3, r3
 8001dc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8001dc8:	4613      	mov	r3, r2
 8001dca:	eb42 0303 	adc.w	r3, r2, r3
 8001dce:	657b      	str	r3, [r7, #84]	@ 0x54
 8001dd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001dd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001dd8:	f7fe fa14 	bl	8000204 <__aeabi_uldivmod>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	4b61      	ldr	r3, [pc, #388]	@ (8001f68 <UART_SetConfig+0x2d4>)
 8001de2:	fba3 2302 	umull	r2, r3, r3, r2
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	011c      	lsls	r4, r3, #4
 8001dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001dee:	2200      	movs	r2, #0
 8001df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001df4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001df8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001dfc:	4642      	mov	r2, r8
 8001dfe:	464b      	mov	r3, r9
 8001e00:	1891      	adds	r1, r2, r2
 8001e02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e04:	415b      	adcs	r3, r3
 8001e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e0c:	4641      	mov	r1, r8
 8001e0e:	eb12 0a01 	adds.w	sl, r2, r1
 8001e12:	4649      	mov	r1, r9
 8001e14:	eb43 0b01 	adc.w	fp, r3, r1
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e2c:	4692      	mov	sl, r2
 8001e2e:	469b      	mov	fp, r3
 8001e30:	4643      	mov	r3, r8
 8001e32:	eb1a 0303 	adds.w	r3, sl, r3
 8001e36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001e3a:	464b      	mov	r3, r9
 8001e3c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001e50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001e54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	18db      	adds	r3, r3, r3
 8001e5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001e5e:	4613      	mov	r3, r2
 8001e60:	eb42 0303 	adc.w	r3, r2, r3
 8001e64:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001e6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001e6e:	f7fe f9c9 	bl	8000204 <__aeabi_uldivmod>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4611      	mov	r1, r2
 8001e78:	4b3b      	ldr	r3, [pc, #236]	@ (8001f68 <UART_SetConfig+0x2d4>)
 8001e7a:	fba3 2301 	umull	r2, r3, r3, r1
 8001e7e:	095b      	lsrs	r3, r3, #5
 8001e80:	2264      	movs	r2, #100	@ 0x64
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	1acb      	subs	r3, r1, r3
 8001e88:	00db      	lsls	r3, r3, #3
 8001e8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001e8e:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <UART_SetConfig+0x2d4>)
 8001e90:	fba3 2302 	umull	r2, r3, r3, r2
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001e9c:	441c      	add	r4, r3
 8001e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ea8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001eac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001eb0:	4642      	mov	r2, r8
 8001eb2:	464b      	mov	r3, r9
 8001eb4:	1891      	adds	r1, r2, r2
 8001eb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001eb8:	415b      	adcs	r3, r3
 8001eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ebc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001ec0:	4641      	mov	r1, r8
 8001ec2:	1851      	adds	r1, r2, r1
 8001ec4:	6339      	str	r1, [r7, #48]	@ 0x30
 8001ec6:	4649      	mov	r1, r9
 8001ec8:	414b      	adcs	r3, r1
 8001eca:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001ed8:	4659      	mov	r1, fp
 8001eda:	00cb      	lsls	r3, r1, #3
 8001edc:	4651      	mov	r1, sl
 8001ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ee2:	4651      	mov	r1, sl
 8001ee4:	00ca      	lsls	r2, r1, #3
 8001ee6:	4610      	mov	r0, r2
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4603      	mov	r3, r0
 8001eec:	4642      	mov	r2, r8
 8001eee:	189b      	adds	r3, r3, r2
 8001ef0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001ef4:	464b      	mov	r3, r9
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	eb42 0303 	adc.w	r3, r2, r3
 8001efc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001f10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001f14:	460b      	mov	r3, r1
 8001f16:	18db      	adds	r3, r3, r3
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	eb42 0303 	adc.w	r3, r2, r3
 8001f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001f2a:	f7fe f96b 	bl	8000204 <__aeabi_uldivmod>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	460b      	mov	r3, r1
 8001f32:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <UART_SetConfig+0x2d4>)
 8001f34:	fba3 1302 	umull	r1, r3, r3, r2
 8001f38:	095b      	lsrs	r3, r3, #5
 8001f3a:	2164      	movs	r1, #100	@ 0x64
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	3332      	adds	r3, #50	@ 0x32
 8001f46:	4a08      	ldr	r2, [pc, #32]	@ (8001f68 <UART_SetConfig+0x2d4>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	f003 0207 	and.w	r2, r3, #7
 8001f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4422      	add	r2, r4
 8001f5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001f5c:	e106      	b.n	800216c <UART_SetConfig+0x4d8>
 8001f5e:	bf00      	nop
 8001f60:	40011000 	.word	0x40011000
 8001f64:	40011400 	.word	0x40011400
 8001f68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f70:	2200      	movs	r2, #0
 8001f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001f76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001f7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001f7e:	4642      	mov	r2, r8
 8001f80:	464b      	mov	r3, r9
 8001f82:	1891      	adds	r1, r2, r2
 8001f84:	6239      	str	r1, [r7, #32]
 8001f86:	415b      	adcs	r3, r3
 8001f88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001f8e:	4641      	mov	r1, r8
 8001f90:	1854      	adds	r4, r2, r1
 8001f92:	4649      	mov	r1, r9
 8001f94:	eb43 0501 	adc.w	r5, r3, r1
 8001f98:	f04f 0200 	mov.w	r2, #0
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	00eb      	lsls	r3, r5, #3
 8001fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001fa6:	00e2      	lsls	r2, r4, #3
 8001fa8:	4614      	mov	r4, r2
 8001faa:	461d      	mov	r5, r3
 8001fac:	4643      	mov	r3, r8
 8001fae:	18e3      	adds	r3, r4, r3
 8001fb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	eb45 0303 	adc.w	r3, r5, r3
 8001fba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001fca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	f04f 0300 	mov.w	r3, #0
 8001fd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001fda:	4629      	mov	r1, r5
 8001fdc:	008b      	lsls	r3, r1, #2
 8001fde:	4621      	mov	r1, r4
 8001fe0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fe4:	4621      	mov	r1, r4
 8001fe6:	008a      	lsls	r2, r1, #2
 8001fe8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001fec:	f7fe f90a 	bl	8000204 <__aeabi_uldivmod>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4b60      	ldr	r3, [pc, #384]	@ (8002178 <UART_SetConfig+0x4e4>)
 8001ff6:	fba3 2302 	umull	r2, r3, r3, r2
 8001ffa:	095b      	lsrs	r3, r3, #5
 8001ffc:	011c      	lsls	r4, r3, #4
 8001ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002002:	2200      	movs	r2, #0
 8002004:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002008:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800200c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002010:	4642      	mov	r2, r8
 8002012:	464b      	mov	r3, r9
 8002014:	1891      	adds	r1, r2, r2
 8002016:	61b9      	str	r1, [r7, #24]
 8002018:	415b      	adcs	r3, r3
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002020:	4641      	mov	r1, r8
 8002022:	1851      	adds	r1, r2, r1
 8002024:	6139      	str	r1, [r7, #16]
 8002026:	4649      	mov	r1, r9
 8002028:	414b      	adcs	r3, r1
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	f04f 0200 	mov.w	r2, #0
 8002030:	f04f 0300 	mov.w	r3, #0
 8002034:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002038:	4659      	mov	r1, fp
 800203a:	00cb      	lsls	r3, r1, #3
 800203c:	4651      	mov	r1, sl
 800203e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002042:	4651      	mov	r1, sl
 8002044:	00ca      	lsls	r2, r1, #3
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	4603      	mov	r3, r0
 800204c:	4642      	mov	r2, r8
 800204e:	189b      	adds	r3, r3, r2
 8002050:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002054:	464b      	mov	r3, r9
 8002056:	460a      	mov	r2, r1
 8002058:	eb42 0303 	adc.w	r3, r2, r3
 800205c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	67bb      	str	r3, [r7, #120]	@ 0x78
 800206a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800206c:	f04f 0200 	mov.w	r2, #0
 8002070:	f04f 0300 	mov.w	r3, #0
 8002074:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002078:	4649      	mov	r1, r9
 800207a:	008b      	lsls	r3, r1, #2
 800207c:	4641      	mov	r1, r8
 800207e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002082:	4641      	mov	r1, r8
 8002084:	008a      	lsls	r2, r1, #2
 8002086:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800208a:	f7fe f8bb 	bl	8000204 <__aeabi_uldivmod>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4611      	mov	r1, r2
 8002094:	4b38      	ldr	r3, [pc, #224]	@ (8002178 <UART_SetConfig+0x4e4>)
 8002096:	fba3 2301 	umull	r2, r3, r3, r1
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	2264      	movs	r2, #100	@ 0x64
 800209e:	fb02 f303 	mul.w	r3, r2, r3
 80020a2:	1acb      	subs	r3, r1, r3
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	3332      	adds	r3, #50	@ 0x32
 80020a8:	4a33      	ldr	r2, [pc, #204]	@ (8002178 <UART_SetConfig+0x4e4>)
 80020aa:	fba2 2303 	umull	r2, r3, r2, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020b4:	441c      	add	r4, r3
 80020b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ba:	2200      	movs	r2, #0
 80020bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80020be:	677a      	str	r2, [r7, #116]	@ 0x74
 80020c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80020c4:	4642      	mov	r2, r8
 80020c6:	464b      	mov	r3, r9
 80020c8:	1891      	adds	r1, r2, r2
 80020ca:	60b9      	str	r1, [r7, #8]
 80020cc:	415b      	adcs	r3, r3
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020d4:	4641      	mov	r1, r8
 80020d6:	1851      	adds	r1, r2, r1
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	4649      	mov	r1, r9
 80020dc:	414b      	adcs	r3, r1
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80020ec:	4659      	mov	r1, fp
 80020ee:	00cb      	lsls	r3, r1, #3
 80020f0:	4651      	mov	r1, sl
 80020f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020f6:	4651      	mov	r1, sl
 80020f8:	00ca      	lsls	r2, r1, #3
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	4603      	mov	r3, r0
 8002100:	4642      	mov	r2, r8
 8002102:	189b      	adds	r3, r3, r2
 8002104:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002106:	464b      	mov	r3, r9
 8002108:	460a      	mov	r2, r1
 800210a:	eb42 0303 	adc.w	r3, r2, r3
 800210e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	663b      	str	r3, [r7, #96]	@ 0x60
 800211a:	667a      	str	r2, [r7, #100]	@ 0x64
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002128:	4649      	mov	r1, r9
 800212a:	008b      	lsls	r3, r1, #2
 800212c:	4641      	mov	r1, r8
 800212e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002132:	4641      	mov	r1, r8
 8002134:	008a      	lsls	r2, r1, #2
 8002136:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800213a:	f7fe f863 	bl	8000204 <__aeabi_uldivmod>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4b0d      	ldr	r3, [pc, #52]	@ (8002178 <UART_SetConfig+0x4e4>)
 8002144:	fba3 1302 	umull	r1, r3, r3, r2
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	2164      	movs	r1, #100	@ 0x64
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	3332      	adds	r3, #50	@ 0x32
 8002156:	4a08      	ldr	r2, [pc, #32]	@ (8002178 <UART_SetConfig+0x4e4>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	f003 020f 	and.w	r2, r3, #15
 8002162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4422      	add	r2, r4
 800216a:	609a      	str	r2, [r3, #8]
}
 800216c:	bf00      	nop
 800216e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002172:	46bd      	mov	sp, r7
 8002174:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002178:	51eb851f 	.word	0x51eb851f

0800217c <memset>:
 800217c:	4402      	add	r2, r0
 800217e:	4603      	mov	r3, r0
 8002180:	4293      	cmp	r3, r2
 8002182:	d100      	bne.n	8002186 <memset+0xa>
 8002184:	4770      	bx	lr
 8002186:	f803 1b01 	strb.w	r1, [r3], #1
 800218a:	e7f9      	b.n	8002180 <memset+0x4>

0800218c <__libc_init_array>:
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	4d0d      	ldr	r5, [pc, #52]	@ (80021c4 <__libc_init_array+0x38>)
 8002190:	4c0d      	ldr	r4, [pc, #52]	@ (80021c8 <__libc_init_array+0x3c>)
 8002192:	1b64      	subs	r4, r4, r5
 8002194:	10a4      	asrs	r4, r4, #2
 8002196:	2600      	movs	r6, #0
 8002198:	42a6      	cmp	r6, r4
 800219a:	d109      	bne.n	80021b0 <__libc_init_array+0x24>
 800219c:	4d0b      	ldr	r5, [pc, #44]	@ (80021cc <__libc_init_array+0x40>)
 800219e:	4c0c      	ldr	r4, [pc, #48]	@ (80021d0 <__libc_init_array+0x44>)
 80021a0:	f000 f818 	bl	80021d4 <_init>
 80021a4:	1b64      	subs	r4, r4, r5
 80021a6:	10a4      	asrs	r4, r4, #2
 80021a8:	2600      	movs	r6, #0
 80021aa:	42a6      	cmp	r6, r4
 80021ac:	d105      	bne.n	80021ba <__libc_init_array+0x2e>
 80021ae:	bd70      	pop	{r4, r5, r6, pc}
 80021b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80021b4:	4798      	blx	r3
 80021b6:	3601      	adds	r6, #1
 80021b8:	e7ee      	b.n	8002198 <__libc_init_array+0xc>
 80021ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80021be:	4798      	blx	r3
 80021c0:	3601      	adds	r6, #1
 80021c2:	e7f2      	b.n	80021aa <__libc_init_array+0x1e>
 80021c4:	0800220c 	.word	0x0800220c
 80021c8:	0800220c 	.word	0x0800220c
 80021cc:	0800220c 	.word	0x0800220c
 80021d0:	08002210 	.word	0x08002210

080021d4 <_init>:
 80021d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021d6:	bf00      	nop
 80021d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021da:	bc08      	pop	{r3}
 80021dc:	469e      	mov	lr, r3
 80021de:	4770      	bx	lr

080021e0 <_fini>:
 80021e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e2:	bf00      	nop
 80021e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021e6:	bc08      	pop	{r3}
 80021e8:	469e      	mov	lr, r3
 80021ea:	4770      	bx	lr
