
radar_detector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c9c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000644  08004e6c  08004e6c  00005e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054b0  080054b0  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080054b0  080054b0  000064b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054b8  080054b8  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054b8  080054b8  000064b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054bc  080054bc  000064bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080054c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  2000005c  0800551c  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  0800551c  000072d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e796  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a4  00000000  00000000  00015822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  000179c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a24  00000000  00000000  000186b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002249c  00000000  00000000  000190dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001012f  00000000  00000000  0003b578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1234  00000000  00000000  0004b6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011c8db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae4  00000000  00000000  0011c920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00120404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e54 	.word	0x08004e54

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004e54 	.word	0x08004e54

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <get_median>:
uint32_t store_millis;
uint32_t value1 = 0; //first measured value
uint32_t value2 = 0; //second measured value
uint16_t distance = 0; //in cm

uint32_t get_median(uint32_t* values, uint8_t size) {
 80005ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005f0:	b089      	sub	sp, #36	@ 0x24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	6078      	str	r0, [r7, #4]
 80005f6:	460b      	mov	r3, r1
 80005f8:	70fb      	strb	r3, [r7, #3]
 80005fa:	466b      	mov	r3, sp
 80005fc:	461e      	mov	r6, r3
	uint32_t sorted[size];
 80005fe:	78f9      	ldrb	r1, [r7, #3]
 8000600:	460b      	mov	r3, r1
 8000602:	3b01      	subs	r3, #1
 8000604:	617b      	str	r3, [r7, #20]
 8000606:	b2cb      	uxtb	r3, r1
 8000608:	2200      	movs	r2, #0
 800060a:	4698      	mov	r8, r3
 800060c:	4691      	mov	r9, r2
 800060e:	f04f 0200 	mov.w	r2, #0
 8000612:	f04f 0300 	mov.w	r3, #0
 8000616:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800061a:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800061e:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000622:	b2cb      	uxtb	r3, r1
 8000624:	2200      	movs	r2, #0
 8000626:	461c      	mov	r4, r3
 8000628:	4615      	mov	r5, r2
 800062a:	f04f 0200 	mov.w	r2, #0
 800062e:	f04f 0300 	mov.w	r3, #0
 8000632:	016b      	lsls	r3, r5, #5
 8000634:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000638:	0162      	lsls	r2, r4, #5
 800063a:	460b      	mov	r3, r1
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	3307      	adds	r3, #7
 8000640:	08db      	lsrs	r3, r3, #3
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	ebad 0d03 	sub.w	sp, sp, r3
 8000648:	466b      	mov	r3, sp
 800064a:	3303      	adds	r3, #3
 800064c:	089b      	lsrs	r3, r3, #2
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	613b      	str	r3, [r7, #16]
	memcpy(sorted, values, size * sizeof(uint32_t));
 8000652:	78fb      	ldrb	r3, [r7, #3]
 8000654:	009b      	lsls	r3, r3, #2
 8000656:	461a      	mov	r2, r3
 8000658:	6879      	ldr	r1, [r7, #4]
 800065a:	6938      	ldr	r0, [r7, #16]
 800065c:	f003 ffb0 	bl	80045c0 <memcpy>

	//bubble sort

	for(int i = 0; i < size - 1; i++) {
 8000660:	2300      	movs	r3, #0
 8000662:	61fb      	str	r3, [r7, #28]
 8000664:	e029      	b.n	80006ba <get_median+0xce>
		for (int j = i + 1; j < size; j++) {
 8000666:	69fb      	ldr	r3, [r7, #28]
 8000668:	3301      	adds	r3, #1
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	e01e      	b.n	80006ac <get_median+0xc0>
			if(sorted[i] > sorted[j]) {
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	69fa      	ldr	r2, [r7, #28]
 8000672:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000676:	693b      	ldr	r3, [r7, #16]
 8000678:	69b9      	ldr	r1, [r7, #24]
 800067a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800067e:	429a      	cmp	r2, r3
 8000680:	d911      	bls.n	80006a6 <get_median+0xba>
				uint32_t tmp = sorted[i];
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	69fa      	ldr	r2, [r7, #28]
 8000686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800068a:	60fb      	str	r3, [r7, #12]
				sorted[i] = sorted[j];
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	69ba      	ldr	r2, [r7, #24]
 8000690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	69fa      	ldr	r2, [r7, #28]
 8000698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				sorted[j] = tmp;
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	69ba      	ldr	r2, [r7, #24]
 80006a0:	68f9      	ldr	r1, [r7, #12]
 80006a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for (int j = i + 1; j < size; j++) {
 80006a6:	69bb      	ldr	r3, [r7, #24]
 80006a8:	3301      	adds	r3, #1
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	69ba      	ldr	r2, [r7, #24]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	dbdc      	blt.n	800066e <get_median+0x82>
	for(int i = 0; i < size - 1; i++) {
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	3301      	adds	r3, #1
 80006b8:	61fb      	str	r3, [r7, #28]
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	3b01      	subs	r3, #1
 80006be:	69fa      	ldr	r2, [r7, #28]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	dbd0      	blt.n	8000666 <get_median+0x7a>
			}
		}
	}
	return sorted[size/2]; // median
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	085b      	lsrs	r3, r3, #1
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006d2:	46b5      	mov	sp, r6
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3724      	adds	r7, #36	@ 0x24
 80006d8:	46bd      	mov	sp, r7
 80006da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080006e0 <median_filter>:

uint32_t median_filter(uint32_t new_value) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

	//reject bad data, spec for HCSR04 is around 20 cm to 400 cm
	if(new_value < 5 || new_value > 400) {
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	2b04      	cmp	r3, #4
 80006ec:	d903      	bls.n	80006f6 <median_filter+0x16>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80006f4:	d90d      	bls.n	8000712 <median_filter+0x32>
		return get_median(dist_buffer, buffer_filled ? MEDIAN_FILTER_SIZE : dist_index);
 80006f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <median_filter+0x80>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d102      	bne.n	8000704 <median_filter+0x24>
 80006fe:	4b19      	ldr	r3, [pc, #100]	@ (8000764 <median_filter+0x84>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	e000      	b.n	8000706 <median_filter+0x26>
 8000704:	2307      	movs	r3, #7
 8000706:	4619      	mov	r1, r3
 8000708:	4817      	ldr	r0, [pc, #92]	@ (8000768 <median_filter+0x88>)
 800070a:	f7ff ff6f 	bl	80005ec <get_median>
 800070e:	4603      	mov	r3, r0
 8000710:	e021      	b.n	8000756 <median_filter+0x76>
	}

	dist_buffer[dist_index++] = new_value;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <median_filter+0x84>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	1c5a      	adds	r2, r3, #1
 8000718:	b2d1      	uxtb	r1, r2
 800071a:	4a12      	ldr	r2, [pc, #72]	@ (8000764 <median_filter+0x84>)
 800071c:	7011      	strb	r1, [r2, #0]
 800071e:	4619      	mov	r1, r3
 8000720:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <median_filter+0x88>)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if(dist_index >= MEDIAN_FILTER_SIZE) {
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <median_filter+0x84>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b06      	cmp	r3, #6
 800072e:	d905      	bls.n	800073c <median_filter+0x5c>
		dist_index = 0;
 8000730:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <median_filter+0x84>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
		buffer_filled = 1;
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <median_filter+0x80>)
 8000738:	2201      	movs	r2, #1
 800073a:	701a      	strb	r2, [r3, #0]
	}

	return get_median(dist_buffer, buffer_filled ? MEDIAN_FILTER_SIZE : dist_index);
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <median_filter+0x80>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <median_filter+0x6a>
 8000744:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <median_filter+0x84>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	e000      	b.n	800074c <median_filter+0x6c>
 800074a:	2307      	movs	r3, #7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	@ (8000768 <median_filter+0x88>)
 8000750:	f7ff ff4c 	bl	80005ec <get_median>
 8000754:	4603      	mov	r3, r0
}
 8000756:	4618      	mov	r0, r3
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000095 	.word	0x20000095
 8000764:	20000094 	.word	0x20000094
 8000768:	20000078 	.word	0x20000078

0800076c <HCR04_init>:

void HCR04_init(TIM_HandleTypeDef *tim) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(tim);
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f002 f8c5 	bl	8002904 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000780:	4803      	ldr	r0, [pc, #12]	@ (8000790 <HCR04_init+0x24>)
 8000782:	f001 fa3b 	bl	8001bfc <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020000 	.word	0x40020000

08000794 <HCSR04_read>:


uint16_t HCSR04_read(TIM_HandleTypeDef *tim) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]

	//set for 10 uS
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007a2:	4831      	ldr	r0, [pc, #196]	@ (8000868 <HCSR04_read+0xd4>)
 80007a4:	f001 fa2a 	bl	8001bfc <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COUNTER(tim, 0);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	@ 0x24
	while(__HAL_TIM_GET_COUNTER(tim) < 10); //wait for 10 uS
 80007b0:	bf00      	nop
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007b8:	2b09      	cmp	r3, #9
 80007ba:	d9fa      	bls.n	80007b2 <HCSR04_read+0x1e>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET); //set back to low
 80007bc:	2200      	movs	r2, #0
 80007be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007c2:	4829      	ldr	r0, [pc, #164]	@ (8000868 <HCSR04_read+0xd4>)
 80007c4:	f001 fa1a 	bl	8001bfc <HAL_GPIO_WritePin>

	//now reading starts
	store_millis = HAL_GetTick(); //use tick to avoid infinite while loop, stores current time
 80007c8:	f000 ff2a 	bl	8001620 <HAL_GetTick>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a27      	ldr	r2, [pc, #156]	@ (800086c <HCSR04_read+0xd8>)
 80007d0:	6013      	str	r3, [r2, #0]
	//wait for echo pin to go HIGH
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET) {
 80007d2:	e009      	b.n	80007e8 <HCSR04_read+0x54>
		if((HAL_GetTick() - store_millis) > 100) return 0; //timeout
 80007d4:	f000 ff24 	bl	8001620 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	4b24      	ldr	r3, [pc, #144]	@ (800086c <HCSR04_read+0xd8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	2b64      	cmp	r3, #100	@ 0x64
 80007e2:	d901      	bls.n	80007e8 <HCSR04_read+0x54>
 80007e4:	2300      	movs	r3, #0
 80007e6:	e03a      	b.n	800085e <HCSR04_read+0xca>
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET) {
 80007e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007ec:	481e      	ldr	r0, [pc, #120]	@ (8000868 <HCSR04_read+0xd4>)
 80007ee:	f001 f9ed 	bl	8001bcc <HAL_GPIO_ReadPin>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d0ed      	beq.n	80007d4 <HCSR04_read+0x40>
	}

	value1 = __HAL_TIM_GET_COUNTER(tim);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000870 <HCSR04_read+0xdc>)
 8000800:	6013      	str	r3, [r2, #0]

	store_millis = HAL_GetTick();//stores current time
 8000802:	f000 ff0d 	bl	8001620 <HAL_GetTick>
 8000806:	4603      	mov	r3, r0
 8000808:	4a18      	ldr	r2, [pc, #96]	@ (800086c <HCSR04_read+0xd8>)
 800080a:	6013      	str	r3, [r2, #0]
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) {
 800080c:	e009      	b.n	8000822 <HCSR04_read+0x8e>
		if((HAL_GetTick() - store_millis) > 80) return 0; // timeout
 800080e:	f000 ff07 	bl	8001620 <HAL_GetTick>
 8000812:	4602      	mov	r2, r0
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <HCSR04_read+0xd8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	2b50      	cmp	r3, #80	@ 0x50
 800081c:	d901      	bls.n	8000822 <HCSR04_read+0x8e>
 800081e:	2300      	movs	r3, #0
 8000820:	e01d      	b.n	800085e <HCSR04_read+0xca>
	while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET) {
 8000822:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000826:	4810      	ldr	r0, [pc, #64]	@ (8000868 <HCSR04_read+0xd4>)
 8000828:	f001 f9d0 	bl	8001bcc <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d0ed      	beq.n	800080e <HCSR04_read+0x7a>
	}
	value2 = __HAL_TIM_GET_COUNTER(tim);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000838:	4a0e      	ldr	r2, [pc, #56]	@ (8000874 <HCSR04_read+0xe0>)
 800083a:	6013      	str	r3, [r2, #0]

	// distance = (value2 - value1) / 58;
	distance = (value2 - value1) / 58;
 800083c:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <HCSR04_read+0xe0>)
 800083e:	681a      	ldr	r2, [r3, #0]
 8000840:	4b0b      	ldr	r3, [pc, #44]	@ (8000870 <HCSR04_read+0xdc>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	1ad3      	subs	r3, r2, r3
 8000846:	4a0c      	ldr	r2, [pc, #48]	@ (8000878 <HCSR04_read+0xe4>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	095b      	lsrs	r3, r3, #5
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b0a      	ldr	r3, [pc, #40]	@ (800087c <HCSR04_read+0xe8>)
 8000852:	801a      	strh	r2, [r3, #0]

	HAL_Delay(50);
 8000854:	2032      	movs	r0, #50	@ 0x32
 8000856:	f000 feef 	bl	8001638 <HAL_Delay>

	return distance;
 800085a:	4b08      	ldr	r3, [pc, #32]	@ (800087c <HCSR04_read+0xe8>)
 800085c:	881b      	ldrh	r3, [r3, #0]
}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40020000 	.word	0x40020000
 800086c:	20000098 	.word	0x20000098
 8000870:	2000009c 	.word	0x2000009c
 8000874:	200000a0 	.word	0x200000a0
 8000878:	8d3dcb09 	.word	0x8d3dcb09
 800087c:	200000a4 	.word	0x200000a4

08000880 <ms_delay>:
};




static void ms_delay(unsigned ms) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f000 fed5 	bl	8001638 <HAL_Delay>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <xs_send16>:

static void xs_send16(uint16_t data) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(CE0_GPIO_PORT, CE0_GPIO_PIN, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008a8:	4817      	ldr	r0, [pc, #92]	@ (8000908 <xs_send16+0x70>)
 80008aa:	f001 f9a7 	bl	8001bfc <HAL_GPIO_WritePin>
    for (int i = 0; i < 16; i++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	e01b      	b.n	80008ec <xs_send16+0x54>
        HAL_GPIO_WritePin(MOSI_GPIO_PORT, MOSI_GPIO_PIN, (data & (1 << (15 - i))) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80008b4:	88fa      	ldrh	r2, [r7, #6]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	f1c3 030f 	rsb	r3, r3, #15
 80008bc:	fa42 f303 	asr.w	r3, r2, r3
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	2180      	movs	r1, #128	@ 0x80
 80008cc:	480e      	ldr	r0, [pc, #56]	@ (8000908 <xs_send16+0x70>)
 80008ce:	f001 f995 	bl	8001bfc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SCLK_GPIO_PORT, SCLK_GPIO_PIN, GPIO_PIN_SET);
 80008d2:	2201      	movs	r2, #1
 80008d4:	2120      	movs	r1, #32
 80008d6:	480c      	ldr	r0, [pc, #48]	@ (8000908 <xs_send16+0x70>)
 80008d8:	f001 f990 	bl	8001bfc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SCLK_GPIO_PORT, SCLK_GPIO_PIN, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2120      	movs	r1, #32
 80008e0:	4809      	ldr	r0, [pc, #36]	@ (8000908 <xs_send16+0x70>)
 80008e2:	f001 f98b 	bl	8001bfc <HAL_GPIO_WritePin>
    for (int i = 0; i < 16; i++) {
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	3301      	adds	r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b0f      	cmp	r3, #15
 80008f0:	dde0      	ble.n	80008b4 <xs_send16+0x1c>
    }
    HAL_GPIO_WritePin(CE0_GPIO_PORT, CE0_GPIO_PIN, GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <xs_send16+0x70>)
 80008fa:	f001 f97f 	bl	8001bfc <HAL_GPIO_WritePin>
}
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40020000 	.word	0x40020000

0800090c <send_cmd>:

static void send_cmd(uint16_t cmd) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(DC_GPIO_PORT, DC_GPIO_PIN, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800091c:	4805      	ldr	r0, [pc, #20]	@ (8000934 <send_cmd+0x28>)
 800091e:	f001 f96d 	bl	8001bfc <HAL_GPIO_WritePin>
    xs_send16(cmd);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff ffb7 	bl	8000898 <xs_send16>
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40020000 	.word	0x40020000

08000938 <send_param>:

static void send_param(uint16_t param) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(DC_GPIO_PORT, DC_GPIO_PIN, GPIO_PIN_SET);
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000948:	4805      	ldr	r0, [pc, #20]	@ (8000960 <send_param+0x28>)
 800094a:	f001 f957 	bl	8001bfc <HAL_GPIO_WritePin>
    xs_send16(param);
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ffa1 	bl	8000898 <xs_send16>
}
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40020000 	.word	0x40020000

08000964 <ili9486_init>:

void ili9486_init(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
    // Toggle reset
    HAL_GPIO_WritePin(RST_GPIO_PORT, RST_GPIO_PIN, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000970:	4822      	ldr	r0, [pc, #136]	@ (80009fc <ili9486_init+0x98>)
 8000972:	f001 f943 	bl	8001bfc <HAL_GPIO_WritePin>
    ms_delay(20);
 8000976:	2014      	movs	r0, #20
 8000978:	f7ff ff82 	bl	8000880 <ms_delay>
    HAL_GPIO_WritePin(RST_GPIO_PORT, RST_GPIO_PIN, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000982:	481e      	ldr	r0, [pc, #120]	@ (80009fc <ili9486_init+0x98>)
 8000984:	f001 f93a 	bl	8001bfc <HAL_GPIO_WritePin>
    ms_delay(120);
 8000988:	2078      	movs	r0, #120	@ 0x78
 800098a:	f7ff ff79 	bl	8000880 <ms_delay>

    const int* cmd = ili9486_init_seq;
 800098e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a00 <ili9486_init+0x9c>)
 8000990:	60fb      	str	r3, [r7, #12]
    int is_cmd = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
    for (;;) {
        int v = *cmd++;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	1d1a      	adds	r2, r3, #4
 800099a:	60fa      	str	r2, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	607b      	str	r3, [r7, #4]
        if (v == -1) is_cmd = 1;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009a6:	d102      	bne.n	80009ae <ili9486_init+0x4a>
 80009a8:	2301      	movs	r3, #1
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	e7f3      	b.n	8000996 <ili9486_init+0x32>
        else if (v == -2) { ms_delay(*cmd++); }
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f113 0f02 	cmn.w	r3, #2
 80009b4:	d107      	bne.n	80009c6 <ili9486_init+0x62>
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	1d1a      	adds	r2, r3, #4
 80009ba:	60fa      	str	r2, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff ff5e 	bl	8000880 <ms_delay>
 80009c4:	e7e7      	b.n	8000996 <ili9486_init+0x32>
        else if (v == -3) break;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f113 0f03 	cmn.w	r3, #3
 80009cc:	d010      	beq.n	80009f0 <ili9486_init+0x8c>
        else {
            if (is_cmd) { send_cmd(v); is_cmd = 0; }
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d007      	beq.n	80009e4 <ili9486_init+0x80>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff97 	bl	800090c <send_cmd>
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	e7d8      	b.n	8000996 <ili9486_init+0x32>
            else { send_param(v); }
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ffa5 	bl	8000938 <send_param>
    for (;;) {
 80009ee:	e7d2      	b.n	8000996 <ili9486_init+0x32>
        else if (v == -3) break;
 80009f0:	bf00      	nop
        }
    }
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40020000 	.word	0x40020000
 8000a00:	08004ea4 	.word	0x08004ea4

08000a04 <draw_pixel>:

void draw_pixel(uint16_t x, uint16_t y, uint16_t color) {
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	80fb      	strh	r3, [r7, #6]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	80bb      	strh	r3, [r7, #4]
 8000a12:	4613      	mov	r3, r2
 8000a14:	807b      	strh	r3, [r7, #2]
    send_cmd(0x2A);
 8000a16:	202a      	movs	r0, #42	@ 0x2a
 8000a18:	f7ff ff78 	bl	800090c <send_cmd>
    send_param(x >> 8); send_param(x & 0xFF); send_param(x >> 8); send_param(x & 0xFF);
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff88 	bl	8000938 <send_param>
 8000a28:	88fb      	ldrh	r3, [r7, #6]
 8000a2a:	b2db      	uxtb	r3, r3
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff ff82 	bl	8000938 <send_param>
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff7c 	bl	8000938 <send_param>
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff76 	bl	8000938 <send_param>
    send_cmd(0x2B);
 8000a4c:	202b      	movs	r0, #43	@ 0x2b
 8000a4e:	f7ff ff5d 	bl	800090c <send_cmd>
    send_param(y >> 8); send_param(y & 0xFF); send_param(y >> 8); send_param(y & 0xFF);
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	0a1b      	lsrs	r3, r3, #8
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff ff6d 	bl	8000938 <send_param>
 8000a5e:	88bb      	ldrh	r3, [r7, #4]
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff67 	bl	8000938 <send_param>
 8000a6a:	88bb      	ldrh	r3, [r7, #4]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff61 	bl	8000938 <send_param>
 8000a76:	88bb      	ldrh	r3, [r7, #4]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff5b 	bl	8000938 <send_param>
    send_cmd(0x2C);
 8000a82:	202c      	movs	r0, #44	@ 0x2c
 8000a84:	f7ff ff42 	bl	800090c <send_cmd>
    send_param(color);
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ff54 	bl	8000938 <send_param>
}
 8000a90:	bf00      	nop
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}

08000a98 <fill_screen>:

void fill_screen(uint16_t color) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
    for (uint16_t y = 0; y < 320; y++) {
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	81fb      	strh	r3, [r7, #14]
 8000aa6:	e012      	b.n	8000ace <fill_screen+0x36>
        for (uint16_t x = 0; x < 480; x++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	81bb      	strh	r3, [r7, #12]
 8000aac:	e008      	b.n	8000ac0 <fill_screen+0x28>
            draw_pixel(x, y, color);
 8000aae:	88fa      	ldrh	r2, [r7, #6]
 8000ab0:	89f9      	ldrh	r1, [r7, #14]
 8000ab2:	89bb      	ldrh	r3, [r7, #12]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ffa5 	bl	8000a04 <draw_pixel>
        for (uint16_t x = 0; x < 480; x++) {
 8000aba:	89bb      	ldrh	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	81bb      	strh	r3, [r7, #12]
 8000ac0:	89bb      	ldrh	r3, [r7, #12]
 8000ac2:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8000ac6:	d3f2      	bcc.n	8000aae <fill_screen+0x16>
    for (uint16_t y = 0; y < 320; y++) {
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
 8000aca:	3301      	adds	r3, #1
 8000acc:	81fb      	strh	r3, [r7, #14]
 8000ace:	89fb      	ldrh	r3, [r7, #14]
 8000ad0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000ad4:	d3e8      	bcc.n	8000aa8 <fill_screen+0x10>
        }
    }
}
 8000ad6:	bf00      	nop
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <font_bit>:

static int font_bit(unsigned char c, int xi, int yi) {
 8000ae0:	b480      	push	{r7}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
 8000aec:	73fb      	strb	r3, [r7, #15]
    int idx = (int)c - FONT_START;
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	3b20      	subs	r3, #32
 8000af2:	617b      	str	r3, [r7, #20]
    if (idx < 0 || idx >= FONT_SIZE || xi>=FONT_W || yi>=FONT_H) return 0;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db08      	blt.n	8000b0c <font_bit+0x2c>
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	2b5d      	cmp	r3, #93	@ 0x5d
 8000afe:	dc05      	bgt.n	8000b0c <font_bit+0x2c>
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	2b07      	cmp	r3, #7
 8000b04:	dc02      	bgt.n	8000b0c <font_bit+0x2c>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0b      	cmp	r3, #11
 8000b0a:	dd01      	ble.n	8000b10 <font_bit+0x30>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	e00f      	b.n	8000b30 <font_bit+0x50>
    return (small_font[idx * FONT_H + yi] << xi) & 0x80;
 8000b10:	697a      	ldr	r2, [r7, #20]
 8000b12:	4613      	mov	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a06      	ldr	r2, [pc, #24]	@ (8000b3c <font_bit+0x5c>)
 8000b22:	5cd3      	ldrb	r3, [r2, r3]
 8000b24:	461a      	mov	r2, r3
 8000b26:	68bb      	ldr	r3, [r7, #8]
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	371c      	adds	r7, #28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	08004ff0 	.word	0x08004ff0

08000b40 <lcd_printf>:

void lcd_printf(int x, int y, const char* str, uint16_t color) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
 8000b4c:	807b      	strh	r3, [r7, #2]
    int orig_x = x;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	617b      	str	r3, [r7, #20]
    for (; *str; str++) {
 8000b52:	e03b      	b.n	8000bcc <lcd_printf+0x8c>
        if (*str == '\n') {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b0a      	cmp	r3, #10
 8000b5a:	d105      	bne.n	8000b68 <lcd_printf+0x28>
            y += (FONT_H + 1);
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	330d      	adds	r3, #13
 8000b60:	60bb      	str	r3, [r7, #8]
            x = orig_x;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	e02e      	b.n	8000bc6 <lcd_printf+0x86>
        } else {
            for (int yi = 0; yi < FONT_H; yi++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	e025      	b.n	8000bba <lcd_printf+0x7a>
                for (int xi = 0; xi < FONT_W; xi++) {
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	e01c      	b.n	8000bae <lcd_printf+0x6e>
                    if (font_bit((unsigned char)*str, xi, yi)) {
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	69b9      	ldr	r1, [r7, #24]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ffaf 	bl	8000ae0 <font_bit>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00f      	beq.n	8000ba8 <lcd_printf+0x68>
                        draw_pixel(x + xi, y + yi, color);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	b29a      	uxth	r2, r3
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4413      	add	r3, r2
 8000b92:	b298      	uxth	r0, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	69fb      	ldr	r3, [r7, #28]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	887a      	ldrh	r2, [r7, #2]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f7ff ff2e 	bl	8000a04 <draw_pixel>
                for (int xi = 0; xi < FONT_W; xi++) {
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	3301      	adds	r3, #1
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	2b07      	cmp	r3, #7
 8000bb2:	dddf      	ble.n	8000b74 <lcd_printf+0x34>
            for (int yi = 0; yi < FONT_H; yi++) {
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	2b0b      	cmp	r3, #11
 8000bbe:	ddd6      	ble.n	8000b6e <lcd_printf+0x2e>
                    }
                }
            }
            x += (FONT_W + 1);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	3309      	adds	r3, #9
 8000bc4:	60fb      	str	r3, [r7, #12]
    for (; *str; str++) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d1bf      	bne.n	8000b54 <lcd_printf+0x14>
        }
    }
}
 8000bd4:	bf00      	nop
 8000bd6:	bf00      	nop
 8000bd8:	3720      	adds	r7, #32
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	b08e      	sub	sp, #56	@ 0x38
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	const char connection_msg[] = "UART to PC success \n";
 8000be6:	4b34      	ldr	r3, [pc, #208]	@ (8000cb8 <main+0xd8>)
 8000be8:	f107 0418 	add.w	r4, r7, #24
 8000bec:	461d      	mov	r5, r3
 8000bee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000bf6:	6020      	str	r0, [r4, #0]
 8000bf8:	3404      	adds	r4, #4
 8000bfa:	7021      	strb	r1, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfc:	f000 fcaa 	bl	8001554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c00:	f000 f868 	bl	8000cd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c04:	f000 f9e6 	bl	8000fd4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c08:	f000 f9ba 	bl	8000f80 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000c0c:	f000 f942 	bl	8000e94 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000c10:	f000 f8cc 	bl	8000dac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2,(const uint8_t*) connection_msg , strlen(connection_msg), TIMEOUT);
 8000c14:	f107 0118 	add.w	r1, r7, #24
 8000c18:	230f      	movs	r3, #15
 8000c1a:	2214      	movs	r2, #20
 8000c1c:	4827      	ldr	r0, [pc, #156]	@ (8000cbc <main+0xdc>)
 8000c1e:	f003 f8bd 	bl	8003d9c <HAL_UART_Transmit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c22:	2100      	movs	r1, #0
 8000c24:	4826      	ldr	r0, [pc, #152]	@ (8000cc0 <main+0xe0>)
 8000c26:	f001 ff2f 	bl	8002a88 <HAL_TIM_PWM_Start>
  HCR04_init(&htim1);
 8000c2a:	4826      	ldr	r0, [pc, #152]	@ (8000cc4 <main+0xe4>)
 8000c2c:	f7ff fd9e 	bl	800076c <HCR04_init>
  ili9486_init();
 8000c30:	f7ff fe98 	bl	8000964 <ili9486_init>
  fill_screen(0x001F); //fill screen with blue
 8000c34:	201f      	movs	r0, #31
 8000c36:	f7ff ff2f 	bl	8000a98 <fill_screen>
  lcd_printf(10, 10, "Hello STM32!", 0xFFFF);
 8000c3a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c3e:	4a22      	ldr	r2, [pc, #136]	@ (8000cc8 <main+0xe8>)
 8000c40:	210a      	movs	r1, #10
 8000c42:	200a      	movs	r0, #10
 8000c44:	f7ff ff7c 	bl	8000b40 <lcd_printf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(button_state == 0) {
 8000c48:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <main+0xec>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1fb      	bne.n	8000c48 <main+0x68>
		  for(uint8_t angle = 0; angle <= 180; angle +=2) {
 8000c50:	2300      	movs	r3, #0
 8000c52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000c56:	e029      	b.n	8000cac <main+0xcc>
				 set_servo_angle(&htim2, TIM_CHANNEL_1, angle);
 8000c58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4817      	ldr	r0, [pc, #92]	@ (8000cc0 <main+0xe0>)
 8000c62:	f000 fa7d 	bl	8001160 <set_servo_angle>
				 uint16_t distance = HCSR04_read(&htim1);
 8000c66:	4817      	ldr	r0, [pc, #92]	@ (8000cc4 <main+0xe4>)
 8000c68:	f7ff fd94 	bl	8000794 <HCSR04_read>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	86bb      	strh	r3, [r7, #52]	@ 0x34
				 uint32_t filtered = median_filter(distance);
 8000c70:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fd34 	bl	80006e0 <median_filter>
 8000c78:	6338      	str	r0, [r7, #48]	@ 0x30
				 sprintf(transmit_distance_msg, "Dist: %lu cm \r\n", filtered);
 8000c7a:	463b      	mov	r3, r7
 8000c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000c7e:	4914      	ldr	r1, [pc, #80]	@ (8000cd0 <main+0xf0>)
 8000c80:	4618      	mov	r0, r3
 8000c82:	f003 fc47 	bl	8004514 <siprintf>
				 HAL_UART_Transmit(&huart2, (uint8_t*)transmit_distance_msg, strlen(transmit_distance_msg), TIMEOUT);
 8000c86:	463b      	mov	r3, r7
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff fac1 	bl	8000210 <strlen>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	4639      	mov	r1, r7
 8000c94:	230f      	movs	r3, #15
 8000c96:	4809      	ldr	r0, [pc, #36]	@ (8000cbc <main+0xdc>)
 8000c98:	f003 f880 	bl	8003d9c <HAL_UART_Transmit>
				 HAL_Delay(35);
 8000c9c:	2023      	movs	r0, #35	@ 0x23
 8000c9e:	f000 fccb 	bl	8001638 <HAL_Delay>
		  for(uint8_t angle = 0; angle <= 180; angle +=2) {
 8000ca2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000cac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000cb0:	2bb4      	cmp	r3, #180	@ 0xb4
 8000cb2:	d9d1      	bls.n	8000c58 <main+0x78>
	  if(button_state == 0) {
 8000cb4:	e7c8      	b.n	8000c48 <main+0x68>
 8000cb6:	bf00      	nop
 8000cb8:	08004e8c 	.word	0x08004e8c
 8000cbc:	20000138 	.word	0x20000138
 8000cc0:	200000f0 	.word	0x200000f0
 8000cc4:	200000a8 	.word	0x200000a8
 8000cc8:	08004e6c 	.word	0x08004e6c
 8000ccc:	20000180 	.word	0x20000180
 8000cd0:	08004e7c 	.word	0x08004e7c

08000cd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b094      	sub	sp, #80	@ 0x50
 8000cd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	2234      	movs	r2, #52	@ 0x34
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 fc38 	bl	8004558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
 8000cf6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	4b29      	ldr	r3, [pc, #164]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d00:	4a28      	ldr	r2, [pc, #160]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000d02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d08:	4b26      	ldr	r3, [pc, #152]	@ (8000da4 <SystemClock_Config+0xd0>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d14:	2300      	movs	r3, #0
 8000d16:	603b      	str	r3, [r7, #0]
 8000d18:	4b23      	ldr	r3, [pc, #140]	@ (8000da8 <SystemClock_Config+0xd4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d20:	4a21      	ldr	r2, [pc, #132]	@ (8000da8 <SystemClock_Config+0xd4>)
 8000d22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d26:	6013      	str	r3, [r2, #0]
 8000d28:	4b1f      	ldr	r3, [pc, #124]	@ (8000da8 <SystemClock_Config+0xd4>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d34:	2302      	movs	r3, #2
 8000d36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3c:	2310      	movs	r3, #16
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d40:	2302      	movs	r3, #2
 8000d42:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d44:	2300      	movs	r3, #0
 8000d46:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000d4c:	2354      	movs	r3, #84	@ 0x54
 8000d4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4618      	mov	r0, r3
 8000d62:	f001 fae1 	bl	8002328 <HAL_RCC_OscConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d6c:	f000 f9f2 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d70:	230f      	movs	r3, #15
 8000d72:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d74:	2302      	movs	r3, #2
 8000d76:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	2102      	movs	r1, #2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 ff81 	bl	8001c94 <HAL_RCC_ClockConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000d98:	f000 f9dc 	bl	8001154 <Error_Handler>
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3750      	adds	r7, #80	@ 0x50
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40007000 	.word	0x40007000

08000dac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	@ 0x28
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0318 	add.w	r3, r7, #24
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	f107 0310 	add.w	r3, r7, #16
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000dca:	463b      	mov	r3, r7
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8000e90 <MX_TIM1_Init+0xe4>)
 8000dda:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000dde:	2253      	movs	r2, #83	@ 0x53
 8000de0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000de8:	4b28      	ldr	r3, [pc, #160]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000dea:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000dee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000df6:	4b25      	ldr	r3, [pc, #148]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e02:	4822      	ldr	r0, [pc, #136]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000e04:	f001 fd2e 	bl	8002864 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000e0e:	f000 f9a1 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e16:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	481b      	ldr	r0, [pc, #108]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000e20:	f002 f9a2 	bl	8003168 <HAL_TIM_ConfigClockSource>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000e2a:	f000 f993 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000e2e:	4817      	ldr	r0, [pc, #92]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000e30:	f001 fef2 	bl	8002c18 <HAL_TIM_IC_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000e3a:	f000 f98b 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e46:	f107 0310 	add.w	r3, r7, #16
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480f      	ldr	r0, [pc, #60]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000e4e:	f002 fec5 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000e58:	f000 f97c 	bl	8001154 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e60:	2301      	movs	r3, #1
 8000e62:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <MX_TIM1_Init+0xe0>)
 8000e74:	f002 f819 	bl	8002eaa <HAL_TIM_IC_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000e7e:	f000 f969 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	@ 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	200000a8 	.word	0x200000a8
 8000e90:	40010000 	.word	0x40010000

08000e94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08e      	sub	sp, #56	@ 0x38
 8000e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]
 8000ea4:	609a      	str	r2, [r3, #8]
 8000ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea8:	f107 0320 	add.w	r3, r7, #32
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
 8000ec0:	615a      	str	r2, [r3, #20]
 8000ec2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000ec6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000ece:	22c7      	movs	r2, #199	@ 0xc7
 8000ed0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400-1;
 8000ed8:	4b28      	ldr	r3, [pc, #160]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000eda:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000ede:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee0:	4b26      	ldr	r3, [pc, #152]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b25      	ldr	r3, [pc, #148]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eec:	4823      	ldr	r0, [pc, #140]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000eee:	f001 fcb9 	bl	8002864 <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ef8:	f000 f92c 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f06:	4619      	mov	r1, r3
 8000f08:	481c      	ldr	r0, [pc, #112]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000f0a:	f002 f92d 	bl	8003168 <HAL_TIM_ConfigClockSource>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f14:	f000 f91e 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f18:	4818      	ldr	r0, [pc, #96]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000f1a:	f001 fd5b 	bl	80029d4 <HAL_TIM_PWM_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f24:	f000 f916 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f30:	f107 0320 	add.w	r3, r7, #32
 8000f34:	4619      	mov	r1, r3
 8000f36:	4811      	ldr	r0, [pc, #68]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000f38:	f002 fe50 	bl	8003bdc <HAL_TIMEx_MasterConfigSynchronization>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f42:	f000 f907 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f46:	2360      	movs	r3, #96	@ 0x60
 8000f48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000f5e:	f002 f841 	bl	8002fe4 <HAL_TIM_PWM_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f68:	f000 f8f4 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f6c:	4803      	ldr	r0, [pc, #12]	@ (8000f7c <MX_TIM2_Init+0xe8>)
 8000f6e:	f000 f9bd 	bl	80012ec <HAL_TIM_MspPostInit>

}
 8000f72:	bf00      	nop
 8000f74:	3738      	adds	r7, #56	@ 0x38
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	200000f0 	.word	0x200000f0

08000f80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f86:	4a12      	ldr	r2, [pc, #72]	@ (8000fd0 <MX_USART2_UART_Init+0x50>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f8a:	4b10      	ldr	r3, [pc, #64]	@ (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	@ (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	@ (8000fcc <MX_USART2_UART_Init+0x4c>)
 8000fb8:	f002 fea0 	bl	8003cfc <HAL_UART_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fc2:	f000 f8c7 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000138 	.word	0x20000138
 8000fd0:	40004400 	.word	0x40004400

08000fd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	@ 0x28
 8000fd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
 8000fee:	4b3b      	ldr	r3, [pc, #236]	@ (80010dc <MX_GPIO_Init+0x108>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a3a      	ldr	r2, [pc, #232]	@ (80010dc <MX_GPIO_Init+0x108>)
 8000ff4:	f043 0304 	orr.w	r3, r3, #4
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b38      	ldr	r3, [pc, #224]	@ (80010dc <MX_GPIO_Init+0x108>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0304 	and.w	r3, r3, #4
 8001002:	613b      	str	r3, [r7, #16]
 8001004:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b34      	ldr	r3, [pc, #208]	@ (80010dc <MX_GPIO_Init+0x108>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a33      	ldr	r2, [pc, #204]	@ (80010dc <MX_GPIO_Init+0x108>)
 8001010:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b31      	ldr	r3, [pc, #196]	@ (80010dc <MX_GPIO_Init+0x108>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b2d      	ldr	r3, [pc, #180]	@ (80010dc <MX_GPIO_Init+0x108>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a2c      	ldr	r2, [pc, #176]	@ (80010dc <MX_GPIO_Init+0x108>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b2a      	ldr	r3, [pc, #168]	@ (80010dc <MX_GPIO_Init+0x108>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b26      	ldr	r3, [pc, #152]	@ (80010dc <MX_GPIO_Init+0x108>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a25      	ldr	r2, [pc, #148]	@ (80010dc <MX_GPIO_Init+0x108>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <MX_GPIO_Init+0x108>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001060:	481f      	ldr	r0, [pc, #124]	@ (80010e0 <MX_GPIO_Init+0x10c>)
 8001062:	f000 fdcb 	bl	8001bfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800106a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800106c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	4619      	mov	r1, r3
 800107c:	4819      	ldr	r0, [pc, #100]	@ (80010e4 <MX_GPIO_Init+0x110>)
 800107e:	f000 fc11 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_12;
 8001082:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001086:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	4811      	ldr	r0, [pc, #68]	@ (80010e0 <MX_GPIO_Init+0x10c>)
 800109c:	f000 fc02 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80010a0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80010a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	480a      	ldr	r0, [pc, #40]	@ (80010e0 <MX_GPIO_Init+0x10c>)
 80010b6:	f000 fbf5 	bl	80018a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	2028      	movs	r0, #40	@ 0x28
 80010c0:	f000 fbb9 	bl	8001836 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010c4:	2028      	movs	r0, #40	@ 0x28
 80010c6:	f000 fbd2 	bl	800186e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //start with LED on
 80010ca:	2201      	movs	r2, #1
 80010cc:	2120      	movs	r1, #32
 80010ce:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <MX_GPIO_Init+0x10c>)
 80010d0:	f000 fd94 	bl	8001bfc <HAL_GPIO_WritePin>

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	@ 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40020000 	.word	0x40020000
 80010e4:	40020800 	.word	0x40020800

080010e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13) //blue pushbutton pin
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010f8:	d122      	bne.n	8001140 <HAL_GPIO_EXTI_Callback+0x58>
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80010fa:	2120      	movs	r1, #32
 80010fc:	4812      	ldr	r0, [pc, #72]	@ (8001148 <HAL_GPIO_EXTI_Callback+0x60>)
 80010fe:	f000 fd96 	bl	8001c2e <HAL_GPIO_TogglePin>

		if(button_state == 0) {
 8001102:	4b12      	ldr	r3, [pc, #72]	@ (800114c <HAL_GPIO_EXTI_Callback+0x64>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d109      	bne.n	800111e <HAL_GPIO_EXTI_Callback+0x36>
			__HAL_RCC_TIM2_CLK_DISABLE(); // pause
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x68>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	4a10      	ldr	r2, [pc, #64]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x68>)
 8001110:	f023 0301 	bic.w	r3, r3, #1
 8001114:	6413      	str	r3, [r2, #64]	@ 0x40
			button_state = 1;
 8001116:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <HAL_GPIO_EXTI_Callback+0x64>)
 8001118:	2201      	movs	r2, #1
 800111a:	601a      	str	r2, [r3, #0]
		} else {
			__HAL_RCC_TIM2_CLK_ENABLE();
			button_state = 0;
		}
	}
}
 800111c:	e010      	b.n	8001140 <HAL_GPIO_EXTI_Callback+0x58>
			__HAL_RCC_TIM2_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x68>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x68>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6413      	str	r3, [r2, #64]	@ 0x40
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_GPIO_EXTI_Callback+0x68>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
			button_state = 0;
 800113a:	4b04      	ldr	r3, [pc, #16]	@ (800114c <HAL_GPIO_EXTI_Callback+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40020000 	.word	0x40020000
 800114c:	20000180 	.word	0x20000180
 8001150:	40023800 	.word	0x40023800

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <Error_Handler+0x8>

08001160 <set_servo_angle>:
 */
#include "stm32f4xx_hal.h"
#include "servo.h"

void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle)
{
 8001160:	b480      	push	{r7}
 8001162:	b087      	sub	sp, #28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	4613      	mov	r3, r2
 800116c:	71fb      	strb	r3, [r7, #7]
	//map angle (0-180) to pulse width (210-1050 counts)
	uint32_t pulse_length = 210 + (angle * (1050 - 210) / 180);
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8001174:	fb02 f303 	mul.w	r3, r2, r3
 8001178:	4a15      	ldr	r2, [pc, #84]	@ (80011d0 <set_servo_angle+0x70>)
 800117a:	fb82 1203 	smull	r1, r2, r2, r3
 800117e:	441a      	add	r2, r3
 8001180:	11d2      	asrs	r2, r2, #7
 8001182:	17db      	asrs	r3, r3, #31
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	33d2      	adds	r3, #210	@ 0xd2
 8001188:	617b      	str	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d104      	bne.n	800119a <set_servo_angle+0x3a>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001198:	e013      	b.n	80011c2 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	2b04      	cmp	r3, #4
 800119e:	d104      	bne.n	80011aa <set_servo_angle+0x4a>
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80011a8:	e00b      	b.n	80011c2 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2b08      	cmp	r3, #8
 80011ae:	d104      	bne.n	80011ba <set_servo_angle+0x5a>
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80011b8:	e003      	b.n	80011c2 <set_servo_angle+0x62>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80011c2:	bf00      	nop
 80011c4:	371c      	adds	r7, #28
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	b60b60b7 	.word	0xb60b60b7

080011d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b10      	ldr	r3, [pc, #64]	@ (8001220 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <HAL_MspInit+0x4c>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001220 <HAL_MspInit+0x4c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fe:	4a08      	ldr	r2, [pc, #32]	@ (8001220 <HAL_MspInit+0x4c>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	@ 0x40
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <HAL_MspInit+0x4c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001212:	2007      	movs	r0, #7
 8001214:	f000 fb04 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800

08001224 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	@ 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a27      	ldr	r2, [pc, #156]	@ (80012e0 <HAL_TIM_Base_MspInit+0xbc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d135      	bne.n	80012b2 <HAL_TIM_Base_MspInit+0x8e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b26      	ldr	r3, [pc, #152]	@ (80012e4 <HAL_TIM_Base_MspInit+0xc0>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	4a25      	ldr	r2, [pc, #148]	@ (80012e4 <HAL_TIM_Base_MspInit+0xc0>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6453      	str	r3, [r2, #68]	@ 0x44
 8001256:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <HAL_TIM_Base_MspInit+0xc0>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b1f      	ldr	r3, [pc, #124]	@ (80012e4 <HAL_TIM_Base_MspInit+0xc0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a1e      	ldr	r2, [pc, #120]	@ (80012e4 <HAL_TIM_Base_MspInit+0xc0>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <HAL_TIM_Base_MspInit+0xc0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800127e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001290:	2301      	movs	r3, #1
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <HAL_TIM_Base_MspInit+0xc4>)
 800129c:	f000 fb02 	bl	80018a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	201b      	movs	r0, #27
 80012a6:	f000 fac6 	bl	8001836 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80012aa:	201b      	movs	r0, #27
 80012ac:	f000 fadf 	bl	800186e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012b0:	e012      	b.n	80012d8 <HAL_TIM_Base_MspInit+0xb4>
  else if(htim_base->Instance==TIM2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012ba:	d10d      	bne.n	80012d8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	60bb      	str	r3, [r7, #8]
 80012c0:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <HAL_TIM_Base_MspInit+0xc0>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	4a07      	ldr	r2, [pc, #28]	@ (80012e4 <HAL_TIM_Base_MspInit+0xc0>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80012cc:	4b05      	ldr	r3, [pc, #20]	@ (80012e4 <HAL_TIM_Base_MspInit+0xc0>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
}
 80012d8:	bf00      	nop
 80012da:	3728      	adds	r7, #40	@ 0x28
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40010000 	.word	0x40010000
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000

080012ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800130c:	d11d      	bne.n	800134a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <HAL_TIM_MspPostInit+0x68>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a0f      	ldr	r2, [pc, #60]	@ (8001354 <HAL_TIM_MspPostInit+0x68>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b0d      	ldr	r3, [pc, #52]	@ (8001354 <HAL_TIM_MspPostInit+0x68>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_Pin;
 800132a:	2301      	movs	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800133a:	2301      	movs	r3, #1
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIM2_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	4619      	mov	r1, r3
 8001344:	4804      	ldr	r0, [pc, #16]	@ (8001358 <HAL_TIM_MspPostInit+0x6c>)
 8001346:	f000 faad 	bl	80018a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800134a:	bf00      	nop
 800134c:	3720      	adds	r7, #32
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000

0800135c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	@ 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a19      	ldr	r2, [pc, #100]	@ (80013e0 <HAL_UART_MspInit+0x84>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12b      	bne.n	80013d6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
 8001382:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <HAL_UART_MspInit+0x88>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	4a17      	ldr	r2, [pc, #92]	@ (80013e4 <HAL_UART_MspInit+0x88>)
 8001388:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800138c:	6413      	str	r3, [r2, #64]	@ 0x40
 800138e:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <HAL_UART_MspInit+0x88>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b11      	ldr	r3, [pc, #68]	@ (80013e4 <HAL_UART_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	4a10      	ldr	r2, [pc, #64]	@ (80013e4 <HAL_UART_MspInit+0x88>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013aa:	4b0e      	ldr	r3, [pc, #56]	@ (80013e4 <HAL_UART_MspInit+0x88>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013b6:	230c      	movs	r3, #12
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c2:	2303      	movs	r3, #3
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013c6:	2307      	movs	r3, #7
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <HAL_UART_MspInit+0x8c>)
 80013d2:	f000 fa67 	bl	80018a4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	@ 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40004400 	.word	0x40004400
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <NMI_Handler+0x4>

080013f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <MemManage_Handler+0x4>

08001404 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <UsageFault_Handler+0x4>

08001414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001442:	f000 f8d9 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <TIM1_CC_IRQHandler+0x10>)
 8001452:	f001 fc3a 	bl	8002cca <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200000a8 	.word	0x200000a8

08001460 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001464:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001468:	f000 fbfc 	bl	8001c64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	@ (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f003 f862 	bl	8004568 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	@ (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20020000 	.word	0x20020000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	20000184 	.word	0x20000184
 80014d8:	200002d8 	.word	0x200002d8

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001538 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001504:	f7ff ffea 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001508:	480c      	ldr	r0, [pc, #48]	@ (800153c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800150a:	490d      	ldr	r1, [pc, #52]	@ (8001540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001510:	e002      	b.n	8001518 <LoopCopyDataInit>

08001512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001516:	3304      	adds	r3, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800151a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800151c:	d3f9      	bcc.n	8001512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800151e:	4a0a      	ldr	r2, [pc, #40]	@ (8001548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001520:	4c0a      	ldr	r4, [pc, #40]	@ (800154c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001524:	e001      	b.n	800152a <LoopFillZerobss>

08001526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001528:	3204      	adds	r2, #4

0800152a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800152a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800152c:	d3fb      	bcc.n	8001526 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800152e:	f003 f821 	bl	8004574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001532:	f7ff fb55 	bl	8000be0 <main>
  bx  lr    
 8001536:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001538:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800153c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001540:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001544:	080054c0 	.word	0x080054c0
  ldr r2, =_sbss
 8001548:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800154c:	200002d4 	.word	0x200002d4

08001550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001558:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <HAL_Init+0x40>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a0d      	ldr	r2, [pc, #52]	@ (8001594 <HAL_Init+0x40>)
 800155e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_Init+0x40>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_Init+0x40>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800156e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <HAL_Init+0x40>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a07      	ldr	r2, [pc, #28]	@ (8001594 <HAL_Init+0x40>)
 8001576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800157a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800157c:	2003      	movs	r0, #3
 800157e:	f000 f94f 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001582:	2000      	movs	r0, #0
 8001584:	f000 f808 	bl	8001598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001588:	f7ff fe24 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023c00 	.word	0x40023c00

08001598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a0:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_InitTick+0x54>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b12      	ldr	r3, [pc, #72]	@ (80015f0 <HAL_InitTick+0x58>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f967 	bl	800188a <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295
 80015d4:	f000 f92f 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	@ (80015f4 <HAL_InitTick+0x5c>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000008 	.word	0x20000008
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	@ (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	@ (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	20000188 	.word	0x20000188

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000188 	.word	0x20000188

08001638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001640:	f7ff ffee 	bl	8001620 <HAL_GetTick>
 8001644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001650:	d005      	beq.n	800165e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_Delay+0x44>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800165e:	bf00      	nop
 8001660:	f7ff ffde 	bl	8001620 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	429a      	cmp	r2, r3
 800166e:	d8f7      	bhi.n	8001660 <HAL_Delay+0x28>
  {
  }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3710      	adds	r7, #16
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	@ (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4907      	ldr	r1, [pc, #28]	@ (800171c <__NVIC_EnableIRQ+0x38>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000e100 	.word	0xe000e100

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	@ (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	@ (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	@ 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	@ (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff29 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff3e 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff31 	bl	80016e4 <__NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7ff ffa2 	bl	80017dc <SysTick_Config>
 8001898:	4603      	mov	r3, r0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e165      	b.n	8001b8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f040 8154 	bne.w	8001b86 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d005      	beq.n	80018f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d130      	bne.n	8001958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 0201 	and.w	r2, r3, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b03      	cmp	r3, #3
 8001962:	d017      	beq.n	8001994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d123      	bne.n	80019e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80ae 	beq.w	8001b86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ba4 <HAL_GPIO_Init+0x300>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	4a5c      	ldr	r2, [pc, #368]	@ (8001ba4 <HAL_GPIO_Init+0x300>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ba4 <HAL_GPIO_Init+0x300>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a46:	4a58      	ldr	r2, [pc, #352]	@ (8001ba8 <HAL_GPIO_Init+0x304>)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001bac <HAL_GPIO_Init+0x308>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d025      	beq.n	8001abe <HAL_GPIO_Init+0x21a>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4e      	ldr	r2, [pc, #312]	@ (8001bb0 <HAL_GPIO_Init+0x30c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d01f      	beq.n	8001aba <HAL_GPIO_Init+0x216>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001bb4 <HAL_GPIO_Init+0x310>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d019      	beq.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4c      	ldr	r2, [pc, #304]	@ (8001bb8 <HAL_GPIO_Init+0x314>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d013      	beq.n	8001ab2 <HAL_GPIO_Init+0x20e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001bbc <HAL_GPIO_Init+0x318>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d00d      	beq.n	8001aae <HAL_GPIO_Init+0x20a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4a      	ldr	r2, [pc, #296]	@ (8001bc0 <HAL_GPIO_Init+0x31c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d007      	beq.n	8001aaa <HAL_GPIO_Init+0x206>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a49      	ldr	r2, [pc, #292]	@ (8001bc4 <HAL_GPIO_Init+0x320>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d101      	bne.n	8001aa6 <HAL_GPIO_Init+0x202>
 8001aa2:	2306      	movs	r3, #6
 8001aa4:	e00c      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	e00a      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001aaa:	2305      	movs	r3, #5
 8001aac:	e008      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001aae:	2304      	movs	r3, #4
 8001ab0:	e006      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e004      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e002      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <HAL_GPIO_Init+0x21c>
 8001abe:	2300      	movs	r3, #0
 8001ac0:	69fa      	ldr	r2, [r7, #28]
 8001ac2:	f002 0203 	and.w	r2, r2, #3
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	4093      	lsls	r3, r2
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ad0:	4935      	ldr	r1, [pc, #212]	@ (8001ba8 <HAL_GPIO_Init+0x304>)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	3302      	adds	r3, #2
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ade:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	4013      	ands	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b02:	4a31      	ldr	r2, [pc, #196]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b08:	4b2f      	ldr	r3, [pc, #188]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d003      	beq.n	8001b2c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b2c:	4a26      	ldr	r2, [pc, #152]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b56:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b80:	4a11      	ldr	r2, [pc, #68]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	61fb      	str	r3, [r7, #28]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b0f      	cmp	r3, #15
 8001b90:	f67f ae96 	bls.w	80018c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3724      	adds	r7, #36	@ 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40013800 	.word	0x40013800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40020400 	.word	0x40020400
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020c00 	.word	0x40020c00
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40021400 	.word	0x40021400
 8001bc4:	40021800 	.word	0x40021800
 8001bc8:	40013c00 	.word	0x40013c00

08001bcc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	4013      	ands	r3, r2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
 8001be8:	e001      	b.n	8001bee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	807b      	strh	r3, [r7, #2]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c0c:	787b      	ldrb	r3, [r7, #1]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c12:	887a      	ldrh	r2, [r7, #2]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c18:	e003      	b.n	8001c22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c1a:	887b      	ldrh	r3, [r7, #2]
 8001c1c:	041a      	lsls	r2, r3, #16
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	619a      	str	r2, [r3, #24]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c40:	887a      	ldrh	r2, [r7, #2]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4013      	ands	r3, r2
 8001c46:	041a      	lsls	r2, r3, #16
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	43d9      	mvns	r1, r3
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	400b      	ands	r3, r1
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	619a      	str	r2, [r3, #24]
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c6e:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c70:	695a      	ldr	r2, [r3, #20]
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	4013      	ands	r3, r2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d006      	beq.n	8001c88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c7c:	88fb      	ldrh	r3, [r7, #6]
 8001c7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fa30 	bl	80010e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40013c00 	.word	0x40013c00

08001c94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d101      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0cc      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b68      	ldr	r3, [pc, #416]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 030f 	and.w	r3, r3, #15
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d90c      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b65      	ldr	r3, [pc, #404]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cbe:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0b8      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d020      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce8:	4b59      	ldr	r3, [pc, #356]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4a58      	ldr	r2, [pc, #352]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0308 	and.w	r3, r3, #8
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d005      	beq.n	8001d0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d00:	4b53      	ldr	r3, [pc, #332]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	4a52      	ldr	r2, [pc, #328]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d0c:	4b50      	ldr	r3, [pc, #320]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	494d      	ldr	r1, [pc, #308]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d044      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d32:	4b47      	ldr	r3, [pc, #284]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d119      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e07f      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d107      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	4b3f      	ldr	r3, [pc, #252]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e06f      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d62:	4b3b      	ldr	r3, [pc, #236]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e067      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d72:	4b37      	ldr	r3, [pc, #220]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f023 0203 	bic.w	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4934      	ldr	r1, [pc, #208]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d84:	f7ff fc4c 	bl	8001620 <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8c:	f7ff fc48 	bl	8001620 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e04f      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001da2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 020c 	and.w	r2, r3, #12
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d1eb      	bne.n	8001d8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001db4:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d20c      	bcs.n	8001ddc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b22      	ldr	r3, [pc, #136]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e032      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	4916      	ldr	r1, [pc, #88]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0308 	and.w	r3, r3, #8
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d009      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e06:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	490e      	ldr	r1, [pc, #56]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e1a:	f000 f855 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	091b      	lsrs	r3, r3, #4
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	490a      	ldr	r1, [pc, #40]	@ (8001e54 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	5ccb      	ldrb	r3, [r1, r3]
 8001e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e32:	4a09      	ldr	r2, [pc, #36]	@ (8001e58 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e36:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fbac 	bl	8001598 <HAL_InitTick>

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023c00 	.word	0x40023c00
 8001e50:	40023800 	.word	0x40023800
 8001e54:	08005464 	.word	0x08005464
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e64:	4b03      	ldr	r3, [pc, #12]	@ (8001e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e66:	681b      	ldr	r3, [r3, #0]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	20000000 	.word	0x20000000

08001e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e7c:	f7ff fff0 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001e80:	4602      	mov	r2, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0a9b      	lsrs	r3, r3, #10
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4903      	ldr	r1, [pc, #12]	@ (8001e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8e:	5ccb      	ldrb	r3, [r1, r3]
 8001e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	08005474 	.word	0x08005474

08001ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea4:	f7ff ffdc 	bl	8001e60 <HAL_RCC_GetHCLKFreq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b05      	ldr	r3, [pc, #20]	@ (8001ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	0b5b      	lsrs	r3, r3, #13
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	4903      	ldr	r1, [pc, #12]	@ (8001ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb6:	5ccb      	ldrb	r3, [r1, r3]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	08005474 	.word	0x08005474

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ecc:	b0ae      	sub	sp, #184	@ 0xb8
 8001ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eee:	4bcb      	ldr	r3, [pc, #812]	@ (800221c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	2b0c      	cmp	r3, #12
 8001ef8:	f200 8206 	bhi.w	8002308 <HAL_RCC_GetSysClockFreq+0x440>
 8001efc:	a201      	add	r2, pc, #4	@ (adr r2, 8001f04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f02:	bf00      	nop
 8001f04:	08001f39 	.word	0x08001f39
 8001f08:	08002309 	.word	0x08002309
 8001f0c:	08002309 	.word	0x08002309
 8001f10:	08002309 	.word	0x08002309
 8001f14:	08001f41 	.word	0x08001f41
 8001f18:	08002309 	.word	0x08002309
 8001f1c:	08002309 	.word	0x08002309
 8001f20:	08002309 	.word	0x08002309
 8001f24:	08001f49 	.word	0x08001f49
 8001f28:	08002309 	.word	0x08002309
 8001f2c:	08002309 	.word	0x08002309
 8001f30:	08002309 	.word	0x08002309
 8001f34:	08002139 	.word	0x08002139
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f38:	4bb9      	ldr	r3, [pc, #740]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f3e:	e1e7      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f40:	4bb8      	ldr	r3, [pc, #736]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001f46:	e1e3      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f48:	4bb4      	ldr	r3, [pc, #720]	@ (800221c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f54:	4bb1      	ldr	r3, [pc, #708]	@ (800221c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d071      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f60:	4bae      	ldr	r3, [pc, #696]	@ (800221c <HAL_RCC_GetSysClockFreq+0x354>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	099b      	lsrs	r3, r3, #6
 8001f66:	2200      	movs	r2, #0
 8001f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001f6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001f82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001f86:	4622      	mov	r2, r4
 8001f88:	462b      	mov	r3, r5
 8001f8a:	f04f 0000 	mov.w	r0, #0
 8001f8e:	f04f 0100 	mov.w	r1, #0
 8001f92:	0159      	lsls	r1, r3, #5
 8001f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f98:	0150      	lsls	r0, r2, #5
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4621      	mov	r1, r4
 8001fa0:	1a51      	subs	r1, r2, r1
 8001fa2:	6439      	str	r1, [r7, #64]	@ 0x40
 8001fa4:	4629      	mov	r1, r5
 8001fa6:	eb63 0301 	sbc.w	r3, r3, r1
 8001faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fac:	f04f 0200 	mov.w	r2, #0
 8001fb0:	f04f 0300 	mov.w	r3, #0
 8001fb4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001fb8:	4649      	mov	r1, r9
 8001fba:	018b      	lsls	r3, r1, #6
 8001fbc:	4641      	mov	r1, r8
 8001fbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fc2:	4641      	mov	r1, r8
 8001fc4:	018a      	lsls	r2, r1, #6
 8001fc6:	4641      	mov	r1, r8
 8001fc8:	1a51      	subs	r1, r2, r1
 8001fca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001fcc:	4649      	mov	r1, r9
 8001fce:	eb63 0301 	sbc.w	r3, r3, r1
 8001fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001fe0:	4649      	mov	r1, r9
 8001fe2:	00cb      	lsls	r3, r1, #3
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fea:	4641      	mov	r1, r8
 8001fec:	00ca      	lsls	r2, r1, #3
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4622      	mov	r2, r4
 8001ff6:	189b      	adds	r3, r3, r2
 8001ff8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ffa:	462b      	mov	r3, r5
 8001ffc:	460a      	mov	r2, r1
 8001ffe:	eb42 0303 	adc.w	r3, r2, r3
 8002002:	637b      	str	r3, [r7, #52]	@ 0x34
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002010:	4629      	mov	r1, r5
 8002012:	024b      	lsls	r3, r1, #9
 8002014:	4621      	mov	r1, r4
 8002016:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800201a:	4621      	mov	r1, r4
 800201c:	024a      	lsls	r2, r1, #9
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002026:	2200      	movs	r2, #0
 8002028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800202c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002030:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002034:	f7fe f944 	bl	80002c0 <__aeabi_uldivmod>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4613      	mov	r3, r2
 800203e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002042:	e067      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002044:	4b75      	ldr	r3, [pc, #468]	@ (800221c <HAL_RCC_GetSysClockFreq+0x354>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	2200      	movs	r2, #0
 800204c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002050:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002054:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800205e:	2300      	movs	r3, #0
 8002060:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002062:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002066:	4622      	mov	r2, r4
 8002068:	462b      	mov	r3, r5
 800206a:	f04f 0000 	mov.w	r0, #0
 800206e:	f04f 0100 	mov.w	r1, #0
 8002072:	0159      	lsls	r1, r3, #5
 8002074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002078:	0150      	lsls	r0, r2, #5
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4621      	mov	r1, r4
 8002080:	1a51      	subs	r1, r2, r1
 8002082:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002084:	4629      	mov	r1, r5
 8002086:	eb63 0301 	sbc.w	r3, r3, r1
 800208a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002098:	4649      	mov	r1, r9
 800209a:	018b      	lsls	r3, r1, #6
 800209c:	4641      	mov	r1, r8
 800209e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020a2:	4641      	mov	r1, r8
 80020a4:	018a      	lsls	r2, r1, #6
 80020a6:	4641      	mov	r1, r8
 80020a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80020ac:	4649      	mov	r1, r9
 80020ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020c6:	4692      	mov	sl, r2
 80020c8:	469b      	mov	fp, r3
 80020ca:	4623      	mov	r3, r4
 80020cc:	eb1a 0303 	adds.w	r3, sl, r3
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	462b      	mov	r3, r5
 80020d4:	eb4b 0303 	adc.w	r3, fp, r3
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020e6:	4629      	mov	r1, r5
 80020e8:	028b      	lsls	r3, r1, #10
 80020ea:	4621      	mov	r1, r4
 80020ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020f0:	4621      	mov	r1, r4
 80020f2:	028a      	lsls	r2, r1, #10
 80020f4:	4610      	mov	r0, r2
 80020f6:	4619      	mov	r1, r3
 80020f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80020fc:	2200      	movs	r2, #0
 80020fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002100:	677a      	str	r2, [r7, #116]	@ 0x74
 8002102:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002106:	f7fe f8db 	bl	80002c0 <__aeabi_uldivmod>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4613      	mov	r3, r2
 8002110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002114:	4b41      	ldr	r3, [pc, #260]	@ (800221c <HAL_RCC_GetSysClockFreq+0x354>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	3301      	adds	r3, #1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800212a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800212e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002136:	e0eb      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002138:	4b38      	ldr	r3, [pc, #224]	@ (800221c <HAL_RCC_GetSysClockFreq+0x354>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002140:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002144:	4b35      	ldr	r3, [pc, #212]	@ (800221c <HAL_RCC_GetSysClockFreq+0x354>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d06b      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002150:	4b32      	ldr	r3, [pc, #200]	@ (800221c <HAL_RCC_GetSysClockFreq+0x354>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	099b      	lsrs	r3, r3, #6
 8002156:	2200      	movs	r2, #0
 8002158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800215a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800215c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800215e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002162:	663b      	str	r3, [r7, #96]	@ 0x60
 8002164:	2300      	movs	r3, #0
 8002166:	667b      	str	r3, [r7, #100]	@ 0x64
 8002168:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800216c:	4622      	mov	r2, r4
 800216e:	462b      	mov	r3, r5
 8002170:	f04f 0000 	mov.w	r0, #0
 8002174:	f04f 0100 	mov.w	r1, #0
 8002178:	0159      	lsls	r1, r3, #5
 800217a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800217e:	0150      	lsls	r0, r2, #5
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4621      	mov	r1, r4
 8002186:	1a51      	subs	r1, r2, r1
 8002188:	61b9      	str	r1, [r7, #24]
 800218a:	4629      	mov	r1, r5
 800218c:	eb63 0301 	sbc.w	r3, r3, r1
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800219e:	4659      	mov	r1, fp
 80021a0:	018b      	lsls	r3, r1, #6
 80021a2:	4651      	mov	r1, sl
 80021a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a8:	4651      	mov	r1, sl
 80021aa:	018a      	lsls	r2, r1, #6
 80021ac:	4651      	mov	r1, sl
 80021ae:	ebb2 0801 	subs.w	r8, r2, r1
 80021b2:	4659      	mov	r1, fp
 80021b4:	eb63 0901 	sbc.w	r9, r3, r1
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021cc:	4690      	mov	r8, r2
 80021ce:	4699      	mov	r9, r3
 80021d0:	4623      	mov	r3, r4
 80021d2:	eb18 0303 	adds.w	r3, r8, r3
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	462b      	mov	r3, r5
 80021da:	eb49 0303 	adc.w	r3, r9, r3
 80021de:	617b      	str	r3, [r7, #20]
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	f04f 0300 	mov.w	r3, #0
 80021e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80021ec:	4629      	mov	r1, r5
 80021ee:	024b      	lsls	r3, r1, #9
 80021f0:	4621      	mov	r1, r4
 80021f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021f6:	4621      	mov	r1, r4
 80021f8:	024a      	lsls	r2, r1, #9
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002202:	2200      	movs	r2, #0
 8002204:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002206:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002208:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800220c:	f7fe f858 	bl	80002c0 <__aeabi_uldivmod>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4613      	mov	r3, r2
 8002216:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800221a:	e065      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x420>
 800221c:	40023800 	.word	0x40023800
 8002220:	00f42400 	.word	0x00f42400
 8002224:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002228:	4b3d      	ldr	r3, [pc, #244]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x458>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	2200      	movs	r2, #0
 8002230:	4618      	mov	r0, r3
 8002232:	4611      	mov	r1, r2
 8002234:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002238:	653b      	str	r3, [r7, #80]	@ 0x50
 800223a:	2300      	movs	r3, #0
 800223c:	657b      	str	r3, [r7, #84]	@ 0x54
 800223e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002242:	4642      	mov	r2, r8
 8002244:	464b      	mov	r3, r9
 8002246:	f04f 0000 	mov.w	r0, #0
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	0159      	lsls	r1, r3, #5
 8002250:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002254:	0150      	lsls	r0, r2, #5
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4641      	mov	r1, r8
 800225c:	1a51      	subs	r1, r2, r1
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	4649      	mov	r1, r9
 8002262:	eb63 0301 	sbc.w	r3, r3, r1
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002274:	4659      	mov	r1, fp
 8002276:	018b      	lsls	r3, r1, #6
 8002278:	4651      	mov	r1, sl
 800227a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800227e:	4651      	mov	r1, sl
 8002280:	018a      	lsls	r2, r1, #6
 8002282:	4651      	mov	r1, sl
 8002284:	1a54      	subs	r4, r2, r1
 8002286:	4659      	mov	r1, fp
 8002288:	eb63 0501 	sbc.w	r5, r3, r1
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	00eb      	lsls	r3, r5, #3
 8002296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800229a:	00e2      	lsls	r2, r4, #3
 800229c:	4614      	mov	r4, r2
 800229e:	461d      	mov	r5, r3
 80022a0:	4643      	mov	r3, r8
 80022a2:	18e3      	adds	r3, r4, r3
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	464b      	mov	r3, r9
 80022a8:	eb45 0303 	adc.w	r3, r5, r3
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ba:	4629      	mov	r1, r5
 80022bc:	028b      	lsls	r3, r1, #10
 80022be:	4621      	mov	r1, r4
 80022c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022c4:	4621      	mov	r1, r4
 80022c6:	028a      	lsls	r2, r1, #10
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80022d0:	2200      	movs	r2, #0
 80022d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80022d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80022da:	f7fd fff1 	bl	80002c0 <__aeabi_uldivmod>
 80022de:	4602      	mov	r2, r0
 80022e0:	460b      	mov	r3, r1
 80022e2:	4613      	mov	r3, r2
 80022e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x458>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	0f1b      	lsrs	r3, r3, #28
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80022f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002306:	e003      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x45c>)
 800230a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800230e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002310:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002314:	4618      	mov	r0, r3
 8002316:	37b8      	adds	r7, #184	@ 0xb8
 8002318:	46bd      	mov	sp, r7
 800231a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	00f42400 	.word	0x00f42400

08002328 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e28d      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 8083 	beq.w	800244e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002348:	4b94      	ldr	r3, [pc, #592]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b04      	cmp	r3, #4
 8002352:	d019      	beq.n	8002388 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002354:	4b91      	ldr	r3, [pc, #580]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 030c 	and.w	r3, r3, #12
        || \
 800235c:	2b08      	cmp	r3, #8
 800235e:	d106      	bne.n	800236e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002360:	4b8e      	ldr	r3, [pc, #568]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002368:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800236c:	d00c      	beq.n	8002388 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236e:	4b8b      	ldr	r3, [pc, #556]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d112      	bne.n	80023a0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237a:	4b88      	ldr	r3, [pc, #544]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002382:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002386:	d10b      	bne.n	80023a0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002388:	4b84      	ldr	r3, [pc, #528]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d05b      	beq.n	800244c <HAL_RCC_OscConfig+0x124>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d157      	bne.n	800244c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e25a      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a8:	d106      	bne.n	80023b8 <HAL_RCC_OscConfig+0x90>
 80023aa:	4b7c      	ldr	r3, [pc, #496]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a7b      	ldr	r2, [pc, #492]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023b4:	6013      	str	r3, [r2, #0]
 80023b6:	e01d      	b.n	80023f4 <HAL_RCC_OscConfig+0xcc>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0xb4>
 80023c2:	4b76      	ldr	r3, [pc, #472]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a75      	ldr	r2, [pc, #468]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80023c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023cc:	6013      	str	r3, [r2, #0]
 80023ce:	4b73      	ldr	r3, [pc, #460]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a72      	ldr	r2, [pc, #456]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	e00b      	b.n	80023f4 <HAL_RCC_OscConfig+0xcc>
 80023dc:	4b6f      	ldr	r3, [pc, #444]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a6e      	ldr	r2, [pc, #440]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e6:	6013      	str	r3, [r2, #0]
 80023e8:	4b6c      	ldr	r3, [pc, #432]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a6b      	ldr	r2, [pc, #428]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80023ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d013      	beq.n	8002424 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7ff f910 	bl	8001620 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002404:	f7ff f90c 	bl	8001620 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b64      	cmp	r3, #100	@ 0x64
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e21f      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	4b61      	ldr	r3, [pc, #388]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d0f0      	beq.n	8002404 <HAL_RCC_OscConfig+0xdc>
 8002422:	e014      	b.n	800244e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7ff f8fc 	bl	8001620 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800242c:	f7ff f8f8 	bl	8001620 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	@ 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e20b      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	4b57      	ldr	r3, [pc, #348]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x104>
 800244a:	e000      	b.n	800244e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d06f      	beq.n	800253a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800245a:	4b50      	ldr	r3, [pc, #320]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b00      	cmp	r3, #0
 8002464:	d017      	beq.n	8002496 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002466:	4b4d      	ldr	r3, [pc, #308]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
        || \
 800246e:	2b08      	cmp	r3, #8
 8002470:	d105      	bne.n	800247e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002472:	4b4a      	ldr	r3, [pc, #296]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00b      	beq.n	8002496 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247e:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002486:	2b0c      	cmp	r3, #12
 8002488:	d11c      	bne.n	80024c4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248a:	4b44      	ldr	r3, [pc, #272]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d116      	bne.n	80024c4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002496:	4b41      	ldr	r3, [pc, #260]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <HAL_RCC_OscConfig+0x186>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e1d3      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ae:	4b3b      	ldr	r3, [pc, #236]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4937      	ldr	r1, [pc, #220]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024c2:	e03a      	b.n	800253a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d020      	beq.n	800250e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024cc:	4b34      	ldr	r3, [pc, #208]	@ (80025a0 <HAL_RCC_OscConfig+0x278>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d2:	f7ff f8a5 	bl	8001620 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024da:	f7ff f8a1 	bl	8001620 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e1b4      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ec:	4b2b      	ldr	r3, [pc, #172]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f8:	4b28      	ldr	r3, [pc, #160]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	00db      	lsls	r3, r3, #3
 8002506:	4925      	ldr	r1, [pc, #148]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002508:	4313      	orrs	r3, r2
 800250a:	600b      	str	r3, [r1, #0]
 800250c:	e015      	b.n	800253a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250e:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <HAL_RCC_OscConfig+0x278>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7ff f884 	bl	8001620 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251c:	f7ff f880 	bl	8001620 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e193      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252e:	4b1b      	ldr	r3, [pc, #108]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d036      	beq.n	80025b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d016      	beq.n	800257c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <HAL_RCC_OscConfig+0x27c>)
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002554:	f7ff f864 	bl	8001620 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800255c:	f7ff f860 	bl	8001620 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e173      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256e:	4b0b      	ldr	r3, [pc, #44]	@ (800259c <HAL_RCC_OscConfig+0x274>)
 8002570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x234>
 800257a:	e01b      	b.n	80025b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257c:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <HAL_RCC_OscConfig+0x27c>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7ff f84d 	bl	8001620 <HAL_GetTick>
 8002586:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002588:	e00e      	b.n	80025a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258a:	f7ff f849 	bl	8001620 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d907      	bls.n	80025a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e15c      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
 800259c:	40023800 	.word	0x40023800
 80025a0:	42470000 	.word	0x42470000
 80025a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	4b8a      	ldr	r3, [pc, #552]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1ea      	bne.n	800258a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 8097 	beq.w	80026f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c6:	4b83      	ldr	r3, [pc, #524]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10f      	bne.n	80025f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	4b7f      	ldr	r3, [pc, #508]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	4a7e      	ldr	r2, [pc, #504]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025e2:	4b7c      	ldr	r3, [pc, #496]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ea:	60bb      	str	r3, [r7, #8]
 80025ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ee:	2301      	movs	r3, #1
 80025f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b79      	ldr	r3, [pc, #484]	@ (80027d8 <HAL_RCC_OscConfig+0x4b0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d118      	bne.n	8002630 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fe:	4b76      	ldr	r3, [pc, #472]	@ (80027d8 <HAL_RCC_OscConfig+0x4b0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a75      	ldr	r2, [pc, #468]	@ (80027d8 <HAL_RCC_OscConfig+0x4b0>)
 8002604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260a:	f7ff f809 	bl	8001620 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002612:	f7ff f805 	bl	8001620 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e118      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	4b6c      	ldr	r3, [pc, #432]	@ (80027d8 <HAL_RCC_OscConfig+0x4b0>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	2b01      	cmp	r3, #1
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x31e>
 8002638:	4b66      	ldr	r3, [pc, #408]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263c:	4a65      	ldr	r2, [pc, #404]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6713      	str	r3, [r2, #112]	@ 0x70
 8002644:	e01c      	b.n	8002680 <HAL_RCC_OscConfig+0x358>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b05      	cmp	r3, #5
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x340>
 800264e:	4b61      	ldr	r3, [pc, #388]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002652:	4a60      	ldr	r2, [pc, #384]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	6713      	str	r3, [r2, #112]	@ 0x70
 800265a:	4b5e      	ldr	r3, [pc, #376]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800265e:	4a5d      	ldr	r2, [pc, #372]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6713      	str	r3, [r2, #112]	@ 0x70
 8002666:	e00b      	b.n	8002680 <HAL_RCC_OscConfig+0x358>
 8002668:	4b5a      	ldr	r3, [pc, #360]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 800266a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800266c:	4a59      	ldr	r2, [pc, #356]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	6713      	str	r3, [r2, #112]	@ 0x70
 8002674:	4b57      	ldr	r3, [pc, #348]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002678:	4a56      	ldr	r2, [pc, #344]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 800267a:	f023 0304 	bic.w	r3, r3, #4
 800267e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d015      	beq.n	80026b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002688:	f7fe ffca 	bl	8001620 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002690:	f7fe ffc6 	bl	8001620 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e0d7      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a6:	4b4b      	ldr	r3, [pc, #300]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 80026a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0ee      	beq.n	8002690 <HAL_RCC_OscConfig+0x368>
 80026b2:	e014      	b.n	80026de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b4:	f7fe ffb4 	bl	8001620 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ba:	e00a      	b.n	80026d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026bc:	f7fe ffb0 	bl	8001620 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e0c1      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d2:	4b40      	ldr	r3, [pc, #256]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 80026d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1ee      	bne.n	80026bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026de:	7dfb      	ldrb	r3, [r7, #23]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d105      	bne.n	80026f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e4:	4b3b      	ldr	r3, [pc, #236]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 80026e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e8:	4a3a      	ldr	r2, [pc, #232]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 80026ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80ad 	beq.w	8002854 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026fa:	4b36      	ldr	r3, [pc, #216]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
 8002702:	2b08      	cmp	r3, #8
 8002704:	d060      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b02      	cmp	r3, #2
 800270c:	d145      	bne.n	800279a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270e:	4b33      	ldr	r3, [pc, #204]	@ (80027dc <HAL_RCC_OscConfig+0x4b4>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7fe ff84 	bl	8001620 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800271c:	f7fe ff80 	bl	8001620 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e093      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	4b29      	ldr	r3, [pc, #164]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1f0      	bne.n	800271c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69da      	ldr	r2, [r3, #28]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	019b      	lsls	r3, r3, #6
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	085b      	lsrs	r3, r3, #1
 8002752:	3b01      	subs	r3, #1
 8002754:	041b      	lsls	r3, r3, #16
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	061b      	lsls	r3, r3, #24
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002764:	071b      	lsls	r3, r3, #28
 8002766:	491b      	ldr	r1, [pc, #108]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b1b      	ldr	r3, [pc, #108]	@ (80027dc <HAL_RCC_OscConfig+0x4b4>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002772:	f7fe ff55 	bl	8001620 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7fe ff51 	bl	8001620 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e064      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0f0      	beq.n	800277a <HAL_RCC_OscConfig+0x452>
 8002798:	e05c      	b.n	8002854 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279a:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <HAL_RCC_OscConfig+0x4b4>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a0:	f7fe ff3e 	bl	8001620 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a8:	f7fe ff3a 	bl	8001620 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e04d      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	4b06      	ldr	r3, [pc, #24]	@ (80027d4 <HAL_RCC_OscConfig+0x4ac>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x480>
 80027c6:	e045      	b.n	8002854 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e040      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40007000 	.word	0x40007000
 80027dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002860 <HAL_RCC_OscConfig+0x538>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d030      	beq.n	8002850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d129      	bne.n	8002850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	429a      	cmp	r2, r3
 8002808:	d122      	bne.n	8002850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002810:	4013      	ands	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002816:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002818:	4293      	cmp	r3, r2
 800281a:	d119      	bne.n	8002850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	3b01      	subs	r3, #1
 800282a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d10f      	bne.n	8002850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d107      	bne.n	8002850 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284c:	429a      	cmp	r2, r3
 800284e:	d001      	beq.n	8002854 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800

08002864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e041      	b.n	80028fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f7fe fcca 	bl	8001224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f000 fd5a 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
	...

08002904 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d001      	beq.n	800291c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e046      	b.n	80029aa <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a23      	ldr	r2, [pc, #140]	@ (80029b8 <HAL_TIM_Base_Start+0xb4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d022      	beq.n	8002974 <HAL_TIM_Base_Start+0x70>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002936:	d01d      	beq.n	8002974 <HAL_TIM_Base_Start+0x70>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1f      	ldr	r2, [pc, #124]	@ (80029bc <HAL_TIM_Base_Start+0xb8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d018      	beq.n	8002974 <HAL_TIM_Base_Start+0x70>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1e      	ldr	r2, [pc, #120]	@ (80029c0 <HAL_TIM_Base_Start+0xbc>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d013      	beq.n	8002974 <HAL_TIM_Base_Start+0x70>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1c      	ldr	r2, [pc, #112]	@ (80029c4 <HAL_TIM_Base_Start+0xc0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00e      	beq.n	8002974 <HAL_TIM_Base_Start+0x70>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1b      	ldr	r2, [pc, #108]	@ (80029c8 <HAL_TIM_Base_Start+0xc4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d009      	beq.n	8002974 <HAL_TIM_Base_Start+0x70>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a19      	ldr	r2, [pc, #100]	@ (80029cc <HAL_TIM_Base_Start+0xc8>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d004      	beq.n	8002974 <HAL_TIM_Base_Start+0x70>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a18      	ldr	r2, [pc, #96]	@ (80029d0 <HAL_TIM_Base_Start+0xcc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d111      	bne.n	8002998 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2b06      	cmp	r3, #6
 8002984:	d010      	beq.n	80029a8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002996:	e007      	b.n	80029a8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	40010000 	.word	0x40010000
 80029bc:	40000400 	.word	0x40000400
 80029c0:	40000800 	.word	0x40000800
 80029c4:	40000c00 	.word	0x40000c00
 80029c8:	40010400 	.word	0x40010400
 80029cc:	40014000 	.word	0x40014000
 80029d0:	40001800 	.word	0x40001800

080029d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e041      	b.n	8002a6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f839 	bl	8002a72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	4619      	mov	r1, r3
 8002a12:	4610      	mov	r0, r2
 8002a14:	f000 fca2 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
	...

08002a88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d109      	bne.n	8002aac <HAL_TIM_PWM_Start+0x24>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	bf14      	ite	ne
 8002aa4:	2301      	movne	r3, #1
 8002aa6:	2300      	moveq	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e022      	b.n	8002af2 <HAL_TIM_PWM_Start+0x6a>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d109      	bne.n	8002ac6 <HAL_TIM_PWM_Start+0x3e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	bf14      	ite	ne
 8002abe:	2301      	movne	r3, #1
 8002ac0:	2300      	moveq	r3, #0
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	e015      	b.n	8002af2 <HAL_TIM_PWM_Start+0x6a>
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d109      	bne.n	8002ae0 <HAL_TIM_PWM_Start+0x58>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	bf14      	ite	ne
 8002ad8:	2301      	movne	r3, #1
 8002ada:	2300      	moveq	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e008      	b.n	8002af2 <HAL_TIM_PWM_Start+0x6a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e07c      	b.n	8002bf4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d104      	bne.n	8002b0a <HAL_TIM_PWM_Start+0x82>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b08:	e013      	b.n	8002b32 <HAL_TIM_PWM_Start+0xaa>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d104      	bne.n	8002b1a <HAL_TIM_PWM_Start+0x92>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b18:	e00b      	b.n	8002b32 <HAL_TIM_PWM_Start+0xaa>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	d104      	bne.n	8002b2a <HAL_TIM_PWM_Start+0xa2>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b28:	e003      	b.n	8002b32 <HAL_TIM_PWM_Start+0xaa>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2201      	movs	r2, #1
 8002b38:	6839      	ldr	r1, [r7, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f001 f828 	bl	8003b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a2d      	ldr	r2, [pc, #180]	@ (8002bfc <HAL_TIM_PWM_Start+0x174>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d004      	beq.n	8002b54 <HAL_TIM_PWM_Start+0xcc>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8002c00 <HAL_TIM_PWM_Start+0x178>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d101      	bne.n	8002b58 <HAL_TIM_PWM_Start+0xd0>
 8002b54:	2301      	movs	r3, #1
 8002b56:	e000      	b.n	8002b5a <HAL_TIM_PWM_Start+0xd2>
 8002b58:	2300      	movs	r3, #0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a22      	ldr	r2, [pc, #136]	@ (8002bfc <HAL_TIM_PWM_Start+0x174>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d022      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x136>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b80:	d01d      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x136>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1f      	ldr	r2, [pc, #124]	@ (8002c04 <HAL_TIM_PWM_Start+0x17c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d018      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x136>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <HAL_TIM_PWM_Start+0x180>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x136>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002c0c <HAL_TIM_PWM_Start+0x184>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d00e      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x136>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a16      	ldr	r2, [pc, #88]	@ (8002c00 <HAL_TIM_PWM_Start+0x178>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d009      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x136>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a18      	ldr	r2, [pc, #96]	@ (8002c10 <HAL_TIM_PWM_Start+0x188>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d004      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x136>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a16      	ldr	r2, [pc, #88]	@ (8002c14 <HAL_TIM_PWM_Start+0x18c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d111      	bne.n	8002be2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b06      	cmp	r3, #6
 8002bce:	d010      	beq.n	8002bf2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be0:	e007      	b.n	8002bf2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40010400 	.word	0x40010400
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40000800 	.word	0x40000800
 8002c0c:	40000c00 	.word	0x40000c00
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40001800 	.word	0x40001800

08002c18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e041      	b.n	8002cae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f839 	bl	8002cb6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f000 fb80 	bl	800335c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d020      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d01b      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f06f 0202 	mvn.w	r2, #2
 8002cfe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d003      	beq.n	8002d1c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d14:	6878      	ldr	r0, [r7, #4]
 8002d16:	f000 fb02 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 8002d1a:	e005      	b.n	8002d28 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 faf4 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fb05 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d01b      	beq.n	8002d7a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f06f 0204 	mvn.w	r2, #4
 8002d4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d003      	beq.n	8002d68 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 fadc 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 8002d66:	e005      	b.n	8002d74 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 face 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 fadf 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d020      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01b      	beq.n	8002dc6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f06f 0208 	mvn.w	r2, #8
 8002d96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f003 0303 	and.w	r3, r3, #3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fab6 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 8002db2:	e005      	b.n	8002dc0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 faa8 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fab9 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d020      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0310 	and.w	r3, r3, #16
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d01b      	beq.n	8002e12 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f06f 0210 	mvn.w	r2, #16
 8002de2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2208      	movs	r2, #8
 8002de8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fa90 	bl	800331e <HAL_TIM_IC_CaptureCallback>
 8002dfe:	e005      	b.n	8002e0c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fa82 	bl	800330a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fa93 	bl	8003332 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00c      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d007      	beq.n	8002e36 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f06f 0201 	mvn.w	r2, #1
 8002e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fa60 	bl	80032f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00c      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d007      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 ff47 	bl	8003ce8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00c      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d007      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	f000 fa64 	bl	8003346 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00c      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d007      	beq.n	8002ea2 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f06f 0220 	mvn.w	r2, #32
 8002e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 ff19 	bl	8003cd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e088      	b.n	8002fda <HAL_TIM_IC_ConfigChannel+0x130>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d11b      	bne.n	8002f0e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002ee6:	f000 fc8f 	bl	8003808 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 020c 	bic.w	r2, r2, #12
 8002ef8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6999      	ldr	r1, [r3, #24]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	619a      	str	r2, [r3, #24]
 8002f0c:	e060      	b.n	8002fd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d11c      	bne.n	8002f4e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002f24:	f000 fd13 	bl	800394e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699a      	ldr	r2, [r3, #24]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002f36:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6999      	ldr	r1, [r3, #24]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	021a      	lsls	r2, r3, #8
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	619a      	str	r2, [r3, #24]
 8002f4c:	e040      	b.n	8002fd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d11b      	bne.n	8002f8c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002f64:	f000 fd60 	bl	8003a28 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 020c 	bic.w	r2, r2, #12
 8002f76:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	69d9      	ldr	r1, [r3, #28]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	61da      	str	r2, [r3, #28]
 8002f8a:	e021      	b.n	8002fd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b0c      	cmp	r3, #12
 8002f90:	d11c      	bne.n	8002fcc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002fa2:	f000 fd7d 	bl	8003aa0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002fb4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69d9      	ldr	r1, [r3, #28]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	021a      	lsls	r2, r3, #8
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	61da      	str	r2, [r3, #28]
 8002fca:	e001      	b.n	8002fd0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d101      	bne.n	8003002 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ffe:	2302      	movs	r3, #2
 8003000:	e0ae      	b.n	8003160 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	f200 809f 	bhi.w	8003150 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003012:	a201      	add	r2, pc, #4	@ (adr r2, 8003018 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003018:	0800304d 	.word	0x0800304d
 800301c:	08003151 	.word	0x08003151
 8003020:	08003151 	.word	0x08003151
 8003024:	08003151 	.word	0x08003151
 8003028:	0800308d 	.word	0x0800308d
 800302c:	08003151 	.word	0x08003151
 8003030:	08003151 	.word	0x08003151
 8003034:	08003151 	.word	0x08003151
 8003038:	080030cf 	.word	0x080030cf
 800303c:	08003151 	.word	0x08003151
 8003040:	08003151 	.word	0x08003151
 8003044:	08003151 	.word	0x08003151
 8003048:	0800310f 	.word	0x0800310f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fa28 	bl	80034a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699a      	ldr	r2, [r3, #24]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0208 	orr.w	r2, r2, #8
 8003066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 0204 	bic.w	r2, r2, #4
 8003076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6999      	ldr	r1, [r3, #24]
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	619a      	str	r2, [r3, #24]
      break;
 800308a:	e064      	b.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	4618      	mov	r0, r3
 8003094:	f000 fa78 	bl	8003588 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	699a      	ldr	r2, [r3, #24]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699a      	ldr	r2, [r3, #24]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6999      	ldr	r1, [r3, #24]
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	021a      	lsls	r2, r3, #8
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	619a      	str	r2, [r3, #24]
      break;
 80030cc:	e043      	b.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 facd 	bl	8003674 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69da      	ldr	r2, [r3, #28]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0208 	orr.w	r2, r2, #8
 80030e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	69da      	ldr	r2, [r3, #28]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0204 	bic.w	r2, r2, #4
 80030f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69d9      	ldr	r1, [r3, #28]
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	691a      	ldr	r2, [r3, #16]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	61da      	str	r2, [r3, #28]
      break;
 800310c:	e023      	b.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 fb21 	bl	800375c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	69da      	ldr	r2, [r3, #28]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69da      	ldr	r2, [r3, #28]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69d9      	ldr	r1, [r3, #28]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	021a      	lsls	r2, r3, #8
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	61da      	str	r2, [r3, #28]
      break;
 800314e:	e002      	b.n	8003156 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	75fb      	strb	r3, [r7, #23]
      break;
 8003154:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800315e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003172:	2300      	movs	r3, #0
 8003174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_TIM_ConfigClockSource+0x1c>
 8003180:	2302      	movs	r3, #2
 8003182:	e0b4      	b.n	80032ee <HAL_TIM_ConfigClockSource+0x186>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031bc:	d03e      	beq.n	800323c <HAL_TIM_ConfigClockSource+0xd4>
 80031be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c2:	f200 8087 	bhi.w	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ca:	f000 8086 	beq.w	80032da <HAL_TIM_ConfigClockSource+0x172>
 80031ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d2:	d87f      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b70      	cmp	r3, #112	@ 0x70
 80031d6:	d01a      	beq.n	800320e <HAL_TIM_ConfigClockSource+0xa6>
 80031d8:	2b70      	cmp	r3, #112	@ 0x70
 80031da:	d87b      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b60      	cmp	r3, #96	@ 0x60
 80031de:	d050      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0x11a>
 80031e0:	2b60      	cmp	r3, #96	@ 0x60
 80031e2:	d877      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031e4:	2b50      	cmp	r3, #80	@ 0x50
 80031e6:	d03c      	beq.n	8003262 <HAL_TIM_ConfigClockSource+0xfa>
 80031e8:	2b50      	cmp	r3, #80	@ 0x50
 80031ea:	d873      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031ec:	2b40      	cmp	r3, #64	@ 0x40
 80031ee:	d058      	beq.n	80032a2 <HAL_TIM_ConfigClockSource+0x13a>
 80031f0:	2b40      	cmp	r3, #64	@ 0x40
 80031f2:	d86f      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031f4:	2b30      	cmp	r3, #48	@ 0x30
 80031f6:	d064      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x15a>
 80031f8:	2b30      	cmp	r3, #48	@ 0x30
 80031fa:	d86b      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 80031fc:	2b20      	cmp	r3, #32
 80031fe:	d060      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003200:	2b20      	cmp	r3, #32
 8003202:	d867      	bhi.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
 8003204:	2b00      	cmp	r3, #0
 8003206:	d05c      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x15a>
 8003208:	2b10      	cmp	r3, #16
 800320a:	d05a      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0x15a>
 800320c:	e062      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800321e:	f000 fc97 	bl	8003b50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	609a      	str	r2, [r3, #8]
      break;
 800323a:	e04f      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800324c:	f000 fc80 	bl	8003b50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800325e:	609a      	str	r2, [r3, #8]
      break;
 8003260:	e03c      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	461a      	mov	r2, r3
 8003270:	f000 fb3e 	bl	80038f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2150      	movs	r1, #80	@ 0x50
 800327a:	4618      	mov	r0, r3
 800327c:	f000 fc4d 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 8003280:	e02c      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800328e:	461a      	mov	r2, r3
 8003290:	f000 fb9a 	bl	80039c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2160      	movs	r1, #96	@ 0x60
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fc3d 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 80032a0:	e01c      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ae:	461a      	mov	r2, r3
 80032b0:	f000 fb1e 	bl	80038f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2140      	movs	r1, #64	@ 0x40
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fc2d 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 80032c0:	e00c      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4619      	mov	r1, r3
 80032cc:	4610      	mov	r0, r2
 80032ce:	f000 fc24 	bl	8003b1a <TIM_ITRx_SetConfig>
      break;
 80032d2:	e003      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	73fb      	strb	r3, [r7, #15]
      break;
 80032d8:	e000      	b.n	80032dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a43      	ldr	r2, [pc, #268]	@ (800347c <TIM_Base_SetConfig+0x120>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337a:	d00f      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a40      	ldr	r2, [pc, #256]	@ (8003480 <TIM_Base_SetConfig+0x124>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00b      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a3f      	ldr	r2, [pc, #252]	@ (8003484 <TIM_Base_SetConfig+0x128>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d007      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a3e      	ldr	r2, [pc, #248]	@ (8003488 <TIM_Base_SetConfig+0x12c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x40>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a3d      	ldr	r2, [pc, #244]	@ (800348c <TIM_Base_SetConfig+0x130>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d108      	bne.n	80033ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a32      	ldr	r2, [pc, #200]	@ (800347c <TIM_Base_SetConfig+0x120>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d02b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033bc:	d027      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a2f      	ldr	r2, [pc, #188]	@ (8003480 <TIM_Base_SetConfig+0x124>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d023      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a2e      	ldr	r2, [pc, #184]	@ (8003484 <TIM_Base_SetConfig+0x128>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01f      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a2d      	ldr	r2, [pc, #180]	@ (8003488 <TIM_Base_SetConfig+0x12c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d01b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	@ (800348c <TIM_Base_SetConfig+0x130>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d017      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003490 <TIM_Base_SetConfig+0x134>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d013      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003494 <TIM_Base_SetConfig+0x138>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d00f      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a29      	ldr	r2, [pc, #164]	@ (8003498 <TIM_Base_SetConfig+0x13c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d00b      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a28      	ldr	r2, [pc, #160]	@ (800349c <TIM_Base_SetConfig+0x140>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d007      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a27      	ldr	r2, [pc, #156]	@ (80034a0 <TIM_Base_SetConfig+0x144>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d003      	beq.n	800340e <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a26      	ldr	r2, [pc, #152]	@ (80034a4 <TIM_Base_SetConfig+0x148>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d108      	bne.n	8003420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4313      	orrs	r3, r2
 800341e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	4313      	orrs	r3, r2
 800342c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a0e      	ldr	r2, [pc, #56]	@ (800347c <TIM_Base_SetConfig+0x120>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <TIM_Base_SetConfig+0xf2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a10      	ldr	r2, [pc, #64]	@ (800348c <TIM_Base_SetConfig+0x130>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d103      	bne.n	8003456 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	691a      	ldr	r2, [r3, #16]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f043 0204 	orr.w	r2, r3, #4
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	40010000 	.word	0x40010000
 8003480:	40000400 	.word	0x40000400
 8003484:	40000800 	.word	0x40000800
 8003488:	40000c00 	.word	0x40000c00
 800348c:	40010400 	.word	0x40010400
 8003490:	40014000 	.word	0x40014000
 8003494:	40014400 	.word	0x40014400
 8003498:	40014800 	.word	0x40014800
 800349c:	40001800 	.word	0x40001800
 80034a0:	40001c00 	.word	0x40001c00
 80034a4:	40002000 	.word	0x40002000

080034a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	f023 0201 	bic.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 0303 	bic.w	r3, r3, #3
 80034de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f023 0302 	bic.w	r3, r3, #2
 80034f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a20      	ldr	r2, [pc, #128]	@ (8003580 <TIM_OC1_SetConfig+0xd8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_OC1_SetConfig+0x64>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a1f      	ldr	r2, [pc, #124]	@ (8003584 <TIM_OC1_SetConfig+0xdc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d10c      	bne.n	8003526 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f023 0308 	bic.w	r3, r3, #8
 8003512:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	4313      	orrs	r3, r2
 800351c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f023 0304 	bic.w	r3, r3, #4
 8003524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a15      	ldr	r2, [pc, #84]	@ (8003580 <TIM_OC1_SetConfig+0xd8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d003      	beq.n	8003536 <TIM_OC1_SetConfig+0x8e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a14      	ldr	r2, [pc, #80]	@ (8003584 <TIM_OC1_SetConfig+0xdc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d111      	bne.n	800355a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800353c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003544:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4313      	orrs	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	693a      	ldr	r2, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	621a      	str	r2, [r3, #32]
}
 8003574:	bf00      	nop
 8003576:	371c      	adds	r7, #28
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	40010000 	.word	0x40010000
 8003584:	40010400 	.word	0x40010400

08003588 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	f023 0210 	bic.w	r2, r3, #16
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	021b      	lsls	r3, r3, #8
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 0320 	bic.w	r3, r3, #32
 80035d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4313      	orrs	r3, r2
 80035de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a22      	ldr	r2, [pc, #136]	@ (800366c <TIM_OC2_SetConfig+0xe4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_OC2_SetConfig+0x68>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a21      	ldr	r2, [pc, #132]	@ (8003670 <TIM_OC2_SetConfig+0xe8>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10d      	bne.n	800360c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800360a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a17      	ldr	r2, [pc, #92]	@ (800366c <TIM_OC2_SetConfig+0xe4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_OC2_SetConfig+0x94>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a16      	ldr	r2, [pc, #88]	@ (8003670 <TIM_OC2_SetConfig+0xe8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d113      	bne.n	8003644 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003622:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800362a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	621a      	str	r2, [r3, #32]
}
 800365e:	bf00      	nop
 8003660:	371c      	adds	r7, #28
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000
 8003670:	40010400 	.word	0x40010400

08003674 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	697a      	ldr	r2, [r7, #20]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a21      	ldr	r2, [pc, #132]	@ (8003754 <TIM_OC3_SetConfig+0xe0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d003      	beq.n	80036da <TIM_OC3_SetConfig+0x66>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a20      	ldr	r2, [pc, #128]	@ (8003758 <TIM_OC3_SetConfig+0xe4>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d10d      	bne.n	80036f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a16      	ldr	r2, [pc, #88]	@ (8003754 <TIM_OC3_SetConfig+0xe0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_OC3_SetConfig+0x92>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a15      	ldr	r2, [pc, #84]	@ (8003758 <TIM_OC3_SetConfig+0xe4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d113      	bne.n	800372e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800370c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	621a      	str	r2, [r3, #32]
}
 8003748:	bf00      	nop
 800374a:	371c      	adds	r7, #28
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	40010000 	.word	0x40010000
 8003758:	40010400 	.word	0x40010400

0800375c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	031b      	lsls	r3, r3, #12
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a12      	ldr	r2, [pc, #72]	@ (8003800 <TIM_OC4_SetConfig+0xa4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_OC4_SetConfig+0x68>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a11      	ldr	r2, [pc, #68]	@ (8003804 <TIM_OC4_SetConfig+0xa8>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d109      	bne.n	80037d8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	019b      	lsls	r3, r3, #6
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	621a      	str	r2, [r3, #32]
}
 80037f2:	bf00      	nop
 80037f4:	371c      	adds	r7, #28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40010000 	.word	0x40010000
 8003804:	40010400 	.word	0x40010400

08003808 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	f023 0201 	bic.w	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4a28      	ldr	r2, [pc, #160]	@ (80038d4 <TIM_TI1_SetConfig+0xcc>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01b      	beq.n	800386e <TIM_TI1_SetConfig+0x66>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800383c:	d017      	beq.n	800386e <TIM_TI1_SetConfig+0x66>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	4a25      	ldr	r2, [pc, #148]	@ (80038d8 <TIM_TI1_SetConfig+0xd0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <TIM_TI1_SetConfig+0x66>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4a24      	ldr	r2, [pc, #144]	@ (80038dc <TIM_TI1_SetConfig+0xd4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00f      	beq.n	800386e <TIM_TI1_SetConfig+0x66>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4a23      	ldr	r2, [pc, #140]	@ (80038e0 <TIM_TI1_SetConfig+0xd8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00b      	beq.n	800386e <TIM_TI1_SetConfig+0x66>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	4a22      	ldr	r2, [pc, #136]	@ (80038e4 <TIM_TI1_SetConfig+0xdc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d007      	beq.n	800386e <TIM_TI1_SetConfig+0x66>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a21      	ldr	r2, [pc, #132]	@ (80038e8 <TIM_TI1_SetConfig+0xe0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_TI1_SetConfig+0x66>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a20      	ldr	r2, [pc, #128]	@ (80038ec <TIM_TI1_SetConfig+0xe4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <TIM_TI1_SetConfig+0x6a>
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <TIM_TI1_SetConfig+0x6c>
 8003872:	2300      	movs	r3, #0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	f023 0303 	bic.w	r3, r3, #3
 800387e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	e003      	b.n	8003892 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f043 0301 	orr.w	r3, r3, #1
 8003890:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f023 030a 	bic.w	r3, r3, #10
 80038ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f003 030a 	and.w	r3, r3, #10
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	621a      	str	r2, [r3, #32]
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40010000 	.word	0x40010000
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40000c00 	.word	0x40000c00
 80038e4:	40010400 	.word	0x40010400
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40001800 	.word	0x40001800

080038f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	f023 0201 	bic.w	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800391a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f023 030a 	bic.w	r3, r3, #10
 800392c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800394e:	b480      	push	{r7}
 8003950:	b087      	sub	sp, #28
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f023 0210 	bic.w	r2, r3, #16
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800397a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800398c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	031b      	lsls	r3, r3, #12
 8003992:	b29b      	uxth	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80039a0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	621a      	str	r2, [r3, #32]
}
 80039bc:	bf00      	nop
 80039be:	371c      	adds	r7, #28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f023 0210 	bic.w	r2, r3, #16
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	031b      	lsls	r3, r3, #12
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	621a      	str	r2, [r3, #32]
}
 8003a1c:	bf00      	nop
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
 8003a34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a1b      	ldr	r3, [r3, #32]
 8003a3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a1b      	ldr	r3, [r3, #32]
 8003a40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f023 0303 	bic.w	r3, r3, #3
 8003a54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003a78:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	021b      	lsls	r3, r3, #8
 8003a7e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
 8003aac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003acc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	021b      	lsls	r3, r3, #8
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ade:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	031b      	lsls	r3, r3, #12
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003af2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	031b      	lsls	r3, r3, #12
 8003af8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b32:	683a      	ldr	r2, [r7, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	f043 0307 	orr.w	r3, r3, #7
 8003b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b087      	sub	sp, #28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	60b9      	str	r1, [r7, #8]
 8003b5a:	607a      	str	r2, [r7, #4]
 8003b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	021a      	lsls	r2, r3, #8
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	609a      	str	r2, [r3, #8]
}
 8003b84:	bf00      	nop
 8003b86:	371c      	adds	r7, #28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a1a      	ldr	r2, [r3, #32]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	401a      	ands	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e05a      	b.n	8003caa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2202      	movs	r2, #2
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c1a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a21      	ldr	r2, [pc, #132]	@ (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d022      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c40:	d01d      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a1d      	ldr	r2, [pc, #116]	@ (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d018      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d013      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00e      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a18      	ldr	r2, [pc, #96]	@ (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d009      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a17      	ldr	r2, [pc, #92]	@ (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d004      	beq.n	8003c7e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a15      	ldr	r2, [pc, #84]	@ (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d10c      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40000c00 	.word	0x40000c00
 8003cc8:	40010400 	.word	0x40010400
 8003ccc:	40014000 	.word	0x40014000
 8003cd0:	40001800 	.word	0x40001800

08003cd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e042      	b.n	8003d94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7fd fb1a 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2224      	movs	r2, #36	@ 0x24
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68da      	ldr	r2, [r3, #12]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f973 	bl	800402c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691a      	ldr	r2, [r3, #16]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695a      	ldr	r2, [r3, #20]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2220      	movs	r2, #32
 8003d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08a      	sub	sp, #40	@ 0x28
 8003da0:	af02      	add	r7, sp, #8
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d175      	bne.n	8003ea8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d002      	beq.n	8003dc8 <HAL_UART_Transmit+0x2c>
 8003dc2:	88fb      	ldrh	r3, [r7, #6]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e06e      	b.n	8003eaa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2221      	movs	r2, #33	@ 0x21
 8003dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dda:	f7fd fc21 	bl	8001620 <HAL_GetTick>
 8003dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	88fa      	ldrh	r2, [r7, #6]
 8003dea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003df4:	d108      	bne.n	8003e08 <HAL_UART_Transmit+0x6c>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d104      	bne.n	8003e08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e003      	b.n	8003e10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e10:	e02e      	b.n	8003e70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2180      	movs	r1, #128	@ 0x80
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f848 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e03a      	b.n	8003eaa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	3302      	adds	r3, #2
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	e007      	b.n	8003e62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	3301      	adds	r3, #1
 8003e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1cb      	bne.n	8003e12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2140      	movs	r1, #64	@ 0x40
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f814 	bl	8003eb2 <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d005      	beq.n	8003e9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e006      	b.n	8003eaa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b086      	sub	sp, #24
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	603b      	str	r3, [r7, #0]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec2:	e03b      	b.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eca:	d037      	beq.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ecc:	f7fd fba8 	bl	8001620 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	6a3a      	ldr	r2, [r7, #32]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d302      	bcc.n	8003ee2 <UART_WaitOnFlagUntilTimeout+0x30>
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e03a      	b.n	8003f5c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d023      	beq.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b80      	cmp	r3, #128	@ 0x80
 8003ef8:	d020      	beq.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b40      	cmp	r3, #64	@ 0x40
 8003efe:	d01d      	beq.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b08      	cmp	r3, #8
 8003f0c:	d116      	bne.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 f81d 	bl	8003f64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e00f      	b.n	8003f5c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4013      	ands	r3, r2
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	461a      	mov	r2, r3
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d0b4      	beq.n	8003ec4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b095      	sub	sp, #84	@ 0x54
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	330c      	adds	r3, #12
 8003f72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e5      	bne.n	8003f6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3314      	adds	r3, #20
 8003fa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3314      	adds	r3, #20
 8003fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e5      	bne.n	8003fa0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d119      	bne.n	8004010 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	330c      	adds	r3, #12
 8003fe2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f023 0310 	bic.w	r3, r3, #16
 8003ff2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	330c      	adds	r3, #12
 8003ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ffc:	61ba      	str	r2, [r7, #24]
 8003ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	6979      	ldr	r1, [r7, #20]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	e841 2300 	strex	r3, r2, [r1]
 8004008:	613b      	str	r3, [r7, #16]
   return(result);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e5      	bne.n	8003fdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800401e:	bf00      	nop
 8004020:	3754      	adds	r7, #84	@ 0x54
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
	...

0800402c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800402c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004030:	b0c0      	sub	sp, #256	@ 0x100
 8004032:	af00      	add	r7, sp, #0
 8004034:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004048:	68d9      	ldr	r1, [r3, #12]
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	ea40 0301 	orr.w	r3, r0, r1
 8004054:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	431a      	orrs	r2, r3
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	431a      	orrs	r2, r3
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004084:	f021 010c 	bic.w	r1, r1, #12
 8004088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004092:	430b      	orrs	r3, r1
 8004094:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	6999      	ldr	r1, [r3, #24]
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	ea40 0301 	orr.w	r3, r0, r1
 80040b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b8f      	ldr	r3, [pc, #572]	@ (80042f8 <UART_SetConfig+0x2cc>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	d005      	beq.n	80040cc <UART_SetConfig+0xa0>
 80040c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	4b8d      	ldr	r3, [pc, #564]	@ (80042fc <UART_SetConfig+0x2d0>)
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d104      	bne.n	80040d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040cc:	f7fd fee8 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 80040d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040d4:	e003      	b.n	80040de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040d6:	f7fd fecf 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 80040da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040e8:	f040 810c 	bne.w	8004304 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040f0:	2200      	movs	r2, #0
 80040f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040fe:	4622      	mov	r2, r4
 8004100:	462b      	mov	r3, r5
 8004102:	1891      	adds	r1, r2, r2
 8004104:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004106:	415b      	adcs	r3, r3
 8004108:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800410a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800410e:	4621      	mov	r1, r4
 8004110:	eb12 0801 	adds.w	r8, r2, r1
 8004114:	4629      	mov	r1, r5
 8004116:	eb43 0901 	adc.w	r9, r3, r1
 800411a:	f04f 0200 	mov.w	r2, #0
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004126:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800412a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800412e:	4690      	mov	r8, r2
 8004130:	4699      	mov	r9, r3
 8004132:	4623      	mov	r3, r4
 8004134:	eb18 0303 	adds.w	r3, r8, r3
 8004138:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800413c:	462b      	mov	r3, r5
 800413e:	eb49 0303 	adc.w	r3, r9, r3
 8004142:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004152:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004156:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800415a:	460b      	mov	r3, r1
 800415c:	18db      	adds	r3, r3, r3
 800415e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004160:	4613      	mov	r3, r2
 8004162:	eb42 0303 	adc.w	r3, r2, r3
 8004166:	657b      	str	r3, [r7, #84]	@ 0x54
 8004168:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800416c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004170:	f7fc f8a6 	bl	80002c0 <__aeabi_uldivmod>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4b61      	ldr	r3, [pc, #388]	@ (8004300 <UART_SetConfig+0x2d4>)
 800417a:	fba3 2302 	umull	r2, r3, r3, r2
 800417e:	095b      	lsrs	r3, r3, #5
 8004180:	011c      	lsls	r4, r3, #4
 8004182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004186:	2200      	movs	r2, #0
 8004188:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800418c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004190:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004194:	4642      	mov	r2, r8
 8004196:	464b      	mov	r3, r9
 8004198:	1891      	adds	r1, r2, r2
 800419a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800419c:	415b      	adcs	r3, r3
 800419e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80041a4:	4641      	mov	r1, r8
 80041a6:	eb12 0a01 	adds.w	sl, r2, r1
 80041aa:	4649      	mov	r1, r9
 80041ac:	eb43 0b01 	adc.w	fp, r3, r1
 80041b0:	f04f 0200 	mov.w	r2, #0
 80041b4:	f04f 0300 	mov.w	r3, #0
 80041b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c4:	4692      	mov	sl, r2
 80041c6:	469b      	mov	fp, r3
 80041c8:	4643      	mov	r3, r8
 80041ca:	eb1a 0303 	adds.w	r3, sl, r3
 80041ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041d2:	464b      	mov	r3, r9
 80041d4:	eb4b 0303 	adc.w	r3, fp, r3
 80041d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041f0:	460b      	mov	r3, r1
 80041f2:	18db      	adds	r3, r3, r3
 80041f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80041f6:	4613      	mov	r3, r2
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80041fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004202:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004206:	f7fc f85b 	bl	80002c0 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4611      	mov	r1, r2
 8004210:	4b3b      	ldr	r3, [pc, #236]	@ (8004300 <UART_SetConfig+0x2d4>)
 8004212:	fba3 2301 	umull	r2, r3, r3, r1
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2264      	movs	r2, #100	@ 0x64
 800421a:	fb02 f303 	mul.w	r3, r2, r3
 800421e:	1acb      	subs	r3, r1, r3
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004226:	4b36      	ldr	r3, [pc, #216]	@ (8004300 <UART_SetConfig+0x2d4>)
 8004228:	fba3 2302 	umull	r2, r3, r3, r2
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004234:	441c      	add	r4, r3
 8004236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800423a:	2200      	movs	r2, #0
 800423c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004240:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004244:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004248:	4642      	mov	r2, r8
 800424a:	464b      	mov	r3, r9
 800424c:	1891      	adds	r1, r2, r2
 800424e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004250:	415b      	adcs	r3, r3
 8004252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004254:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004258:	4641      	mov	r1, r8
 800425a:	1851      	adds	r1, r2, r1
 800425c:	6339      	str	r1, [r7, #48]	@ 0x30
 800425e:	4649      	mov	r1, r9
 8004260:	414b      	adcs	r3, r1
 8004262:	637b      	str	r3, [r7, #52]	@ 0x34
 8004264:	f04f 0200 	mov.w	r2, #0
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004270:	4659      	mov	r1, fp
 8004272:	00cb      	lsls	r3, r1, #3
 8004274:	4651      	mov	r1, sl
 8004276:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800427a:	4651      	mov	r1, sl
 800427c:	00ca      	lsls	r2, r1, #3
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	4603      	mov	r3, r0
 8004284:	4642      	mov	r2, r8
 8004286:	189b      	adds	r3, r3, r2
 8004288:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800428c:	464b      	mov	r3, r9
 800428e:	460a      	mov	r2, r1
 8004290:	eb42 0303 	adc.w	r3, r2, r3
 8004294:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80042a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80042a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80042ac:	460b      	mov	r3, r1
 80042ae:	18db      	adds	r3, r3, r3
 80042b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042b2:	4613      	mov	r3, r2
 80042b4:	eb42 0303 	adc.w	r3, r2, r3
 80042b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80042be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80042c2:	f7fb fffd 	bl	80002c0 <__aeabi_uldivmod>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <UART_SetConfig+0x2d4>)
 80042cc:	fba3 1302 	umull	r1, r3, r3, r2
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	2164      	movs	r1, #100	@ 0x64
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	3332      	adds	r3, #50	@ 0x32
 80042de:	4a08      	ldr	r2, [pc, #32]	@ (8004300 <UART_SetConfig+0x2d4>)
 80042e0:	fba2 2303 	umull	r2, r3, r2, r3
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	f003 0207 	and.w	r2, r3, #7
 80042ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4422      	add	r2, r4
 80042f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042f4:	e106      	b.n	8004504 <UART_SetConfig+0x4d8>
 80042f6:	bf00      	nop
 80042f8:	40011000 	.word	0x40011000
 80042fc:	40011400 	.word	0x40011400
 8004300:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004304:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004308:	2200      	movs	r2, #0
 800430a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800430e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004312:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004316:	4642      	mov	r2, r8
 8004318:	464b      	mov	r3, r9
 800431a:	1891      	adds	r1, r2, r2
 800431c:	6239      	str	r1, [r7, #32]
 800431e:	415b      	adcs	r3, r3
 8004320:	627b      	str	r3, [r7, #36]	@ 0x24
 8004322:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004326:	4641      	mov	r1, r8
 8004328:	1854      	adds	r4, r2, r1
 800432a:	4649      	mov	r1, r9
 800432c:	eb43 0501 	adc.w	r5, r3, r1
 8004330:	f04f 0200 	mov.w	r2, #0
 8004334:	f04f 0300 	mov.w	r3, #0
 8004338:	00eb      	lsls	r3, r5, #3
 800433a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800433e:	00e2      	lsls	r2, r4, #3
 8004340:	4614      	mov	r4, r2
 8004342:	461d      	mov	r5, r3
 8004344:	4643      	mov	r3, r8
 8004346:	18e3      	adds	r3, r4, r3
 8004348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800434c:	464b      	mov	r3, r9
 800434e:	eb45 0303 	adc.w	r3, r5, r3
 8004352:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004362:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004372:	4629      	mov	r1, r5
 8004374:	008b      	lsls	r3, r1, #2
 8004376:	4621      	mov	r1, r4
 8004378:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800437c:	4621      	mov	r1, r4
 800437e:	008a      	lsls	r2, r1, #2
 8004380:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004384:	f7fb ff9c 	bl	80002c0 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4b60      	ldr	r3, [pc, #384]	@ (8004510 <UART_SetConfig+0x4e4>)
 800438e:	fba3 2302 	umull	r2, r3, r3, r2
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	011c      	lsls	r4, r3, #4
 8004396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80043a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	61b9      	str	r1, [r7, #24]
 80043b0:	415b      	adcs	r3, r3
 80043b2:	61fb      	str	r3, [r7, #28]
 80043b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043b8:	4641      	mov	r1, r8
 80043ba:	1851      	adds	r1, r2, r1
 80043bc:	6139      	str	r1, [r7, #16]
 80043be:	4649      	mov	r1, r9
 80043c0:	414b      	adcs	r3, r1
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043d0:	4659      	mov	r1, fp
 80043d2:	00cb      	lsls	r3, r1, #3
 80043d4:	4651      	mov	r1, sl
 80043d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043da:	4651      	mov	r1, sl
 80043dc:	00ca      	lsls	r2, r1, #3
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	4603      	mov	r3, r0
 80043e4:	4642      	mov	r2, r8
 80043e6:	189b      	adds	r3, r3, r2
 80043e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043ec:	464b      	mov	r3, r9
 80043ee:	460a      	mov	r2, r1
 80043f0:	eb42 0303 	adc.w	r3, r2, r3
 80043f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004402:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004410:	4649      	mov	r1, r9
 8004412:	008b      	lsls	r3, r1, #2
 8004414:	4641      	mov	r1, r8
 8004416:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800441a:	4641      	mov	r1, r8
 800441c:	008a      	lsls	r2, r1, #2
 800441e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004422:	f7fb ff4d 	bl	80002c0 <__aeabi_uldivmod>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4611      	mov	r1, r2
 800442c:	4b38      	ldr	r3, [pc, #224]	@ (8004510 <UART_SetConfig+0x4e4>)
 800442e:	fba3 2301 	umull	r2, r3, r3, r1
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	2264      	movs	r2, #100	@ 0x64
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	1acb      	subs	r3, r1, r3
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	3332      	adds	r3, #50	@ 0x32
 8004440:	4a33      	ldr	r2, [pc, #204]	@ (8004510 <UART_SetConfig+0x4e4>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800444c:	441c      	add	r4, r3
 800444e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004452:	2200      	movs	r2, #0
 8004454:	673b      	str	r3, [r7, #112]	@ 0x70
 8004456:	677a      	str	r2, [r7, #116]	@ 0x74
 8004458:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	1891      	adds	r1, r2, r2
 8004462:	60b9      	str	r1, [r7, #8]
 8004464:	415b      	adcs	r3, r3
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800446c:	4641      	mov	r1, r8
 800446e:	1851      	adds	r1, r2, r1
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	4649      	mov	r1, r9
 8004474:	414b      	adcs	r3, r1
 8004476:	607b      	str	r3, [r7, #4]
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004484:	4659      	mov	r1, fp
 8004486:	00cb      	lsls	r3, r1, #3
 8004488:	4651      	mov	r1, sl
 800448a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800448e:	4651      	mov	r1, sl
 8004490:	00ca      	lsls	r2, r1, #3
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	4603      	mov	r3, r0
 8004498:	4642      	mov	r2, r8
 800449a:	189b      	adds	r3, r3, r2
 800449c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800449e:	464b      	mov	r3, r9
 80044a0:	460a      	mov	r2, r1
 80044a2:	eb42 0303 	adc.w	r3, r2, r3
 80044a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80044b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80044c0:	4649      	mov	r1, r9
 80044c2:	008b      	lsls	r3, r1, #2
 80044c4:	4641      	mov	r1, r8
 80044c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ca:	4641      	mov	r1, r8
 80044cc:	008a      	lsls	r2, r1, #2
 80044ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044d2:	f7fb fef5 	bl	80002c0 <__aeabi_uldivmod>
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <UART_SetConfig+0x4e4>)
 80044dc:	fba3 1302 	umull	r1, r3, r3, r2
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	2164      	movs	r1, #100	@ 0x64
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	3332      	adds	r3, #50	@ 0x32
 80044ee:	4a08      	ldr	r2, [pc, #32]	@ (8004510 <UART_SetConfig+0x4e4>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 020f 	and.w	r2, r3, #15
 80044fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4422      	add	r2, r4
 8004502:	609a      	str	r2, [r3, #8]
}
 8004504:	bf00      	nop
 8004506:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800450a:	46bd      	mov	sp, r7
 800450c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004510:	51eb851f 	.word	0x51eb851f

08004514 <siprintf>:
 8004514:	b40e      	push	{r1, r2, r3}
 8004516:	b510      	push	{r4, lr}
 8004518:	b09d      	sub	sp, #116	@ 0x74
 800451a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800451c:	9002      	str	r0, [sp, #8]
 800451e:	9006      	str	r0, [sp, #24]
 8004520:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004524:	480a      	ldr	r0, [pc, #40]	@ (8004550 <siprintf+0x3c>)
 8004526:	9107      	str	r1, [sp, #28]
 8004528:	9104      	str	r1, [sp, #16]
 800452a:	490a      	ldr	r1, [pc, #40]	@ (8004554 <siprintf+0x40>)
 800452c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004530:	9105      	str	r1, [sp, #20]
 8004532:	2400      	movs	r4, #0
 8004534:	a902      	add	r1, sp, #8
 8004536:	6800      	ldr	r0, [r0, #0]
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800453c:	f000 f9a2 	bl	8004884 <_svfiprintf_r>
 8004540:	9b02      	ldr	r3, [sp, #8]
 8004542:	701c      	strb	r4, [r3, #0]
 8004544:	b01d      	add	sp, #116	@ 0x74
 8004546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800454a:	b003      	add	sp, #12
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	2000000c 	.word	0x2000000c
 8004554:	ffff0208 	.word	0xffff0208

08004558 <memset>:
 8004558:	4402      	add	r2, r0
 800455a:	4603      	mov	r3, r0
 800455c:	4293      	cmp	r3, r2
 800455e:	d100      	bne.n	8004562 <memset+0xa>
 8004560:	4770      	bx	lr
 8004562:	f803 1b01 	strb.w	r1, [r3], #1
 8004566:	e7f9      	b.n	800455c <memset+0x4>

08004568 <__errno>:
 8004568:	4b01      	ldr	r3, [pc, #4]	@ (8004570 <__errno+0x8>)
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	2000000c 	.word	0x2000000c

08004574 <__libc_init_array>:
 8004574:	b570      	push	{r4, r5, r6, lr}
 8004576:	4d0d      	ldr	r5, [pc, #52]	@ (80045ac <__libc_init_array+0x38>)
 8004578:	4c0d      	ldr	r4, [pc, #52]	@ (80045b0 <__libc_init_array+0x3c>)
 800457a:	1b64      	subs	r4, r4, r5
 800457c:	10a4      	asrs	r4, r4, #2
 800457e:	2600      	movs	r6, #0
 8004580:	42a6      	cmp	r6, r4
 8004582:	d109      	bne.n	8004598 <__libc_init_array+0x24>
 8004584:	4d0b      	ldr	r5, [pc, #44]	@ (80045b4 <__libc_init_array+0x40>)
 8004586:	4c0c      	ldr	r4, [pc, #48]	@ (80045b8 <__libc_init_array+0x44>)
 8004588:	f000 fc64 	bl	8004e54 <_init>
 800458c:	1b64      	subs	r4, r4, r5
 800458e:	10a4      	asrs	r4, r4, #2
 8004590:	2600      	movs	r6, #0
 8004592:	42a6      	cmp	r6, r4
 8004594:	d105      	bne.n	80045a2 <__libc_init_array+0x2e>
 8004596:	bd70      	pop	{r4, r5, r6, pc}
 8004598:	f855 3b04 	ldr.w	r3, [r5], #4
 800459c:	4798      	blx	r3
 800459e:	3601      	adds	r6, #1
 80045a0:	e7ee      	b.n	8004580 <__libc_init_array+0xc>
 80045a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a6:	4798      	blx	r3
 80045a8:	3601      	adds	r6, #1
 80045aa:	e7f2      	b.n	8004592 <__libc_init_array+0x1e>
 80045ac:	080054b8 	.word	0x080054b8
 80045b0:	080054b8 	.word	0x080054b8
 80045b4:	080054b8 	.word	0x080054b8
 80045b8:	080054bc 	.word	0x080054bc

080045bc <__retarget_lock_acquire_recursive>:
 80045bc:	4770      	bx	lr

080045be <__retarget_lock_release_recursive>:
 80045be:	4770      	bx	lr

080045c0 <memcpy>:
 80045c0:	440a      	add	r2, r1
 80045c2:	4291      	cmp	r1, r2
 80045c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045c8:	d100      	bne.n	80045cc <memcpy+0xc>
 80045ca:	4770      	bx	lr
 80045cc:	b510      	push	{r4, lr}
 80045ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045d6:	4291      	cmp	r1, r2
 80045d8:	d1f9      	bne.n	80045ce <memcpy+0xe>
 80045da:	bd10      	pop	{r4, pc}

080045dc <_free_r>:
 80045dc:	b538      	push	{r3, r4, r5, lr}
 80045de:	4605      	mov	r5, r0
 80045e0:	2900      	cmp	r1, #0
 80045e2:	d041      	beq.n	8004668 <_free_r+0x8c>
 80045e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e8:	1f0c      	subs	r4, r1, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bfb8      	it	lt
 80045ee:	18e4      	addlt	r4, r4, r3
 80045f0:	f000 f8e0 	bl	80047b4 <__malloc_lock>
 80045f4:	4a1d      	ldr	r2, [pc, #116]	@ (800466c <_free_r+0x90>)
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	b933      	cbnz	r3, 8004608 <_free_r+0x2c>
 80045fa:	6063      	str	r3, [r4, #4]
 80045fc:	6014      	str	r4, [r2, #0]
 80045fe:	4628      	mov	r0, r5
 8004600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004604:	f000 b8dc 	b.w	80047c0 <__malloc_unlock>
 8004608:	42a3      	cmp	r3, r4
 800460a:	d908      	bls.n	800461e <_free_r+0x42>
 800460c:	6820      	ldr	r0, [r4, #0]
 800460e:	1821      	adds	r1, r4, r0
 8004610:	428b      	cmp	r3, r1
 8004612:	bf01      	itttt	eq
 8004614:	6819      	ldreq	r1, [r3, #0]
 8004616:	685b      	ldreq	r3, [r3, #4]
 8004618:	1809      	addeq	r1, r1, r0
 800461a:	6021      	streq	r1, [r4, #0]
 800461c:	e7ed      	b.n	80045fa <_free_r+0x1e>
 800461e:	461a      	mov	r2, r3
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	b10b      	cbz	r3, 8004628 <_free_r+0x4c>
 8004624:	42a3      	cmp	r3, r4
 8004626:	d9fa      	bls.n	800461e <_free_r+0x42>
 8004628:	6811      	ldr	r1, [r2, #0]
 800462a:	1850      	adds	r0, r2, r1
 800462c:	42a0      	cmp	r0, r4
 800462e:	d10b      	bne.n	8004648 <_free_r+0x6c>
 8004630:	6820      	ldr	r0, [r4, #0]
 8004632:	4401      	add	r1, r0
 8004634:	1850      	adds	r0, r2, r1
 8004636:	4283      	cmp	r3, r0
 8004638:	6011      	str	r1, [r2, #0]
 800463a:	d1e0      	bne.n	80045fe <_free_r+0x22>
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	6053      	str	r3, [r2, #4]
 8004642:	4408      	add	r0, r1
 8004644:	6010      	str	r0, [r2, #0]
 8004646:	e7da      	b.n	80045fe <_free_r+0x22>
 8004648:	d902      	bls.n	8004650 <_free_r+0x74>
 800464a:	230c      	movs	r3, #12
 800464c:	602b      	str	r3, [r5, #0]
 800464e:	e7d6      	b.n	80045fe <_free_r+0x22>
 8004650:	6820      	ldr	r0, [r4, #0]
 8004652:	1821      	adds	r1, r4, r0
 8004654:	428b      	cmp	r3, r1
 8004656:	bf04      	itt	eq
 8004658:	6819      	ldreq	r1, [r3, #0]
 800465a:	685b      	ldreq	r3, [r3, #4]
 800465c:	6063      	str	r3, [r4, #4]
 800465e:	bf04      	itt	eq
 8004660:	1809      	addeq	r1, r1, r0
 8004662:	6021      	streq	r1, [r4, #0]
 8004664:	6054      	str	r4, [r2, #4]
 8004666:	e7ca      	b.n	80045fe <_free_r+0x22>
 8004668:	bd38      	pop	{r3, r4, r5, pc}
 800466a:	bf00      	nop
 800466c:	200002d0 	.word	0x200002d0

08004670 <sbrk_aligned>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	4e0f      	ldr	r6, [pc, #60]	@ (80046b0 <sbrk_aligned+0x40>)
 8004674:	460c      	mov	r4, r1
 8004676:	6831      	ldr	r1, [r6, #0]
 8004678:	4605      	mov	r5, r0
 800467a:	b911      	cbnz	r1, 8004682 <sbrk_aligned+0x12>
 800467c:	f000 fba4 	bl	8004dc8 <_sbrk_r>
 8004680:	6030      	str	r0, [r6, #0]
 8004682:	4621      	mov	r1, r4
 8004684:	4628      	mov	r0, r5
 8004686:	f000 fb9f 	bl	8004dc8 <_sbrk_r>
 800468a:	1c43      	adds	r3, r0, #1
 800468c:	d103      	bne.n	8004696 <sbrk_aligned+0x26>
 800468e:	f04f 34ff 	mov.w	r4, #4294967295
 8004692:	4620      	mov	r0, r4
 8004694:	bd70      	pop	{r4, r5, r6, pc}
 8004696:	1cc4      	adds	r4, r0, #3
 8004698:	f024 0403 	bic.w	r4, r4, #3
 800469c:	42a0      	cmp	r0, r4
 800469e:	d0f8      	beq.n	8004692 <sbrk_aligned+0x22>
 80046a0:	1a21      	subs	r1, r4, r0
 80046a2:	4628      	mov	r0, r5
 80046a4:	f000 fb90 	bl	8004dc8 <_sbrk_r>
 80046a8:	3001      	adds	r0, #1
 80046aa:	d1f2      	bne.n	8004692 <sbrk_aligned+0x22>
 80046ac:	e7ef      	b.n	800468e <sbrk_aligned+0x1e>
 80046ae:	bf00      	nop
 80046b0:	200002cc 	.word	0x200002cc

080046b4 <_malloc_r>:
 80046b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046b8:	1ccd      	adds	r5, r1, #3
 80046ba:	f025 0503 	bic.w	r5, r5, #3
 80046be:	3508      	adds	r5, #8
 80046c0:	2d0c      	cmp	r5, #12
 80046c2:	bf38      	it	cc
 80046c4:	250c      	movcc	r5, #12
 80046c6:	2d00      	cmp	r5, #0
 80046c8:	4606      	mov	r6, r0
 80046ca:	db01      	blt.n	80046d0 <_malloc_r+0x1c>
 80046cc:	42a9      	cmp	r1, r5
 80046ce:	d904      	bls.n	80046da <_malloc_r+0x26>
 80046d0:	230c      	movs	r3, #12
 80046d2:	6033      	str	r3, [r6, #0]
 80046d4:	2000      	movs	r0, #0
 80046d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80047b0 <_malloc_r+0xfc>
 80046de:	f000 f869 	bl	80047b4 <__malloc_lock>
 80046e2:	f8d8 3000 	ldr.w	r3, [r8]
 80046e6:	461c      	mov	r4, r3
 80046e8:	bb44      	cbnz	r4, 800473c <_malloc_r+0x88>
 80046ea:	4629      	mov	r1, r5
 80046ec:	4630      	mov	r0, r6
 80046ee:	f7ff ffbf 	bl	8004670 <sbrk_aligned>
 80046f2:	1c43      	adds	r3, r0, #1
 80046f4:	4604      	mov	r4, r0
 80046f6:	d158      	bne.n	80047aa <_malloc_r+0xf6>
 80046f8:	f8d8 4000 	ldr.w	r4, [r8]
 80046fc:	4627      	mov	r7, r4
 80046fe:	2f00      	cmp	r7, #0
 8004700:	d143      	bne.n	800478a <_malloc_r+0xd6>
 8004702:	2c00      	cmp	r4, #0
 8004704:	d04b      	beq.n	800479e <_malloc_r+0xea>
 8004706:	6823      	ldr	r3, [r4, #0]
 8004708:	4639      	mov	r1, r7
 800470a:	4630      	mov	r0, r6
 800470c:	eb04 0903 	add.w	r9, r4, r3
 8004710:	f000 fb5a 	bl	8004dc8 <_sbrk_r>
 8004714:	4581      	cmp	r9, r0
 8004716:	d142      	bne.n	800479e <_malloc_r+0xea>
 8004718:	6821      	ldr	r1, [r4, #0]
 800471a:	1a6d      	subs	r5, r5, r1
 800471c:	4629      	mov	r1, r5
 800471e:	4630      	mov	r0, r6
 8004720:	f7ff ffa6 	bl	8004670 <sbrk_aligned>
 8004724:	3001      	adds	r0, #1
 8004726:	d03a      	beq.n	800479e <_malloc_r+0xea>
 8004728:	6823      	ldr	r3, [r4, #0]
 800472a:	442b      	add	r3, r5
 800472c:	6023      	str	r3, [r4, #0]
 800472e:	f8d8 3000 	ldr.w	r3, [r8]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	bb62      	cbnz	r2, 8004790 <_malloc_r+0xdc>
 8004736:	f8c8 7000 	str.w	r7, [r8]
 800473a:	e00f      	b.n	800475c <_malloc_r+0xa8>
 800473c:	6822      	ldr	r2, [r4, #0]
 800473e:	1b52      	subs	r2, r2, r5
 8004740:	d420      	bmi.n	8004784 <_malloc_r+0xd0>
 8004742:	2a0b      	cmp	r2, #11
 8004744:	d917      	bls.n	8004776 <_malloc_r+0xc2>
 8004746:	1961      	adds	r1, r4, r5
 8004748:	42a3      	cmp	r3, r4
 800474a:	6025      	str	r5, [r4, #0]
 800474c:	bf18      	it	ne
 800474e:	6059      	strne	r1, [r3, #4]
 8004750:	6863      	ldr	r3, [r4, #4]
 8004752:	bf08      	it	eq
 8004754:	f8c8 1000 	streq.w	r1, [r8]
 8004758:	5162      	str	r2, [r4, r5]
 800475a:	604b      	str	r3, [r1, #4]
 800475c:	4630      	mov	r0, r6
 800475e:	f000 f82f 	bl	80047c0 <__malloc_unlock>
 8004762:	f104 000b 	add.w	r0, r4, #11
 8004766:	1d23      	adds	r3, r4, #4
 8004768:	f020 0007 	bic.w	r0, r0, #7
 800476c:	1ac2      	subs	r2, r0, r3
 800476e:	bf1c      	itt	ne
 8004770:	1a1b      	subne	r3, r3, r0
 8004772:	50a3      	strne	r3, [r4, r2]
 8004774:	e7af      	b.n	80046d6 <_malloc_r+0x22>
 8004776:	6862      	ldr	r2, [r4, #4]
 8004778:	42a3      	cmp	r3, r4
 800477a:	bf0c      	ite	eq
 800477c:	f8c8 2000 	streq.w	r2, [r8]
 8004780:	605a      	strne	r2, [r3, #4]
 8004782:	e7eb      	b.n	800475c <_malloc_r+0xa8>
 8004784:	4623      	mov	r3, r4
 8004786:	6864      	ldr	r4, [r4, #4]
 8004788:	e7ae      	b.n	80046e8 <_malloc_r+0x34>
 800478a:	463c      	mov	r4, r7
 800478c:	687f      	ldr	r7, [r7, #4]
 800478e:	e7b6      	b.n	80046fe <_malloc_r+0x4a>
 8004790:	461a      	mov	r2, r3
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	42a3      	cmp	r3, r4
 8004796:	d1fb      	bne.n	8004790 <_malloc_r+0xdc>
 8004798:	2300      	movs	r3, #0
 800479a:	6053      	str	r3, [r2, #4]
 800479c:	e7de      	b.n	800475c <_malloc_r+0xa8>
 800479e:	230c      	movs	r3, #12
 80047a0:	6033      	str	r3, [r6, #0]
 80047a2:	4630      	mov	r0, r6
 80047a4:	f000 f80c 	bl	80047c0 <__malloc_unlock>
 80047a8:	e794      	b.n	80046d4 <_malloc_r+0x20>
 80047aa:	6005      	str	r5, [r0, #0]
 80047ac:	e7d6      	b.n	800475c <_malloc_r+0xa8>
 80047ae:	bf00      	nop
 80047b0:	200002d0 	.word	0x200002d0

080047b4 <__malloc_lock>:
 80047b4:	4801      	ldr	r0, [pc, #4]	@ (80047bc <__malloc_lock+0x8>)
 80047b6:	f7ff bf01 	b.w	80045bc <__retarget_lock_acquire_recursive>
 80047ba:	bf00      	nop
 80047bc:	200002c8 	.word	0x200002c8

080047c0 <__malloc_unlock>:
 80047c0:	4801      	ldr	r0, [pc, #4]	@ (80047c8 <__malloc_unlock+0x8>)
 80047c2:	f7ff befc 	b.w	80045be <__retarget_lock_release_recursive>
 80047c6:	bf00      	nop
 80047c8:	200002c8 	.word	0x200002c8

080047cc <__ssputs_r>:
 80047cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047d0:	688e      	ldr	r6, [r1, #8]
 80047d2:	461f      	mov	r7, r3
 80047d4:	42be      	cmp	r6, r7
 80047d6:	680b      	ldr	r3, [r1, #0]
 80047d8:	4682      	mov	sl, r0
 80047da:	460c      	mov	r4, r1
 80047dc:	4690      	mov	r8, r2
 80047de:	d82d      	bhi.n	800483c <__ssputs_r+0x70>
 80047e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80047e8:	d026      	beq.n	8004838 <__ssputs_r+0x6c>
 80047ea:	6965      	ldr	r5, [r4, #20]
 80047ec:	6909      	ldr	r1, [r1, #16]
 80047ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047f2:	eba3 0901 	sub.w	r9, r3, r1
 80047f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047fa:	1c7b      	adds	r3, r7, #1
 80047fc:	444b      	add	r3, r9
 80047fe:	106d      	asrs	r5, r5, #1
 8004800:	429d      	cmp	r5, r3
 8004802:	bf38      	it	cc
 8004804:	461d      	movcc	r5, r3
 8004806:	0553      	lsls	r3, r2, #21
 8004808:	d527      	bpl.n	800485a <__ssputs_r+0x8e>
 800480a:	4629      	mov	r1, r5
 800480c:	f7ff ff52 	bl	80046b4 <_malloc_r>
 8004810:	4606      	mov	r6, r0
 8004812:	b360      	cbz	r0, 800486e <__ssputs_r+0xa2>
 8004814:	6921      	ldr	r1, [r4, #16]
 8004816:	464a      	mov	r2, r9
 8004818:	f7ff fed2 	bl	80045c0 <memcpy>
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004826:	81a3      	strh	r3, [r4, #12]
 8004828:	6126      	str	r6, [r4, #16]
 800482a:	6165      	str	r5, [r4, #20]
 800482c:	444e      	add	r6, r9
 800482e:	eba5 0509 	sub.w	r5, r5, r9
 8004832:	6026      	str	r6, [r4, #0]
 8004834:	60a5      	str	r5, [r4, #8]
 8004836:	463e      	mov	r6, r7
 8004838:	42be      	cmp	r6, r7
 800483a:	d900      	bls.n	800483e <__ssputs_r+0x72>
 800483c:	463e      	mov	r6, r7
 800483e:	6820      	ldr	r0, [r4, #0]
 8004840:	4632      	mov	r2, r6
 8004842:	4641      	mov	r1, r8
 8004844:	f000 faa6 	bl	8004d94 <memmove>
 8004848:	68a3      	ldr	r3, [r4, #8]
 800484a:	1b9b      	subs	r3, r3, r6
 800484c:	60a3      	str	r3, [r4, #8]
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	4433      	add	r3, r6
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	2000      	movs	r0, #0
 8004856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485a:	462a      	mov	r2, r5
 800485c:	f000 fac4 	bl	8004de8 <_realloc_r>
 8004860:	4606      	mov	r6, r0
 8004862:	2800      	cmp	r0, #0
 8004864:	d1e0      	bne.n	8004828 <__ssputs_r+0x5c>
 8004866:	6921      	ldr	r1, [r4, #16]
 8004868:	4650      	mov	r0, sl
 800486a:	f7ff feb7 	bl	80045dc <_free_r>
 800486e:	230c      	movs	r3, #12
 8004870:	f8ca 3000 	str.w	r3, [sl]
 8004874:	89a3      	ldrh	r3, [r4, #12]
 8004876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800487a:	81a3      	strh	r3, [r4, #12]
 800487c:	f04f 30ff 	mov.w	r0, #4294967295
 8004880:	e7e9      	b.n	8004856 <__ssputs_r+0x8a>
	...

08004884 <_svfiprintf_r>:
 8004884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004888:	4698      	mov	r8, r3
 800488a:	898b      	ldrh	r3, [r1, #12]
 800488c:	061b      	lsls	r3, r3, #24
 800488e:	b09d      	sub	sp, #116	@ 0x74
 8004890:	4607      	mov	r7, r0
 8004892:	460d      	mov	r5, r1
 8004894:	4614      	mov	r4, r2
 8004896:	d510      	bpl.n	80048ba <_svfiprintf_r+0x36>
 8004898:	690b      	ldr	r3, [r1, #16]
 800489a:	b973      	cbnz	r3, 80048ba <_svfiprintf_r+0x36>
 800489c:	2140      	movs	r1, #64	@ 0x40
 800489e:	f7ff ff09 	bl	80046b4 <_malloc_r>
 80048a2:	6028      	str	r0, [r5, #0]
 80048a4:	6128      	str	r0, [r5, #16]
 80048a6:	b930      	cbnz	r0, 80048b6 <_svfiprintf_r+0x32>
 80048a8:	230c      	movs	r3, #12
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	b01d      	add	sp, #116	@ 0x74
 80048b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b6:	2340      	movs	r3, #64	@ 0x40
 80048b8:	616b      	str	r3, [r5, #20]
 80048ba:	2300      	movs	r3, #0
 80048bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80048be:	2320      	movs	r3, #32
 80048c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80048c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80048c8:	2330      	movs	r3, #48	@ 0x30
 80048ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a68 <_svfiprintf_r+0x1e4>
 80048ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80048d2:	f04f 0901 	mov.w	r9, #1
 80048d6:	4623      	mov	r3, r4
 80048d8:	469a      	mov	sl, r3
 80048da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048de:	b10a      	cbz	r2, 80048e4 <_svfiprintf_r+0x60>
 80048e0:	2a25      	cmp	r2, #37	@ 0x25
 80048e2:	d1f9      	bne.n	80048d8 <_svfiprintf_r+0x54>
 80048e4:	ebba 0b04 	subs.w	fp, sl, r4
 80048e8:	d00b      	beq.n	8004902 <_svfiprintf_r+0x7e>
 80048ea:	465b      	mov	r3, fp
 80048ec:	4622      	mov	r2, r4
 80048ee:	4629      	mov	r1, r5
 80048f0:	4638      	mov	r0, r7
 80048f2:	f7ff ff6b 	bl	80047cc <__ssputs_r>
 80048f6:	3001      	adds	r0, #1
 80048f8:	f000 80a7 	beq.w	8004a4a <_svfiprintf_r+0x1c6>
 80048fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048fe:	445a      	add	r2, fp
 8004900:	9209      	str	r2, [sp, #36]	@ 0x24
 8004902:	f89a 3000 	ldrb.w	r3, [sl]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 809f 	beq.w	8004a4a <_svfiprintf_r+0x1c6>
 800490c:	2300      	movs	r3, #0
 800490e:	f04f 32ff 	mov.w	r2, #4294967295
 8004912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004916:	f10a 0a01 	add.w	sl, sl, #1
 800491a:	9304      	str	r3, [sp, #16]
 800491c:	9307      	str	r3, [sp, #28]
 800491e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004922:	931a      	str	r3, [sp, #104]	@ 0x68
 8004924:	4654      	mov	r4, sl
 8004926:	2205      	movs	r2, #5
 8004928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800492c:	484e      	ldr	r0, [pc, #312]	@ (8004a68 <_svfiprintf_r+0x1e4>)
 800492e:	f7fb fc77 	bl	8000220 <memchr>
 8004932:	9a04      	ldr	r2, [sp, #16]
 8004934:	b9d8      	cbnz	r0, 800496e <_svfiprintf_r+0xea>
 8004936:	06d0      	lsls	r0, r2, #27
 8004938:	bf44      	itt	mi
 800493a:	2320      	movmi	r3, #32
 800493c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004940:	0711      	lsls	r1, r2, #28
 8004942:	bf44      	itt	mi
 8004944:	232b      	movmi	r3, #43	@ 0x2b
 8004946:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800494a:	f89a 3000 	ldrb.w	r3, [sl]
 800494e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004950:	d015      	beq.n	800497e <_svfiprintf_r+0xfa>
 8004952:	9a07      	ldr	r2, [sp, #28]
 8004954:	4654      	mov	r4, sl
 8004956:	2000      	movs	r0, #0
 8004958:	f04f 0c0a 	mov.w	ip, #10
 800495c:	4621      	mov	r1, r4
 800495e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004962:	3b30      	subs	r3, #48	@ 0x30
 8004964:	2b09      	cmp	r3, #9
 8004966:	d94b      	bls.n	8004a00 <_svfiprintf_r+0x17c>
 8004968:	b1b0      	cbz	r0, 8004998 <_svfiprintf_r+0x114>
 800496a:	9207      	str	r2, [sp, #28]
 800496c:	e014      	b.n	8004998 <_svfiprintf_r+0x114>
 800496e:	eba0 0308 	sub.w	r3, r0, r8
 8004972:	fa09 f303 	lsl.w	r3, r9, r3
 8004976:	4313      	orrs	r3, r2
 8004978:	9304      	str	r3, [sp, #16]
 800497a:	46a2      	mov	sl, r4
 800497c:	e7d2      	b.n	8004924 <_svfiprintf_r+0xa0>
 800497e:	9b03      	ldr	r3, [sp, #12]
 8004980:	1d19      	adds	r1, r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	9103      	str	r1, [sp, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	bfbb      	ittet	lt
 800498a:	425b      	neglt	r3, r3
 800498c:	f042 0202 	orrlt.w	r2, r2, #2
 8004990:	9307      	strge	r3, [sp, #28]
 8004992:	9307      	strlt	r3, [sp, #28]
 8004994:	bfb8      	it	lt
 8004996:	9204      	strlt	r2, [sp, #16]
 8004998:	7823      	ldrb	r3, [r4, #0]
 800499a:	2b2e      	cmp	r3, #46	@ 0x2e
 800499c:	d10a      	bne.n	80049b4 <_svfiprintf_r+0x130>
 800499e:	7863      	ldrb	r3, [r4, #1]
 80049a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a2:	d132      	bne.n	8004a0a <_svfiprintf_r+0x186>
 80049a4:	9b03      	ldr	r3, [sp, #12]
 80049a6:	1d1a      	adds	r2, r3, #4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	9203      	str	r2, [sp, #12]
 80049ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80049b0:	3402      	adds	r4, #2
 80049b2:	9305      	str	r3, [sp, #20]
 80049b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a78 <_svfiprintf_r+0x1f4>
 80049b8:	7821      	ldrb	r1, [r4, #0]
 80049ba:	2203      	movs	r2, #3
 80049bc:	4650      	mov	r0, sl
 80049be:	f7fb fc2f 	bl	8000220 <memchr>
 80049c2:	b138      	cbz	r0, 80049d4 <_svfiprintf_r+0x150>
 80049c4:	9b04      	ldr	r3, [sp, #16]
 80049c6:	eba0 000a 	sub.w	r0, r0, sl
 80049ca:	2240      	movs	r2, #64	@ 0x40
 80049cc:	4082      	lsls	r2, r0
 80049ce:	4313      	orrs	r3, r2
 80049d0:	3401      	adds	r4, #1
 80049d2:	9304      	str	r3, [sp, #16]
 80049d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049d8:	4824      	ldr	r0, [pc, #144]	@ (8004a6c <_svfiprintf_r+0x1e8>)
 80049da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80049de:	2206      	movs	r2, #6
 80049e0:	f7fb fc1e 	bl	8000220 <memchr>
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d036      	beq.n	8004a56 <_svfiprintf_r+0x1d2>
 80049e8:	4b21      	ldr	r3, [pc, #132]	@ (8004a70 <_svfiprintf_r+0x1ec>)
 80049ea:	bb1b      	cbnz	r3, 8004a34 <_svfiprintf_r+0x1b0>
 80049ec:	9b03      	ldr	r3, [sp, #12]
 80049ee:	3307      	adds	r3, #7
 80049f0:	f023 0307 	bic.w	r3, r3, #7
 80049f4:	3308      	adds	r3, #8
 80049f6:	9303      	str	r3, [sp, #12]
 80049f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049fa:	4433      	add	r3, r6
 80049fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80049fe:	e76a      	b.n	80048d6 <_svfiprintf_r+0x52>
 8004a00:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a04:	460c      	mov	r4, r1
 8004a06:	2001      	movs	r0, #1
 8004a08:	e7a8      	b.n	800495c <_svfiprintf_r+0xd8>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	3401      	adds	r4, #1
 8004a0e:	9305      	str	r3, [sp, #20]
 8004a10:	4619      	mov	r1, r3
 8004a12:	f04f 0c0a 	mov.w	ip, #10
 8004a16:	4620      	mov	r0, r4
 8004a18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a1c:	3a30      	subs	r2, #48	@ 0x30
 8004a1e:	2a09      	cmp	r2, #9
 8004a20:	d903      	bls.n	8004a2a <_svfiprintf_r+0x1a6>
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d0c6      	beq.n	80049b4 <_svfiprintf_r+0x130>
 8004a26:	9105      	str	r1, [sp, #20]
 8004a28:	e7c4      	b.n	80049b4 <_svfiprintf_r+0x130>
 8004a2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a2e:	4604      	mov	r4, r0
 8004a30:	2301      	movs	r3, #1
 8004a32:	e7f0      	b.n	8004a16 <_svfiprintf_r+0x192>
 8004a34:	ab03      	add	r3, sp, #12
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	462a      	mov	r2, r5
 8004a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a74 <_svfiprintf_r+0x1f0>)
 8004a3c:	a904      	add	r1, sp, #16
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f3af 8000 	nop.w
 8004a44:	1c42      	adds	r2, r0, #1
 8004a46:	4606      	mov	r6, r0
 8004a48:	d1d6      	bne.n	80049f8 <_svfiprintf_r+0x174>
 8004a4a:	89ab      	ldrh	r3, [r5, #12]
 8004a4c:	065b      	lsls	r3, r3, #25
 8004a4e:	f53f af2d 	bmi.w	80048ac <_svfiprintf_r+0x28>
 8004a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a54:	e72c      	b.n	80048b0 <_svfiprintf_r+0x2c>
 8004a56:	ab03      	add	r3, sp, #12
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	462a      	mov	r2, r5
 8004a5c:	4b05      	ldr	r3, [pc, #20]	@ (8004a74 <_svfiprintf_r+0x1f0>)
 8004a5e:	a904      	add	r1, sp, #16
 8004a60:	4638      	mov	r0, r7
 8004a62:	f000 f879 	bl	8004b58 <_printf_i>
 8004a66:	e7ed      	b.n	8004a44 <_svfiprintf_r+0x1c0>
 8004a68:	0800547c 	.word	0x0800547c
 8004a6c:	08005486 	.word	0x08005486
 8004a70:	00000000 	.word	0x00000000
 8004a74:	080047cd 	.word	0x080047cd
 8004a78:	08005482 	.word	0x08005482

08004a7c <_printf_common>:
 8004a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	4616      	mov	r6, r2
 8004a82:	4698      	mov	r8, r3
 8004a84:	688a      	ldr	r2, [r1, #8]
 8004a86:	690b      	ldr	r3, [r1, #16]
 8004a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	bfb8      	it	lt
 8004a90:	4613      	movlt	r3, r2
 8004a92:	6033      	str	r3, [r6, #0]
 8004a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a98:	4607      	mov	r7, r0
 8004a9a:	460c      	mov	r4, r1
 8004a9c:	b10a      	cbz	r2, 8004aa2 <_printf_common+0x26>
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	6033      	str	r3, [r6, #0]
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	0699      	lsls	r1, r3, #26
 8004aa6:	bf42      	ittt	mi
 8004aa8:	6833      	ldrmi	r3, [r6, #0]
 8004aaa:	3302      	addmi	r3, #2
 8004aac:	6033      	strmi	r3, [r6, #0]
 8004aae:	6825      	ldr	r5, [r4, #0]
 8004ab0:	f015 0506 	ands.w	r5, r5, #6
 8004ab4:	d106      	bne.n	8004ac4 <_printf_common+0x48>
 8004ab6:	f104 0a19 	add.w	sl, r4, #25
 8004aba:	68e3      	ldr	r3, [r4, #12]
 8004abc:	6832      	ldr	r2, [r6, #0]
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	42ab      	cmp	r3, r5
 8004ac2:	dc26      	bgt.n	8004b12 <_printf_common+0x96>
 8004ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ac8:	6822      	ldr	r2, [r4, #0]
 8004aca:	3b00      	subs	r3, #0
 8004acc:	bf18      	it	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	0692      	lsls	r2, r2, #26
 8004ad2:	d42b      	bmi.n	8004b2c <_printf_common+0xb0>
 8004ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ad8:	4641      	mov	r1, r8
 8004ada:	4638      	mov	r0, r7
 8004adc:	47c8      	blx	r9
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d01e      	beq.n	8004b20 <_printf_common+0xa4>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	6922      	ldr	r2, [r4, #16]
 8004ae6:	f003 0306 	and.w	r3, r3, #6
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	bf02      	ittt	eq
 8004aee:	68e5      	ldreq	r5, [r4, #12]
 8004af0:	6833      	ldreq	r3, [r6, #0]
 8004af2:	1aed      	subeq	r5, r5, r3
 8004af4:	68a3      	ldr	r3, [r4, #8]
 8004af6:	bf0c      	ite	eq
 8004af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004afc:	2500      	movne	r5, #0
 8004afe:	4293      	cmp	r3, r2
 8004b00:	bfc4      	itt	gt
 8004b02:	1a9b      	subgt	r3, r3, r2
 8004b04:	18ed      	addgt	r5, r5, r3
 8004b06:	2600      	movs	r6, #0
 8004b08:	341a      	adds	r4, #26
 8004b0a:	42b5      	cmp	r5, r6
 8004b0c:	d11a      	bne.n	8004b44 <_printf_common+0xc8>
 8004b0e:	2000      	movs	r0, #0
 8004b10:	e008      	b.n	8004b24 <_printf_common+0xa8>
 8004b12:	2301      	movs	r3, #1
 8004b14:	4652      	mov	r2, sl
 8004b16:	4641      	mov	r1, r8
 8004b18:	4638      	mov	r0, r7
 8004b1a:	47c8      	blx	r9
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d103      	bne.n	8004b28 <_printf_common+0xac>
 8004b20:	f04f 30ff 	mov.w	r0, #4294967295
 8004b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b28:	3501      	adds	r5, #1
 8004b2a:	e7c6      	b.n	8004aba <_printf_common+0x3e>
 8004b2c:	18e1      	adds	r1, r4, r3
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	2030      	movs	r0, #48	@ 0x30
 8004b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b36:	4422      	add	r2, r4
 8004b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b40:	3302      	adds	r3, #2
 8004b42:	e7c7      	b.n	8004ad4 <_printf_common+0x58>
 8004b44:	2301      	movs	r3, #1
 8004b46:	4622      	mov	r2, r4
 8004b48:	4641      	mov	r1, r8
 8004b4a:	4638      	mov	r0, r7
 8004b4c:	47c8      	blx	r9
 8004b4e:	3001      	adds	r0, #1
 8004b50:	d0e6      	beq.n	8004b20 <_printf_common+0xa4>
 8004b52:	3601      	adds	r6, #1
 8004b54:	e7d9      	b.n	8004b0a <_printf_common+0x8e>
	...

08004b58 <_printf_i>:
 8004b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5c:	7e0f      	ldrb	r7, [r1, #24]
 8004b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b60:	2f78      	cmp	r7, #120	@ 0x78
 8004b62:	4691      	mov	r9, r2
 8004b64:	4680      	mov	r8, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	469a      	mov	sl, r3
 8004b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b6e:	d807      	bhi.n	8004b80 <_printf_i+0x28>
 8004b70:	2f62      	cmp	r7, #98	@ 0x62
 8004b72:	d80a      	bhi.n	8004b8a <_printf_i+0x32>
 8004b74:	2f00      	cmp	r7, #0
 8004b76:	f000 80d1 	beq.w	8004d1c <_printf_i+0x1c4>
 8004b7a:	2f58      	cmp	r7, #88	@ 0x58
 8004b7c:	f000 80b8 	beq.w	8004cf0 <_printf_i+0x198>
 8004b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b88:	e03a      	b.n	8004c00 <_printf_i+0xa8>
 8004b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b8e:	2b15      	cmp	r3, #21
 8004b90:	d8f6      	bhi.n	8004b80 <_printf_i+0x28>
 8004b92:	a101      	add	r1, pc, #4	@ (adr r1, 8004b98 <_printf_i+0x40>)
 8004b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b98:	08004bf1 	.word	0x08004bf1
 8004b9c:	08004c05 	.word	0x08004c05
 8004ba0:	08004b81 	.word	0x08004b81
 8004ba4:	08004b81 	.word	0x08004b81
 8004ba8:	08004b81 	.word	0x08004b81
 8004bac:	08004b81 	.word	0x08004b81
 8004bb0:	08004c05 	.word	0x08004c05
 8004bb4:	08004b81 	.word	0x08004b81
 8004bb8:	08004b81 	.word	0x08004b81
 8004bbc:	08004b81 	.word	0x08004b81
 8004bc0:	08004b81 	.word	0x08004b81
 8004bc4:	08004d03 	.word	0x08004d03
 8004bc8:	08004c2f 	.word	0x08004c2f
 8004bcc:	08004cbd 	.word	0x08004cbd
 8004bd0:	08004b81 	.word	0x08004b81
 8004bd4:	08004b81 	.word	0x08004b81
 8004bd8:	08004d25 	.word	0x08004d25
 8004bdc:	08004b81 	.word	0x08004b81
 8004be0:	08004c2f 	.word	0x08004c2f
 8004be4:	08004b81 	.word	0x08004b81
 8004be8:	08004b81 	.word	0x08004b81
 8004bec:	08004cc5 	.word	0x08004cc5
 8004bf0:	6833      	ldr	r3, [r6, #0]
 8004bf2:	1d1a      	adds	r2, r3, #4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6032      	str	r2, [r6, #0]
 8004bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c00:	2301      	movs	r3, #1
 8004c02:	e09c      	b.n	8004d3e <_printf_i+0x1e6>
 8004c04:	6833      	ldr	r3, [r6, #0]
 8004c06:	6820      	ldr	r0, [r4, #0]
 8004c08:	1d19      	adds	r1, r3, #4
 8004c0a:	6031      	str	r1, [r6, #0]
 8004c0c:	0606      	lsls	r6, r0, #24
 8004c0e:	d501      	bpl.n	8004c14 <_printf_i+0xbc>
 8004c10:	681d      	ldr	r5, [r3, #0]
 8004c12:	e003      	b.n	8004c1c <_printf_i+0xc4>
 8004c14:	0645      	lsls	r5, r0, #25
 8004c16:	d5fb      	bpl.n	8004c10 <_printf_i+0xb8>
 8004c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c1c:	2d00      	cmp	r5, #0
 8004c1e:	da03      	bge.n	8004c28 <_printf_i+0xd0>
 8004c20:	232d      	movs	r3, #45	@ 0x2d
 8004c22:	426d      	negs	r5, r5
 8004c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c28:	4858      	ldr	r0, [pc, #352]	@ (8004d8c <_printf_i+0x234>)
 8004c2a:	230a      	movs	r3, #10
 8004c2c:	e011      	b.n	8004c52 <_printf_i+0xfa>
 8004c2e:	6821      	ldr	r1, [r4, #0]
 8004c30:	6833      	ldr	r3, [r6, #0]
 8004c32:	0608      	lsls	r0, r1, #24
 8004c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c38:	d402      	bmi.n	8004c40 <_printf_i+0xe8>
 8004c3a:	0649      	lsls	r1, r1, #25
 8004c3c:	bf48      	it	mi
 8004c3e:	b2ad      	uxthmi	r5, r5
 8004c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c42:	4852      	ldr	r0, [pc, #328]	@ (8004d8c <_printf_i+0x234>)
 8004c44:	6033      	str	r3, [r6, #0]
 8004c46:	bf14      	ite	ne
 8004c48:	230a      	movne	r3, #10
 8004c4a:	2308      	moveq	r3, #8
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c52:	6866      	ldr	r6, [r4, #4]
 8004c54:	60a6      	str	r6, [r4, #8]
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	db05      	blt.n	8004c66 <_printf_i+0x10e>
 8004c5a:	6821      	ldr	r1, [r4, #0]
 8004c5c:	432e      	orrs	r6, r5
 8004c5e:	f021 0104 	bic.w	r1, r1, #4
 8004c62:	6021      	str	r1, [r4, #0]
 8004c64:	d04b      	beq.n	8004cfe <_printf_i+0x1a6>
 8004c66:	4616      	mov	r6, r2
 8004c68:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c6c:	fb03 5711 	mls	r7, r3, r1, r5
 8004c70:	5dc7      	ldrb	r7, [r0, r7]
 8004c72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c76:	462f      	mov	r7, r5
 8004c78:	42bb      	cmp	r3, r7
 8004c7a:	460d      	mov	r5, r1
 8004c7c:	d9f4      	bls.n	8004c68 <_printf_i+0x110>
 8004c7e:	2b08      	cmp	r3, #8
 8004c80:	d10b      	bne.n	8004c9a <_printf_i+0x142>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	07df      	lsls	r7, r3, #31
 8004c86:	d508      	bpl.n	8004c9a <_printf_i+0x142>
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	6861      	ldr	r1, [r4, #4]
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	bfde      	ittt	le
 8004c90:	2330      	movle	r3, #48	@ 0x30
 8004c92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c9a:	1b92      	subs	r2, r2, r6
 8004c9c:	6122      	str	r2, [r4, #16]
 8004c9e:	f8cd a000 	str.w	sl, [sp]
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	aa03      	add	r2, sp, #12
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	4640      	mov	r0, r8
 8004caa:	f7ff fee7 	bl	8004a7c <_printf_common>
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d14a      	bne.n	8004d48 <_printf_i+0x1f0>
 8004cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb6:	b004      	add	sp, #16
 8004cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	f043 0320 	orr.w	r3, r3, #32
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	4832      	ldr	r0, [pc, #200]	@ (8004d90 <_printf_i+0x238>)
 8004cc6:	2778      	movs	r7, #120	@ 0x78
 8004cc8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	6831      	ldr	r1, [r6, #0]
 8004cd0:	061f      	lsls	r7, r3, #24
 8004cd2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cd6:	d402      	bmi.n	8004cde <_printf_i+0x186>
 8004cd8:	065f      	lsls	r7, r3, #25
 8004cda:	bf48      	it	mi
 8004cdc:	b2ad      	uxthmi	r5, r5
 8004cde:	6031      	str	r1, [r6, #0]
 8004ce0:	07d9      	lsls	r1, r3, #31
 8004ce2:	bf44      	itt	mi
 8004ce4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ce8:	6023      	strmi	r3, [r4, #0]
 8004cea:	b11d      	cbz	r5, 8004cf4 <_printf_i+0x19c>
 8004cec:	2310      	movs	r3, #16
 8004cee:	e7ad      	b.n	8004c4c <_printf_i+0xf4>
 8004cf0:	4826      	ldr	r0, [pc, #152]	@ (8004d8c <_printf_i+0x234>)
 8004cf2:	e7e9      	b.n	8004cc8 <_printf_i+0x170>
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	f023 0320 	bic.w	r3, r3, #32
 8004cfa:	6023      	str	r3, [r4, #0]
 8004cfc:	e7f6      	b.n	8004cec <_printf_i+0x194>
 8004cfe:	4616      	mov	r6, r2
 8004d00:	e7bd      	b.n	8004c7e <_printf_i+0x126>
 8004d02:	6833      	ldr	r3, [r6, #0]
 8004d04:	6825      	ldr	r5, [r4, #0]
 8004d06:	6961      	ldr	r1, [r4, #20]
 8004d08:	1d18      	adds	r0, r3, #4
 8004d0a:	6030      	str	r0, [r6, #0]
 8004d0c:	062e      	lsls	r6, r5, #24
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	d501      	bpl.n	8004d16 <_printf_i+0x1be>
 8004d12:	6019      	str	r1, [r3, #0]
 8004d14:	e002      	b.n	8004d1c <_printf_i+0x1c4>
 8004d16:	0668      	lsls	r0, r5, #25
 8004d18:	d5fb      	bpl.n	8004d12 <_printf_i+0x1ba>
 8004d1a:	8019      	strh	r1, [r3, #0]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	6123      	str	r3, [r4, #16]
 8004d20:	4616      	mov	r6, r2
 8004d22:	e7bc      	b.n	8004c9e <_printf_i+0x146>
 8004d24:	6833      	ldr	r3, [r6, #0]
 8004d26:	1d1a      	adds	r2, r3, #4
 8004d28:	6032      	str	r2, [r6, #0]
 8004d2a:	681e      	ldr	r6, [r3, #0]
 8004d2c:	6862      	ldr	r2, [r4, #4]
 8004d2e:	2100      	movs	r1, #0
 8004d30:	4630      	mov	r0, r6
 8004d32:	f7fb fa75 	bl	8000220 <memchr>
 8004d36:	b108      	cbz	r0, 8004d3c <_printf_i+0x1e4>
 8004d38:	1b80      	subs	r0, r0, r6
 8004d3a:	6060      	str	r0, [r4, #4]
 8004d3c:	6863      	ldr	r3, [r4, #4]
 8004d3e:	6123      	str	r3, [r4, #16]
 8004d40:	2300      	movs	r3, #0
 8004d42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d46:	e7aa      	b.n	8004c9e <_printf_i+0x146>
 8004d48:	6923      	ldr	r3, [r4, #16]
 8004d4a:	4632      	mov	r2, r6
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	4640      	mov	r0, r8
 8004d50:	47d0      	blx	sl
 8004d52:	3001      	adds	r0, #1
 8004d54:	d0ad      	beq.n	8004cb2 <_printf_i+0x15a>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	079b      	lsls	r3, r3, #30
 8004d5a:	d413      	bmi.n	8004d84 <_printf_i+0x22c>
 8004d5c:	68e0      	ldr	r0, [r4, #12]
 8004d5e:	9b03      	ldr	r3, [sp, #12]
 8004d60:	4298      	cmp	r0, r3
 8004d62:	bfb8      	it	lt
 8004d64:	4618      	movlt	r0, r3
 8004d66:	e7a6      	b.n	8004cb6 <_printf_i+0x15e>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	4632      	mov	r2, r6
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	4640      	mov	r0, r8
 8004d70:	47d0      	blx	sl
 8004d72:	3001      	adds	r0, #1
 8004d74:	d09d      	beq.n	8004cb2 <_printf_i+0x15a>
 8004d76:	3501      	adds	r5, #1
 8004d78:	68e3      	ldr	r3, [r4, #12]
 8004d7a:	9903      	ldr	r1, [sp, #12]
 8004d7c:	1a5b      	subs	r3, r3, r1
 8004d7e:	42ab      	cmp	r3, r5
 8004d80:	dcf2      	bgt.n	8004d68 <_printf_i+0x210>
 8004d82:	e7eb      	b.n	8004d5c <_printf_i+0x204>
 8004d84:	2500      	movs	r5, #0
 8004d86:	f104 0619 	add.w	r6, r4, #25
 8004d8a:	e7f5      	b.n	8004d78 <_printf_i+0x220>
 8004d8c:	0800548d 	.word	0x0800548d
 8004d90:	0800549e 	.word	0x0800549e

08004d94 <memmove>:
 8004d94:	4288      	cmp	r0, r1
 8004d96:	b510      	push	{r4, lr}
 8004d98:	eb01 0402 	add.w	r4, r1, r2
 8004d9c:	d902      	bls.n	8004da4 <memmove+0x10>
 8004d9e:	4284      	cmp	r4, r0
 8004da0:	4623      	mov	r3, r4
 8004da2:	d807      	bhi.n	8004db4 <memmove+0x20>
 8004da4:	1e43      	subs	r3, r0, #1
 8004da6:	42a1      	cmp	r1, r4
 8004da8:	d008      	beq.n	8004dbc <memmove+0x28>
 8004daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004db2:	e7f8      	b.n	8004da6 <memmove+0x12>
 8004db4:	4402      	add	r2, r0
 8004db6:	4601      	mov	r1, r0
 8004db8:	428a      	cmp	r2, r1
 8004dba:	d100      	bne.n	8004dbe <memmove+0x2a>
 8004dbc:	bd10      	pop	{r4, pc}
 8004dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dc6:	e7f7      	b.n	8004db8 <memmove+0x24>

08004dc8 <_sbrk_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4d06      	ldr	r5, [pc, #24]	@ (8004de4 <_sbrk_r+0x1c>)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4604      	mov	r4, r0
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	602b      	str	r3, [r5, #0]
 8004dd4:	f7fc fb4c 	bl	8001470 <_sbrk>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d102      	bne.n	8004de2 <_sbrk_r+0x1a>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	b103      	cbz	r3, 8004de2 <_sbrk_r+0x1a>
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	200002c4 	.word	0x200002c4

08004de8 <_realloc_r>:
 8004de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dec:	4607      	mov	r7, r0
 8004dee:	4614      	mov	r4, r2
 8004df0:	460d      	mov	r5, r1
 8004df2:	b921      	cbnz	r1, 8004dfe <_realloc_r+0x16>
 8004df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004df8:	4611      	mov	r1, r2
 8004dfa:	f7ff bc5b 	b.w	80046b4 <_malloc_r>
 8004dfe:	b92a      	cbnz	r2, 8004e0c <_realloc_r+0x24>
 8004e00:	f7ff fbec 	bl	80045dc <_free_r>
 8004e04:	4625      	mov	r5, r4
 8004e06:	4628      	mov	r0, r5
 8004e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e0c:	f000 f81a 	bl	8004e44 <_malloc_usable_size_r>
 8004e10:	4284      	cmp	r4, r0
 8004e12:	4606      	mov	r6, r0
 8004e14:	d802      	bhi.n	8004e1c <_realloc_r+0x34>
 8004e16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e1a:	d8f4      	bhi.n	8004e06 <_realloc_r+0x1e>
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	4638      	mov	r0, r7
 8004e20:	f7ff fc48 	bl	80046b4 <_malloc_r>
 8004e24:	4680      	mov	r8, r0
 8004e26:	b908      	cbnz	r0, 8004e2c <_realloc_r+0x44>
 8004e28:	4645      	mov	r5, r8
 8004e2a:	e7ec      	b.n	8004e06 <_realloc_r+0x1e>
 8004e2c:	42b4      	cmp	r4, r6
 8004e2e:	4622      	mov	r2, r4
 8004e30:	4629      	mov	r1, r5
 8004e32:	bf28      	it	cs
 8004e34:	4632      	movcs	r2, r6
 8004e36:	f7ff fbc3 	bl	80045c0 <memcpy>
 8004e3a:	4629      	mov	r1, r5
 8004e3c:	4638      	mov	r0, r7
 8004e3e:	f7ff fbcd 	bl	80045dc <_free_r>
 8004e42:	e7f1      	b.n	8004e28 <_realloc_r+0x40>

08004e44 <_malloc_usable_size_r>:
 8004e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e48:	1f18      	subs	r0, r3, #4
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bfbc      	itt	lt
 8004e4e:	580b      	ldrlt	r3, [r1, r0]
 8004e50:	18c0      	addlt	r0, r0, r3
 8004e52:	4770      	bx	lr

08004e54 <_init>:
 8004e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e56:	bf00      	nop
 8004e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e5a:	bc08      	pop	{r3}
 8004e5c:	469e      	mov	lr, r3
 8004e5e:	4770      	bx	lr

08004e60 <_fini>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	bf00      	nop
 8004e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e66:	bc08      	pop	{r3}
 8004e68:	469e      	mov	lr, r3
 8004e6a:	4770      	bx	lr
